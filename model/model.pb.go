// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	model.proto

It has these top-level messages:
	CompletionResult
	BlobDatum
	HTTPHeader
	HTTPReqDatum
	HTTPRespDatum
	EmptyDatum
	StageRefDatum
	ErrorDatum
	StatusDatum
	Datum
	AddStageRequest
	CompleteStageExternallyRequest
	AddCompletedValueStageRequest
	AddDelayStageRequest
	AddInvokeFunctionStageRequest
	AddStageResponse
	CommitGraphRequest
	GraphRequestProcessedResponse
	CompleteDelayStageRequest
	CompleteStageExternallyResponse
	DeactivateGraphRequest
	CreateGraphRequest
	CreateGraphResponse
	FaasInvocationResponse
	GetGraphStateRequest
	GetGraphStateResponse
	ListGraphsRequest
	StreamLifecycleRequest
	StreamGraphRequest
	ListGraphResponse
	ListGraphsResponse
	AwaitStageResultRequest
	AwaitStageResultResponse
	InvokeFunctionRequest
	InvokeStageRequest
	GraphLifecycleEvent
	GraphEvent
	GraphCreatedEvent
	DelayScheduledEvent
	GraphTerminatingEvent
	GraphCompletedEvent
	GraphCommittedEvent
	StageAddedEvent
	StageCompletedEvent
	StageComposedEvent
	FaasInvocationStartedEvent
	FaasInvocationCompletedEvent
	RuntimeInvokeStageRequest
	RuntimeInvokeStageResponse
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/mwitkow/go-proto-validators"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// HTTPMethod defines a specific HTTP method
type HTTPMethod int32

const (
	HTTPMethod_unknown_method HTTPMethod = 0
	HTTPMethod_get            HTTPMethod = 1
	HTTPMethod_head           HTTPMethod = 2
	HTTPMethod_post           HTTPMethod = 3
	HTTPMethod_put            HTTPMethod = 4
	HTTPMethod_delete         HTTPMethod = 5
	HTTPMethod_options        HTTPMethod = 7
	HTTPMethod_patch          HTTPMethod = 6
)

var HTTPMethod_name = map[int32]string{
	0: "unknown_method",
	1: "get",
	2: "head",
	3: "post",
	4: "put",
	5: "delete",
	7: "options",
	6: "patch",
}
var HTTPMethod_value = map[string]int32{
	"unknown_method": 0,
	"get":            1,
	"head":           2,
	"post":           3,
	"put":            4,
	"delete":         5,
	"options":        7,
	"patch":          6,
}

func (x HTTPMethod) String() string {
	return proto.EnumName(HTTPMethod_name, int32(x))
}
func (HTTPMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ErrorDatumType defines an internal error code generated within a flow
type ErrorDatumType int32

const (
	ErrorDatumType_unknown_error          ErrorDatumType = 0
	ErrorDatumType_stage_timeout          ErrorDatumType = 1
	ErrorDatumType_stage_failed           ErrorDatumType = 2
	ErrorDatumType_function_timeout       ErrorDatumType = 3
	ErrorDatumType_function_invoke_failed ErrorDatumType = 4
	ErrorDatumType_stage_lost             ErrorDatumType = 5
	ErrorDatumType_invalid_stage_response ErrorDatumType = 6
)

var ErrorDatumType_name = map[int32]string{
	0: "unknown_error",
	1: "stage_timeout",
	2: "stage_failed",
	3: "function_timeout",
	4: "function_invoke_failed",
	5: "stage_lost",
	6: "invalid_stage_response",
}
var ErrorDatumType_value = map[string]int32{
	"unknown_error":          0,
	"stage_timeout":          1,
	"stage_failed":           2,
	"function_timeout":       3,
	"function_invoke_failed": 4,
	"stage_lost":             5,
	"invalid_stage_response": 6,
}

func (x ErrorDatumType) String() string {
	return proto.EnumName(ErrorDatumType_name, int32(x))
}
func (ErrorDatumType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// StateDatumType describes the state of a stage or graph
type StatusDatumType int32

const (
	StatusDatumType_unknown_state StatusDatumType = 0
	StatusDatumType_succeeded     StatusDatumType = 1
	StatusDatumType_failed        StatusDatumType = 2
	StatusDatumType_cancelled     StatusDatumType = 3
	StatusDatumType_killed        StatusDatumType = 4
)

var StatusDatumType_name = map[int32]string{
	0: "unknown_state",
	1: "succeeded",
	2: "failed",
	3: "cancelled",
	4: "killed",
}
var StatusDatumType_value = map[string]int32{
	"unknown_state": 0,
	"succeeded":     1,
	"failed":        2,
	"cancelled":     3,
	"killed":        4,
}

func (x StatusDatumType) String() string {
	return proto.EnumName(StatusDatumType_name, int32(x))
}
func (StatusDatumType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// CompletionOperation describes the type and behaviour of a stage of the graph
type CompletionOperation int32

const (
	CompletionOperation_unknown_operation    CompletionOperation = 0
	CompletionOperation_acceptEither         CompletionOperation = 1
	CompletionOperation_applyToEither        CompletionOperation = 2
	CompletionOperation_thenAcceptBoth       CompletionOperation = 3
	CompletionOperation_thenApply            CompletionOperation = 4
	CompletionOperation_thenRun              CompletionOperation = 5
	CompletionOperation_thenAccept           CompletionOperation = 6
	CompletionOperation_thenCompose          CompletionOperation = 7
	CompletionOperation_thenCombine          CompletionOperation = 8
	CompletionOperation_whenComplete         CompletionOperation = 9
	CompletionOperation_handle               CompletionOperation = 10
	CompletionOperation_supply               CompletionOperation = 11
	CompletionOperation_invokeFunction       CompletionOperation = 12
	CompletionOperation_completedValue       CompletionOperation = 13
	CompletionOperation_delay                CompletionOperation = 14
	CompletionOperation_allOf                CompletionOperation = 15
	CompletionOperation_anyOf                CompletionOperation = 16
	CompletionOperation_externalCompletion   CompletionOperation = 17
	CompletionOperation_exceptionally        CompletionOperation = 18
	CompletionOperation_terminationHook      CompletionOperation = 19
	CompletionOperation_exceptionallyCompose CompletionOperation = 20
)

var CompletionOperation_name = map[int32]string{
	0:  "unknown_operation",
	1:  "acceptEither",
	2:  "applyToEither",
	3:  "thenAcceptBoth",
	4:  "thenApply",
	5:  "thenRun",
	6:  "thenAccept",
	7:  "thenCompose",
	8:  "thenCombine",
	9:  "whenComplete",
	10: "handle",
	11: "supply",
	12: "invokeFunction",
	13: "completedValue",
	14: "delay",
	15: "allOf",
	16: "anyOf",
	17: "externalCompletion",
	18: "exceptionally",
	19: "terminationHook",
	20: "exceptionallyCompose",
}
var CompletionOperation_value = map[string]int32{
	"unknown_operation":    0,
	"acceptEither":         1,
	"applyToEither":        2,
	"thenAcceptBoth":       3,
	"thenApply":            4,
	"thenRun":              5,
	"thenAccept":           6,
	"thenCompose":          7,
	"thenCombine":          8,
	"whenComplete":         9,
	"handle":               10,
	"supply":               11,
	"invokeFunction":       12,
	"completedValue":       13,
	"delay":                14,
	"allOf":                15,
	"anyOf":                16,
	"externalCompletion":   17,
	"exceptionally":        18,
	"terminationHook":      19,
	"exceptionallyCompose": 20,
}

func (x CompletionOperation) String() string {
	return proto.EnumName(CompletionOperation_name, int32(x))
}
func (CompletionOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ListGraphsFilter int32

const (
	ListGraphsFilter_unknown   ListGraphsFilter = 0
	ListGraphsFilter_all       ListGraphsFilter = 1
	ListGraphsFilter_running   ListGraphsFilter = 2
	ListGraphsFilter_completed ListGraphsFilter = 3
)

var ListGraphsFilter_name = map[int32]string{
	0: "unknown",
	1: "all",
	2: "running",
	3: "completed",
}
var ListGraphsFilter_value = map[string]int32{
	"unknown":   0,
	"all":       1,
	"running":   2,
	"completed": 3,
}

func (x ListGraphsFilter) String() string {
	return proto.EnumName(ListGraphsFilter_name, int32(x))
}
func (ListGraphsFilter) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// CompletinonResult holds a value Datum and a result status (successful/failed)
type CompletionResult struct {
	Successful bool   `protobuf:"varint,1,opt,name=successful" json:"successful,omitempty"`
	Datum      *Datum `protobuf:"bytes,2,opt,name=datum" json:"datum,omitempty"`
}

func (m *CompletionResult) Reset()                    { *m = CompletionResult{} }
func (m *CompletionResult) String() string            { return proto.CompactTextString(m) }
func (*CompletionResult) ProtoMessage()               {}
func (*CompletionResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CompletionResult) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *CompletionResult) GetDatum() *Datum {
	if m != nil {
		return m.Datum
	}
	return nil
}

// BlobDatum holds a reference to a blob the associated blob store
type BlobDatum struct {
	BlobId      string `protobuf:"bytes,1,opt,name=blob_id,json=blobId" json:"blob_id,omitempty"`
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
	Length      int64  `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
}

func (m *BlobDatum) Reset()                    { *m = BlobDatum{} }
func (m *BlobDatum) String() string            { return proto.CompactTextString(m) }
func (*BlobDatum) ProtoMessage()               {}
func (*BlobDatum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlobDatum) GetBlobId() string {
	if m != nil {
		return m.BlobId
	}
	return ""
}

func (m *BlobDatum) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *BlobDatum) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

// HTTPHeader wraps a single header key/value
type HTTPHeader struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *HTTPHeader) Reset()                    { *m = HTTPHeader{} }
func (m *HTTPHeader) String() string            { return proto.CompactTextString(m) }
func (*HTTPHeader) ProtoMessage()               {}
func (*HTTPHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HTTPHeader) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HTTPHeader) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// HTTPReqDatum describes an outgoing or incoming HTTP Request, it wraps the headers, method and optional body
type HTTPReqDatum struct {
	Body    *BlobDatum    `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
	Headers []*HTTPHeader `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty"`
	Method  HTTPMethod    `protobuf:"varint,4,opt,name=method,enum=model.HTTPMethod" json:"method,omitempty"`
}

func (m *HTTPReqDatum) Reset()                    { *m = HTTPReqDatum{} }
func (m *HTTPReqDatum) String() string            { return proto.CompactTextString(m) }
func (*HTTPReqDatum) ProtoMessage()               {}
func (*HTTPReqDatum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HTTPReqDatum) GetBody() *BlobDatum {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *HTTPReqDatum) GetHeaders() []*HTTPHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPReqDatum) GetMethod() HTTPMethod {
	if m != nil {
		return m.Method
	}
	return HTTPMethod_unknown_method
}

// HTTPRespDatum wraps an outgoing or incoming HTTP REQUEST, it wraps the headers, status code and optinoal body
type HTTPRespDatum struct {
	Body       *BlobDatum    `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
	Headers    []*HTTPHeader `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty"`
	StatusCode int32         `protobuf:"varint,4,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
}

func (m *HTTPRespDatum) Reset()                    { *m = HTTPRespDatum{} }
func (m *HTTPRespDatum) String() string            { return proto.CompactTextString(m) }
func (*HTTPRespDatum) ProtoMessage()               {}
func (*HTTPRespDatum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HTTPRespDatum) GetBody() *BlobDatum {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *HTTPRespDatum) GetHeaders() []*HTTPHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPRespDatum) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

// EmptyDatum represents a null or empty value
type EmptyDatum struct {
}

func (m *EmptyDatum) Reset()                    { *m = EmptyDatum{} }
func (m *EmptyDatum) String() string            { return proto.CompactTextString(m) }
func (*EmptyDatum) ProtoMessage()               {}
func (*EmptyDatum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// StageRefDatum represents a reference to another stage in the graph
type StageRefDatum struct {
	StageId string `protobuf:"bytes,1,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
}

func (m *StageRefDatum) Reset()                    { *m = StageRefDatum{} }
func (m *StageRefDatum) String() string            { return proto.CompactTextString(m) }
func (*StageRefDatum) ProtoMessage()               {}
func (*StageRefDatum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StageRefDatum) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

// ErrorDatum represents an error that has occured within a flow graph, the type indicates the cause of the error and the message is informational
type ErrorDatum struct {
	Type    ErrorDatumType `protobuf:"varint,1,opt,name=type,enum=model.ErrorDatumType" json:"type,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ErrorDatum) Reset()                    { *m = ErrorDatum{} }
func (m *ErrorDatum) String() string            { return proto.CompactTextString(m) }
func (*ErrorDatum) ProtoMessage()               {}
func (*ErrorDatum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ErrorDatum) GetType() ErrorDatumType {
	if m != nil {
		return m.Type
	}
	return ErrorDatumType_unknown_error
}

func (m *ErrorDatum) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// StateDatum wraps a description of the state of the graph in a datum
type StatusDatum struct {
	Type StatusDatumType `protobuf:"varint,1,opt,name=type,enum=model.StatusDatumType" json:"type,omitempty"`
}

func (m *StatusDatum) Reset()                    { *m = StatusDatum{} }
func (m *StatusDatum) String() string            { return proto.CompactTextString(m) }
func (*StatusDatum) ProtoMessage()               {}
func (*StatusDatum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StatusDatum) GetType() StatusDatumType {
	if m != nil {
		return m.Type
	}
	return StatusDatumType_unknown_state
}

// Datum encapusulates all possible values that may be associated with a stage in the flow graph
type Datum struct {
	// Types that are valid to be assigned to Val:
	//	*Datum_Empty
	//	*Datum_Blob
	//	*Datum_Error
	//	*Datum_StageRef
	//	*Datum_HttpReq
	//	*Datum_HttpResp
	//	*Datum_Status
	Val isDatum_Val `protobuf_oneof:"val"`
}

func (m *Datum) Reset()                    { *m = Datum{} }
func (m *Datum) String() string            { return proto.CompactTextString(m) }
func (*Datum) ProtoMessage()               {}
func (*Datum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type isDatum_Val interface {
	isDatum_Val()
}

type Datum_Empty struct {
	Empty *EmptyDatum `protobuf:"bytes,1,opt,name=empty,oneof"`
}
type Datum_Blob struct {
	Blob *BlobDatum `protobuf:"bytes,2,opt,name=blob,oneof"`
}
type Datum_Error struct {
	Error *ErrorDatum `protobuf:"bytes,3,opt,name=error,oneof"`
}
type Datum_StageRef struct {
	StageRef *StageRefDatum `protobuf:"bytes,4,opt,name=stage_ref,json=stageRef,oneof"`
}
type Datum_HttpReq struct {
	HttpReq *HTTPReqDatum `protobuf:"bytes,5,opt,name=http_req,json=httpReq,oneof"`
}
type Datum_HttpResp struct {
	HttpResp *HTTPRespDatum `protobuf:"bytes,6,opt,name=http_resp,json=httpResp,oneof"`
}
type Datum_Status struct {
	Status *StatusDatum `protobuf:"bytes,7,opt,name=status,oneof"`
}

func (*Datum_Empty) isDatum_Val()    {}
func (*Datum_Blob) isDatum_Val()     {}
func (*Datum_Error) isDatum_Val()    {}
func (*Datum_StageRef) isDatum_Val() {}
func (*Datum_HttpReq) isDatum_Val()  {}
func (*Datum_HttpResp) isDatum_Val() {}
func (*Datum_Status) isDatum_Val()   {}

func (m *Datum) GetVal() isDatum_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *Datum) GetEmpty() *EmptyDatum {
	if x, ok := m.GetVal().(*Datum_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *Datum) GetBlob() *BlobDatum {
	if x, ok := m.GetVal().(*Datum_Blob); ok {
		return x.Blob
	}
	return nil
}

func (m *Datum) GetError() *ErrorDatum {
	if x, ok := m.GetVal().(*Datum_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Datum) GetStageRef() *StageRefDatum {
	if x, ok := m.GetVal().(*Datum_StageRef); ok {
		return x.StageRef
	}
	return nil
}

func (m *Datum) GetHttpReq() *HTTPReqDatum {
	if x, ok := m.GetVal().(*Datum_HttpReq); ok {
		return x.HttpReq
	}
	return nil
}

func (m *Datum) GetHttpResp() *HTTPRespDatum {
	if x, ok := m.GetVal().(*Datum_HttpResp); ok {
		return x.HttpResp
	}
	return nil
}

func (m *Datum) GetStatus() *StatusDatum {
	if x, ok := m.GetVal().(*Datum_Status); ok {
		return x.Status
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Datum) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Datum_OneofMarshaler, _Datum_OneofUnmarshaler, _Datum_OneofSizer, []interface{}{
		(*Datum_Empty)(nil),
		(*Datum_Blob)(nil),
		(*Datum_Error)(nil),
		(*Datum_StageRef)(nil),
		(*Datum_HttpReq)(nil),
		(*Datum_HttpResp)(nil),
		(*Datum_Status)(nil),
	}
}

func _Datum_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Datum)
	// val
	switch x := m.Val.(type) {
	case *Datum_Empty:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {
			return err
		}
	case *Datum_Blob:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Blob); err != nil {
			return err
		}
	case *Datum_Error:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *Datum_StageRef:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StageRef); err != nil {
			return err
		}
	case *Datum_HttpReq:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpReq); err != nil {
			return err
		}
	case *Datum_HttpResp:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpResp); err != nil {
			return err
		}
	case *Datum_Status:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Datum.Val has unexpected type %T", x)
	}
	return nil
}

func _Datum_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Datum)
	switch tag {
	case 1: // val.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmptyDatum)
		err := b.DecodeMessage(msg)
		m.Val = &Datum_Empty{msg}
		return true, err
	case 2: // val.blob
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlobDatum)
		err := b.DecodeMessage(msg)
		m.Val = &Datum_Blob{msg}
		return true, err
	case 3: // val.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ErrorDatum)
		err := b.DecodeMessage(msg)
		m.Val = &Datum_Error{msg}
		return true, err
	case 4: // val.stage_ref
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StageRefDatum)
		err := b.DecodeMessage(msg)
		m.Val = &Datum_StageRef{msg}
		return true, err
	case 5: // val.http_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HTTPReqDatum)
		err := b.DecodeMessage(msg)
		m.Val = &Datum_HttpReq{msg}
		return true, err
	case 6: // val.http_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HTTPRespDatum)
		err := b.DecodeMessage(msg)
		m.Val = &Datum_HttpResp{msg}
		return true, err
	case 7: // val.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StatusDatum)
		err := b.DecodeMessage(msg)
		m.Val = &Datum_Status{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Datum_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Datum)
	// val
	switch x := m.Val.(type) {
	case *Datum_Empty:
		s := proto.Size(x.Empty)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datum_Blob:
		s := proto.Size(x.Blob)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datum_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datum_StageRef:
		s := proto.Size(x.StageRef)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datum_HttpReq:
		s := proto.Size(x.HttpReq)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datum_HttpResp:
		s := proto.Size(x.HttpResp)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datum_Status:
		s := proto.Size(x.Status)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// AddStageRequest adds a new stage with dependenencies to the graph
type AddStageRequest struct {
	FlowId       string              `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	Operation    CompletionOperation `protobuf:"varint,2,opt,name=operation,enum=model.CompletionOperation" json:"operation,omitempty"`
	Closure      *BlobDatum          `protobuf:"bytes,3,opt,name=closure" json:"closure,omitempty"`
	Deps         []string            `protobuf:"bytes,4,rep,name=deps" json:"deps,omitempty"`
	CodeLocation string              `protobuf:"bytes,5,opt,name=code_location,json=codeLocation" json:"code_location,omitempty"`
	CallerId     string              `protobuf:"bytes,6,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
}

func (m *AddStageRequest) Reset()                    { *m = AddStageRequest{} }
func (m *AddStageRequest) String() string            { return proto.CompactTextString(m) }
func (*AddStageRequest) ProtoMessage()               {}
func (*AddStageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AddStageRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *AddStageRequest) GetOperation() CompletionOperation {
	if m != nil {
		return m.Operation
	}
	return CompletionOperation_unknown_operation
}

func (m *AddStageRequest) GetClosure() *BlobDatum {
	if m != nil {
		return m.Closure
	}
	return nil
}

func (m *AddStageRequest) GetDeps() []string {
	if m != nil {
		return m.Deps
	}
	return nil
}

func (m *AddStageRequest) GetCodeLocation() string {
	if m != nil {
		return m.CodeLocation
	}
	return ""
}

func (m *AddStageRequest) GetCallerId() string {
	if m != nil {
		return m.CallerId
	}
	return ""
}

// CompleteStageExternallyRequest marks an existing stage as complete with a specific value
type CompleteStageExternallyRequest struct {
	FlowId       string            `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	StageId      string            `protobuf:"bytes,2,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	Value        *CompletionResult `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	CodeLocation string            `protobuf:"bytes,4,opt,name=code_location,json=codeLocation" json:"code_location,omitempty"`
	CallerId     string            `protobuf:"bytes,5,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
}

func (m *CompleteStageExternallyRequest) Reset()                    { *m = CompleteStageExternallyRequest{} }
func (m *CompleteStageExternallyRequest) String() string            { return proto.CompactTextString(m) }
func (*CompleteStageExternallyRequest) ProtoMessage()               {}
func (*CompleteStageExternallyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CompleteStageExternallyRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *CompleteStageExternallyRequest) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *CompleteStageExternallyRequest) GetValue() *CompletionResult {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CompleteStageExternallyRequest) GetCodeLocation() string {
	if m != nil {
		return m.CodeLocation
	}
	return ""
}

func (m *CompleteStageExternallyRequest) GetCallerId() string {
	if m != nil {
		return m.CallerId
	}
	return ""
}

// AddCompletedValueStageRequest creates a new stage with a specific value
type AddCompletedValueStageRequest struct {
	FlowId       string            `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	Value        *CompletionResult `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	CodeLocation string            `protobuf:"bytes,3,opt,name=code_location,json=codeLocation" json:"code_location,omitempty"`
	CallerId     string            `protobuf:"bytes,4,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
}

func (m *AddCompletedValueStageRequest) Reset()                    { *m = AddCompletedValueStageRequest{} }
func (m *AddCompletedValueStageRequest) String() string            { return proto.CompactTextString(m) }
func (*AddCompletedValueStageRequest) ProtoMessage()               {}
func (*AddCompletedValueStageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AddCompletedValueStageRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *AddCompletedValueStageRequest) GetValue() *CompletionResult {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *AddCompletedValueStageRequest) GetCodeLocation() string {
	if m != nil {
		return m.CodeLocation
	}
	return ""
}

func (m *AddCompletedValueStageRequest) GetCallerId() string {
	if m != nil {
		return m.CallerId
	}
	return ""
}

// AddDelayStageRequest creates a delay stage
type AddDelayStageRequest struct {
	FlowId       string `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	DelayMs      int64  `protobuf:"varint,2,opt,name=delay_ms,json=delayMs" json:"delay_ms,omitempty"`
	CodeLocation string `protobuf:"bytes,3,opt,name=code_location,json=codeLocation" json:"code_location,omitempty"`
	CallerId     string `protobuf:"bytes,4,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
}

func (m *AddDelayStageRequest) Reset()                    { *m = AddDelayStageRequest{} }
func (m *AddDelayStageRequest) String() string            { return proto.CompactTextString(m) }
func (*AddDelayStageRequest) ProtoMessage()               {}
func (*AddDelayStageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AddDelayStageRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *AddDelayStageRequest) GetDelayMs() int64 {
	if m != nil {
		return m.DelayMs
	}
	return 0
}

func (m *AddDelayStageRequest) GetCodeLocation() string {
	if m != nil {
		return m.CodeLocation
	}
	return ""
}

func (m *AddDelayStageRequest) GetCallerId() string {
	if m != nil {
		return m.CallerId
	}
	return ""
}

// AddInvokeFunctionStageRequest adds a function invocation
type AddInvokeFunctionStageRequest struct {
	FlowId       string        `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	FunctionId   string        `protobuf:"bytes,2,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	Arg          *HTTPReqDatum `protobuf:"bytes,3,opt,name=arg" json:"arg,omitempty"`
	CodeLocation string        `protobuf:"bytes,4,opt,name=code_location,json=codeLocation" json:"code_location,omitempty"`
	CallerId     string        `protobuf:"bytes,5,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
}

func (m *AddInvokeFunctionStageRequest) Reset()                    { *m = AddInvokeFunctionStageRequest{} }
func (m *AddInvokeFunctionStageRequest) String() string            { return proto.CompactTextString(m) }
func (*AddInvokeFunctionStageRequest) ProtoMessage()               {}
func (*AddInvokeFunctionStageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AddInvokeFunctionStageRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *AddInvokeFunctionStageRequest) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *AddInvokeFunctionStageRequest) GetArg() *HTTPReqDatum {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *AddInvokeFunctionStageRequest) GetCodeLocation() string {
	if m != nil {
		return m.CodeLocation
	}
	return ""
}

func (m *AddInvokeFunctionStageRequest) GetCallerId() string {
	if m != nil {
		return m.CallerId
	}
	return ""
}

// AddStageResponse returns the stage ID of the created stage
type AddStageResponse struct {
	FlowId  string `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	StageId string `protobuf:"bytes,2,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
}

func (m *AddStageResponse) Reset()                    { *m = AddStageResponse{} }
func (m *AddStageResponse) String() string            { return proto.CompactTextString(m) }
func (*AddStageResponse) ProtoMessage()               {}
func (*AddStageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AddStageResponse) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *AddStageResponse) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

type CommitGraphRequest struct {
	FlowId string `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *CommitGraphRequest) Reset()                    { *m = CommitGraphRequest{} }
func (m *CommitGraphRequest) String() string            { return proto.CompactTextString(m) }
func (*CommitGraphRequest) ProtoMessage()               {}
func (*CommitGraphRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CommitGraphRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

type GraphRequestProcessedResponse struct {
	FlowId string `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *GraphRequestProcessedResponse) Reset()                    { *m = GraphRequestProcessedResponse{} }
func (m *GraphRequestProcessedResponse) String() string            { return proto.CompactTextString(m) }
func (*GraphRequestProcessedResponse) ProtoMessage()               {}
func (*GraphRequestProcessedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GraphRequestProcessedResponse) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

type CompleteDelayStageRequest struct {
	FlowId  string            `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	StageId string            `protobuf:"bytes,2,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	Result  *CompletionResult `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *CompleteDelayStageRequest) Reset()                    { *m = CompleteDelayStageRequest{} }
func (m *CompleteDelayStageRequest) String() string            { return proto.CompactTextString(m) }
func (*CompleteDelayStageRequest) ProtoMessage()               {}
func (*CompleteDelayStageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CompleteDelayStageRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *CompleteDelayStageRequest) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *CompleteDelayStageRequest) GetResult() *CompletionResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type CompleteStageExternallyResponse struct {
	FlowId     string `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	StageId    string `protobuf:"bytes,2,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	Successful bool   `protobuf:"varint,3,opt,name=successful" json:"successful,omitempty"`
}

func (m *CompleteStageExternallyResponse) Reset()         { *m = CompleteStageExternallyResponse{} }
func (m *CompleteStageExternallyResponse) String() string { return proto.CompactTextString(m) }
func (*CompleteStageExternallyResponse) ProtoMessage()    {}
func (*CompleteStageExternallyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19}
}

func (m *CompleteStageExternallyResponse) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *CompleteStageExternallyResponse) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *CompleteStageExternallyResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type DeactivateGraphRequest struct {
	FlowId string `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *DeactivateGraphRequest) Reset()                    { *m = DeactivateGraphRequest{} }
func (m *DeactivateGraphRequest) String() string            { return proto.CompactTextString(m) }
func (*DeactivateGraphRequest) ProtoMessage()               {}
func (*DeactivateGraphRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *DeactivateGraphRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

type CreateGraphRequest struct {
	FunctionId string `protobuf:"bytes,1,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	FlowId     string `protobuf:"bytes,2,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *CreateGraphRequest) Reset()                    { *m = CreateGraphRequest{} }
func (m *CreateGraphRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGraphRequest) ProtoMessage()               {}
func (*CreateGraphRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CreateGraphRequest) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *CreateGraphRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

type CreateGraphResponse struct {
	FlowId string `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *CreateGraphResponse) Reset()                    { *m = CreateGraphResponse{} }
func (m *CreateGraphResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGraphResponse) ProtoMessage()               {}
func (*CreateGraphResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CreateGraphResponse) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

type FaasInvocationResponse struct {
	FlowId     string            `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	StageId    string            `protobuf:"bytes,2,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	FunctionId string            `protobuf:"bytes,3,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	Result     *CompletionResult `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	CallId     string            `protobuf:"bytes,5,opt,name=call_id,json=callId" json:"call_id,omitempty"`
}

func (m *FaasInvocationResponse) Reset()                    { *m = FaasInvocationResponse{} }
func (m *FaasInvocationResponse) String() string            { return proto.CompactTextString(m) }
func (*FaasInvocationResponse) ProtoMessage()               {}
func (*FaasInvocationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *FaasInvocationResponse) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *FaasInvocationResponse) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *FaasInvocationResponse) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *FaasInvocationResponse) GetResult() *CompletionResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *FaasInvocationResponse) GetCallId() string {
	if m != nil {
		return m.CallId
	}
	return ""
}

type GetGraphStateRequest struct {
	FlowId string `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *GetGraphStateRequest) Reset()                    { *m = GetGraphStateRequest{} }
func (m *GetGraphStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGraphStateRequest) ProtoMessage()               {}
func (*GetGraphStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetGraphStateRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

type GetGraphStateResponse struct {
	Stages     map[string]*GetGraphStateResponse_StageRepresentation `protobuf:"bytes,1,rep,name=stages" json:"stages,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FunctionId string                                                `protobuf:"bytes,2,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	FlowId     string                                                `protobuf:"bytes,3,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *GetGraphStateResponse) Reset()                    { *m = GetGraphStateResponse{} }
func (m *GetGraphStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGraphStateResponse) ProtoMessage()               {}
func (*GetGraphStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetGraphStateResponse) GetStages() map[string]*GetGraphStateResponse_StageRepresentation {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *GetGraphStateResponse) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *GetGraphStateResponse) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

type GetGraphStateResponse_StageRepresentation struct {
	Type         string   `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Status       string   `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Dependencies []string `protobuf:"bytes,3,rep,name=dependencies" json:"dependencies,omitempty"`
}

func (m *GetGraphStateResponse_StageRepresentation) Reset() {
	*m = GetGraphStateResponse_StageRepresentation{}
}
func (m *GetGraphStateResponse_StageRepresentation) String() string { return proto.CompactTextString(m) }
func (*GetGraphStateResponse_StageRepresentation) ProtoMessage()    {}
func (*GetGraphStateResponse_StageRepresentation) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25, 0}
}

func (m *GetGraphStateResponse_StageRepresentation) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetGraphStateResponse_StageRepresentation) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetGraphStateResponse_StageRepresentation) GetDependencies() []string {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

type ListGraphsRequest struct {
	Filter ListGraphsFilter `protobuf:"varint,1,opt,name=filter,enum=model.ListGraphsFilter" json:"filter,omitempty"`
}

func (m *ListGraphsRequest) Reset()                    { *m = ListGraphsRequest{} }
func (m *ListGraphsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGraphsRequest) ProtoMessage()               {}
func (*ListGraphsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ListGraphsRequest) GetFilter() ListGraphsFilter {
	if m != nil {
		return m.Filter
	}
	return ListGraphsFilter_unknown
}

type StreamLifecycleRequest struct {
}

func (m *StreamLifecycleRequest) Reset()                    { *m = StreamLifecycleRequest{} }
func (m *StreamLifecycleRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamLifecycleRequest) ProtoMessage()               {}
func (*StreamLifecycleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type StreamGraphRequest struct {
	FlowId  string `protobuf:"bytes,2,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	FromSeq uint64 `protobuf:"varint,3,opt,name=from_seq,json=fromSeq" json:"from_seq,omitempty"`
}

func (m *StreamGraphRequest) Reset()                    { *m = StreamGraphRequest{} }
func (m *StreamGraphRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamGraphRequest) ProtoMessage()               {}
func (*StreamGraphRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *StreamGraphRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *StreamGraphRequest) GetFromSeq() uint64 {
	if m != nil {
		return m.FromSeq
	}
	return 0
}

type ListGraphResponse struct {
	FlowId string `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *ListGraphResponse) Reset()                    { *m = ListGraphResponse{} }
func (m *ListGraphResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGraphResponse) ProtoMessage()               {}
func (*ListGraphResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ListGraphResponse) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

type ListGraphsResponse struct {
	Graphs []*ListGraphResponse `protobuf:"bytes,1,rep,name=graphs" json:"graphs,omitempty"`
}

func (m *ListGraphsResponse) Reset()                    { *m = ListGraphsResponse{} }
func (m *ListGraphsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGraphsResponse) ProtoMessage()               {}
func (*ListGraphsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ListGraphsResponse) GetGraphs() []*ListGraphResponse {
	if m != nil {
		return m.Graphs
	}
	return nil
}

type AwaitStageResultRequest struct {
	FlowId    string `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	StageId   string `protobuf:"bytes,2,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	TimeoutMs int32  `protobuf:"varint,3,opt,name=timeout_ms,json=timeoutMs" json:"timeout_ms,omitempty"`
}

func (m *AwaitStageResultRequest) Reset()                    { *m = AwaitStageResultRequest{} }
func (m *AwaitStageResultRequest) String() string            { return proto.CompactTextString(m) }
func (*AwaitStageResultRequest) ProtoMessage()               {}
func (*AwaitStageResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *AwaitStageResultRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *AwaitStageResultRequest) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *AwaitStageResultRequest) GetTimeoutMs() int32 {
	if m != nil {
		return m.TimeoutMs
	}
	return 0
}

type AwaitStageResultResponse struct {
	FlowId  string            `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	StageId string            `protobuf:"bytes,2,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	Result  *CompletionResult `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *AwaitStageResultResponse) Reset()                    { *m = AwaitStageResultResponse{} }
func (m *AwaitStageResultResponse) String() string            { return proto.CompactTextString(m) }
func (*AwaitStageResultResponse) ProtoMessage()               {}
func (*AwaitStageResultResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *AwaitStageResultResponse) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *AwaitStageResultResponse) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *AwaitStageResultResponse) GetResult() *CompletionResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// Invoke commands
type InvokeFunctionRequest struct {
	FlowId     string        `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	StageId    string        `protobuf:"bytes,2,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	FunctionId string        `protobuf:"bytes,3,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	Arg        *HTTPReqDatum `protobuf:"bytes,4,opt,name=arg" json:"arg,omitempty"`
}

func (m *InvokeFunctionRequest) Reset()                    { *m = InvokeFunctionRequest{} }
func (m *InvokeFunctionRequest) String() string            { return proto.CompactTextString(m) }
func (*InvokeFunctionRequest) ProtoMessage()               {}
func (*InvokeFunctionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *InvokeFunctionRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *InvokeFunctionRequest) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *InvokeFunctionRequest) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *InvokeFunctionRequest) GetArg() *HTTPReqDatum {
	if m != nil {
		return m.Arg
	}
	return nil
}

type InvokeStageRequest struct {
	FlowId     string              `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	StageId    string              `protobuf:"bytes,2,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	FunctionId string              `protobuf:"bytes,3,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	Args       []*CompletionResult `protobuf:"bytes,5,rep,name=args" json:"args,omitempty"`
	Closure    *BlobDatum          `protobuf:"bytes,6,opt,name=closure" json:"closure,omitempty"`
}

func (m *InvokeStageRequest) Reset()                    { *m = InvokeStageRequest{} }
func (m *InvokeStageRequest) String() string            { return proto.CompactTextString(m) }
func (*InvokeStageRequest) ProtoMessage()               {}
func (*InvokeStageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *InvokeStageRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *InvokeStageRequest) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *InvokeStageRequest) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *InvokeStageRequest) GetArgs() []*CompletionResult {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *InvokeStageRequest) GetClosure() *BlobDatum {
	if m != nil {
		return m.Closure
	}
	return nil
}

type GraphLifecycleEvent struct {
	Seq    uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	FlowId string `protobuf:"bytes,2,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	// Types that are valid to be assigned to Val:
	//	*GraphLifecycleEvent_GraphCreated
	//	*GraphLifecycleEvent_GraphCompleted
	Val isGraphLifecycleEvent_Val `protobuf_oneof:"val"`
}

func (m *GraphLifecycleEvent) Reset()                    { *m = GraphLifecycleEvent{} }
func (m *GraphLifecycleEvent) String() string            { return proto.CompactTextString(m) }
func (*GraphLifecycleEvent) ProtoMessage()               {}
func (*GraphLifecycleEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

type isGraphLifecycleEvent_Val interface {
	isGraphLifecycleEvent_Val()
}

type GraphLifecycleEvent_GraphCreated struct {
	GraphCreated *GraphCreatedEvent `protobuf:"bytes,10,opt,name=graph_created,json=graphCreated,oneof"`
}
type GraphLifecycleEvent_GraphCompleted struct {
	GraphCompleted *GraphCompletedEvent `protobuf:"bytes,12,opt,name=graph_completed,json=graphCompleted,oneof"`
}

func (*GraphLifecycleEvent_GraphCreated) isGraphLifecycleEvent_Val()   {}
func (*GraphLifecycleEvent_GraphCompleted) isGraphLifecycleEvent_Val() {}

func (m *GraphLifecycleEvent) GetVal() isGraphLifecycleEvent_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *GraphLifecycleEvent) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *GraphLifecycleEvent) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *GraphLifecycleEvent) GetGraphCreated() *GraphCreatedEvent {
	if x, ok := m.GetVal().(*GraphLifecycleEvent_GraphCreated); ok {
		return x.GraphCreated
	}
	return nil
}

func (m *GraphLifecycleEvent) GetGraphCompleted() *GraphCompletedEvent {
	if x, ok := m.GetVal().(*GraphLifecycleEvent_GraphCompleted); ok {
		return x.GraphCompleted
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GraphLifecycleEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GraphLifecycleEvent_OneofMarshaler, _GraphLifecycleEvent_OneofUnmarshaler, _GraphLifecycleEvent_OneofSizer, []interface{}{
		(*GraphLifecycleEvent_GraphCreated)(nil),
		(*GraphLifecycleEvent_GraphCompleted)(nil),
	}
}

func _GraphLifecycleEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GraphLifecycleEvent)
	// val
	switch x := m.Val.(type) {
	case *GraphLifecycleEvent_GraphCreated:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GraphCreated); err != nil {
			return err
		}
	case *GraphLifecycleEvent_GraphCompleted:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GraphCompleted); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GraphLifecycleEvent.Val has unexpected type %T", x)
	}
	return nil
}

func _GraphLifecycleEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GraphLifecycleEvent)
	switch tag {
	case 10: // val.graph_created
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GraphCreatedEvent)
		err := b.DecodeMessage(msg)
		m.Val = &GraphLifecycleEvent_GraphCreated{msg}
		return true, err
	case 12: // val.graph_completed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GraphCompletedEvent)
		err := b.DecodeMessage(msg)
		m.Val = &GraphLifecycleEvent_GraphCompleted{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GraphLifecycleEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GraphLifecycleEvent)
	// val
	switch x := m.Val.(type) {
	case *GraphLifecycleEvent_GraphCreated:
		s := proto.Size(x.GraphCreated)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphLifecycleEvent_GraphCompleted:
		s := proto.Size(x.GraphCompleted)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GraphEvent struct {
	Seq    uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	FlowId string `protobuf:"bytes,2,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	// Types that are valid to be assigned to Val:
	//	*GraphEvent_GraphCreated
	//	*GraphEvent_GraphTerminating
	//	*GraphEvent_GraphCompleted
	//	*GraphEvent_DelayScheduled
	//	*GraphEvent_StageAdded
	//	*GraphEvent_StageCompleted
	//	*GraphEvent_StageComposed
	//	*GraphEvent_FaasInvocationStarted
	//	*GraphEvent_FaasInvocationCompleted
	//	*GraphEvent_GraphCommitted
	Val isGraphEvent_Val `protobuf_oneof:"val"`
}

func (m *GraphEvent) Reset()                    { *m = GraphEvent{} }
func (m *GraphEvent) String() string            { return proto.CompactTextString(m) }
func (*GraphEvent) ProtoMessage()               {}
func (*GraphEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

type isGraphEvent_Val interface {
	isGraphEvent_Val()
}

type GraphEvent_GraphCreated struct {
	GraphCreated *GraphCreatedEvent `protobuf:"bytes,10,opt,name=graph_created,json=graphCreated,oneof"`
}
type GraphEvent_GraphTerminating struct {
	GraphTerminating *GraphTerminatingEvent `protobuf:"bytes,11,opt,name=graph_terminating,json=graphTerminating,oneof"`
}
type GraphEvent_GraphCompleted struct {
	GraphCompleted *GraphCompletedEvent `protobuf:"bytes,12,opt,name=graph_completed,json=graphCompleted,oneof"`
}
type GraphEvent_DelayScheduled struct {
	DelayScheduled *DelayScheduledEvent `protobuf:"bytes,13,opt,name=delay_scheduled,json=delayScheduled,oneof"`
}
type GraphEvent_StageAdded struct {
	StageAdded *StageAddedEvent `protobuf:"bytes,14,opt,name=stage_added,json=stageAdded,oneof"`
}
type GraphEvent_StageCompleted struct {
	StageCompleted *StageCompletedEvent `protobuf:"bytes,15,opt,name=stage_completed,json=stageCompleted,oneof"`
}
type GraphEvent_StageComposed struct {
	StageComposed *StageComposedEvent `protobuf:"bytes,16,opt,name=stage_composed,json=stageComposed,oneof"`
}
type GraphEvent_FaasInvocationStarted struct {
	FaasInvocationStarted *FaasInvocationStartedEvent `protobuf:"bytes,17,opt,name=faas_invocation_started,json=faasInvocationStarted,oneof"`
}
type GraphEvent_FaasInvocationCompleted struct {
	FaasInvocationCompleted *FaasInvocationCompletedEvent `protobuf:"bytes,18,opt,name=faas_invocation_completed,json=faasInvocationCompleted,oneof"`
}
type GraphEvent_GraphCommitted struct {
	GraphCommitted *GraphCommittedEvent `protobuf:"bytes,19,opt,name=graph_committed,json=graphCommitted,oneof"`
}

func (*GraphEvent_GraphCreated) isGraphEvent_Val()            {}
func (*GraphEvent_GraphTerminating) isGraphEvent_Val()        {}
func (*GraphEvent_GraphCompleted) isGraphEvent_Val()          {}
func (*GraphEvent_DelayScheduled) isGraphEvent_Val()          {}
func (*GraphEvent_StageAdded) isGraphEvent_Val()              {}
func (*GraphEvent_StageCompleted) isGraphEvent_Val()          {}
func (*GraphEvent_StageComposed) isGraphEvent_Val()           {}
func (*GraphEvent_FaasInvocationStarted) isGraphEvent_Val()   {}
func (*GraphEvent_FaasInvocationCompleted) isGraphEvent_Val() {}
func (*GraphEvent_GraphCommitted) isGraphEvent_Val()          {}

func (m *GraphEvent) GetVal() isGraphEvent_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *GraphEvent) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *GraphEvent) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *GraphEvent) GetGraphCreated() *GraphCreatedEvent {
	if x, ok := m.GetVal().(*GraphEvent_GraphCreated); ok {
		return x.GraphCreated
	}
	return nil
}

func (m *GraphEvent) GetGraphTerminating() *GraphTerminatingEvent {
	if x, ok := m.GetVal().(*GraphEvent_GraphTerminating); ok {
		return x.GraphTerminating
	}
	return nil
}

func (m *GraphEvent) GetGraphCompleted() *GraphCompletedEvent {
	if x, ok := m.GetVal().(*GraphEvent_GraphCompleted); ok {
		return x.GraphCompleted
	}
	return nil
}

func (m *GraphEvent) GetDelayScheduled() *DelayScheduledEvent {
	if x, ok := m.GetVal().(*GraphEvent_DelayScheduled); ok {
		return x.DelayScheduled
	}
	return nil
}

func (m *GraphEvent) GetStageAdded() *StageAddedEvent {
	if x, ok := m.GetVal().(*GraphEvent_StageAdded); ok {
		return x.StageAdded
	}
	return nil
}

func (m *GraphEvent) GetStageCompleted() *StageCompletedEvent {
	if x, ok := m.GetVal().(*GraphEvent_StageCompleted); ok {
		return x.StageCompleted
	}
	return nil
}

func (m *GraphEvent) GetStageComposed() *StageComposedEvent {
	if x, ok := m.GetVal().(*GraphEvent_StageComposed); ok {
		return x.StageComposed
	}
	return nil
}

func (m *GraphEvent) GetFaasInvocationStarted() *FaasInvocationStartedEvent {
	if x, ok := m.GetVal().(*GraphEvent_FaasInvocationStarted); ok {
		return x.FaasInvocationStarted
	}
	return nil
}

func (m *GraphEvent) GetFaasInvocationCompleted() *FaasInvocationCompletedEvent {
	if x, ok := m.GetVal().(*GraphEvent_FaasInvocationCompleted); ok {
		return x.FaasInvocationCompleted
	}
	return nil
}

func (m *GraphEvent) GetGraphCommitted() *GraphCommittedEvent {
	if x, ok := m.GetVal().(*GraphEvent_GraphCommitted); ok {
		return x.GraphCommitted
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GraphEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GraphEvent_OneofMarshaler, _GraphEvent_OneofUnmarshaler, _GraphEvent_OneofSizer, []interface{}{
		(*GraphEvent_GraphCreated)(nil),
		(*GraphEvent_GraphTerminating)(nil),
		(*GraphEvent_GraphCompleted)(nil),
		(*GraphEvent_DelayScheduled)(nil),
		(*GraphEvent_StageAdded)(nil),
		(*GraphEvent_StageCompleted)(nil),
		(*GraphEvent_StageComposed)(nil),
		(*GraphEvent_FaasInvocationStarted)(nil),
		(*GraphEvent_FaasInvocationCompleted)(nil),
		(*GraphEvent_GraphCommitted)(nil),
	}
}

func _GraphEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GraphEvent)
	// val
	switch x := m.Val.(type) {
	case *GraphEvent_GraphCreated:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GraphCreated); err != nil {
			return err
		}
	case *GraphEvent_GraphTerminating:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GraphTerminating); err != nil {
			return err
		}
	case *GraphEvent_GraphCompleted:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GraphCompleted); err != nil {
			return err
		}
	case *GraphEvent_DelayScheduled:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelayScheduled); err != nil {
			return err
		}
	case *GraphEvent_StageAdded:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StageAdded); err != nil {
			return err
		}
	case *GraphEvent_StageCompleted:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StageCompleted); err != nil {
			return err
		}
	case *GraphEvent_StageComposed:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StageComposed); err != nil {
			return err
		}
	case *GraphEvent_FaasInvocationStarted:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FaasInvocationStarted); err != nil {
			return err
		}
	case *GraphEvent_FaasInvocationCompleted:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FaasInvocationCompleted); err != nil {
			return err
		}
	case *GraphEvent_GraphCommitted:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GraphCommitted); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GraphEvent.Val has unexpected type %T", x)
	}
	return nil
}

func _GraphEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GraphEvent)
	switch tag {
	case 10: // val.graph_created
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GraphCreatedEvent)
		err := b.DecodeMessage(msg)
		m.Val = &GraphEvent_GraphCreated{msg}
		return true, err
	case 11: // val.graph_terminating
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GraphTerminatingEvent)
		err := b.DecodeMessage(msg)
		m.Val = &GraphEvent_GraphTerminating{msg}
		return true, err
	case 12: // val.graph_completed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GraphCompletedEvent)
		err := b.DecodeMessage(msg)
		m.Val = &GraphEvent_GraphCompleted{msg}
		return true, err
	case 13: // val.delay_scheduled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DelayScheduledEvent)
		err := b.DecodeMessage(msg)
		m.Val = &GraphEvent_DelayScheduled{msg}
		return true, err
	case 14: // val.stage_added
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StageAddedEvent)
		err := b.DecodeMessage(msg)
		m.Val = &GraphEvent_StageAdded{msg}
		return true, err
	case 15: // val.stage_completed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StageCompletedEvent)
		err := b.DecodeMessage(msg)
		m.Val = &GraphEvent_StageCompleted{msg}
		return true, err
	case 16: // val.stage_composed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StageComposedEvent)
		err := b.DecodeMessage(msg)
		m.Val = &GraphEvent_StageComposed{msg}
		return true, err
	case 17: // val.faas_invocation_started
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FaasInvocationStartedEvent)
		err := b.DecodeMessage(msg)
		m.Val = &GraphEvent_FaasInvocationStarted{msg}
		return true, err
	case 18: // val.faas_invocation_completed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FaasInvocationCompletedEvent)
		err := b.DecodeMessage(msg)
		m.Val = &GraphEvent_FaasInvocationCompleted{msg}
		return true, err
	case 19: // val.graph_committed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GraphCommittedEvent)
		err := b.DecodeMessage(msg)
		m.Val = &GraphEvent_GraphCommitted{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GraphEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GraphEvent)
	// val
	switch x := m.Val.(type) {
	case *GraphEvent_GraphCreated:
		s := proto.Size(x.GraphCreated)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphEvent_GraphTerminating:
		s := proto.Size(x.GraphTerminating)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphEvent_GraphCompleted:
		s := proto.Size(x.GraphCompleted)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphEvent_DelayScheduled:
		s := proto.Size(x.DelayScheduled)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphEvent_StageAdded:
		s := proto.Size(x.StageAdded)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphEvent_StageCompleted:
		s := proto.Size(x.StageCompleted)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphEvent_StageComposed:
		s := proto.Size(x.StageComposed)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphEvent_FaasInvocationStarted:
		s := proto.Size(x.FaasInvocationStarted)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphEvent_FaasInvocationCompleted:
		s := proto.Size(x.FaasInvocationCompleted)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphEvent_GraphCommitted:
		s := proto.Size(x.GraphCommitted)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Graph created
type GraphCreatedEvent struct {
	FlowId     string                     `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	FunctionId string                     `protobuf:"bytes,2,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	Ts         *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=ts" json:"ts,omitempty"`
}

func (m *GraphCreatedEvent) Reset()                    { *m = GraphCreatedEvent{} }
func (m *GraphCreatedEvent) String() string            { return proto.CompactTextString(m) }
func (*GraphCreatedEvent) ProtoMessage()               {}
func (*GraphCreatedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *GraphCreatedEvent) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *GraphCreatedEvent) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *GraphCreatedEvent) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

// A delay has started - this marks the relative start of an event when a delay node is recovered
type DelayScheduledEvent struct {
	StageId string                     `protobuf:"bytes,1,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	TimeMs  int64                      `protobuf:"varint,2,opt,name=time_ms,json=timeMs" json:"time_ms,omitempty"`
	Ts      *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=ts" json:"ts,omitempty"`
	FlowId  string                     `protobuf:"bytes,4,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *DelayScheduledEvent) Reset()                    { *m = DelayScheduledEvent{} }
func (m *DelayScheduledEvent) String() string            { return proto.CompactTextString(m) }
func (*DelayScheduledEvent) ProtoMessage()               {}
func (*DelayScheduledEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *DelayScheduledEvent) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *DelayScheduledEvent) GetTimeMs() int64 {
	if m != nil {
		return m.TimeMs
	}
	return 0
}

func (m *DelayScheduledEvent) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *DelayScheduledEvent) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

// Graph termination has started - no more changes can be made to this graph
// this will be fillowed by a completion event when any termination hooks have run
type GraphTerminatingEvent struct {
	FlowId     string                     `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	FunctionId string                     `protobuf:"bytes,2,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	Status     StatusDatumType            `protobuf:"varint,3,opt,name=status,enum=model.StatusDatumType" json:"status,omitempty"`
	Ts         *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=ts" json:"ts,omitempty"`
}

func (m *GraphTerminatingEvent) Reset()                    { *m = GraphTerminatingEvent{} }
func (m *GraphTerminatingEvent) String() string            { return proto.CompactTextString(m) }
func (*GraphTerminatingEvent) ProtoMessage()               {}
func (*GraphTerminatingEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *GraphTerminatingEvent) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *GraphTerminatingEvent) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *GraphTerminatingEvent) GetStatus() StatusDatumType {
	if m != nil {
		return m.Status
	}
	return StatusDatumType_unknown_state
}

func (m *GraphTerminatingEvent) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

// Graph is complete  and will no longer change
type GraphCompletedEvent struct {
	FlowId     string                     `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	FunctionId string                     `protobuf:"bytes,2,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	Ts         *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=ts" json:"ts,omitempty"`
}

func (m *GraphCompletedEvent) Reset()                    { *m = GraphCompletedEvent{} }
func (m *GraphCompletedEvent) String() string            { return proto.CompactTextString(m) }
func (*GraphCompletedEvent) ProtoMessage()               {}
func (*GraphCompletedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *GraphCompletedEvent) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *GraphCompletedEvent) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *GraphCompletedEvent) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

// The graph is committed - this typically indicates that the function that created the flow has completed
// once this event has been posted the graph will finish when all active or pending nodes have completed.
type GraphCommittedEvent struct {
	FlowId string                     `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	Ts     *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=ts" json:"ts,omitempty"`
}

func (m *GraphCommittedEvent) Reset()                    { *m = GraphCommittedEvent{} }
func (m *GraphCommittedEvent) String() string            { return proto.CompactTextString(m) }
func (*GraphCommittedEvent) ProtoMessage()               {}
func (*GraphCommittedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *GraphCommittedEvent) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *GraphCommittedEvent) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

// A stage was added to the graph
type StageAddedEvent struct {
	StageId      string                     `protobuf:"bytes,1,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	Op           CompletionOperation        `protobuf:"varint,2,opt,name=op,enum=model.CompletionOperation" json:"op,omitempty"`
	Closure      *BlobDatum                 `protobuf:"bytes,3,opt,name=closure" json:"closure,omitempty"`
	Dependencies []string                   `protobuf:"bytes,4,rep,name=dependencies" json:"dependencies,omitempty"`
	Ts           *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=ts" json:"ts,omitempty"`
	CodeLocation string                     `protobuf:"bytes,6,opt,name=code_location,json=codeLocation" json:"code_location,omitempty"`
	CallerId     string                     `protobuf:"bytes,7,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	FlowId       string                     `protobuf:"bytes,8,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *StageAddedEvent) Reset()                    { *m = StageAddedEvent{} }
func (m *StageAddedEvent) String() string            { return proto.CompactTextString(m) }
func (*StageAddedEvent) ProtoMessage()               {}
func (*StageAddedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *StageAddedEvent) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *StageAddedEvent) GetOp() CompletionOperation {
	if m != nil {
		return m.Op
	}
	return CompletionOperation_unknown_operation
}

func (m *StageAddedEvent) GetClosure() *BlobDatum {
	if m != nil {
		return m.Closure
	}
	return nil
}

func (m *StageAddedEvent) GetDependencies() []string {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *StageAddedEvent) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *StageAddedEvent) GetCodeLocation() string {
	if m != nil {
		return m.CodeLocation
	}
	return ""
}

func (m *StageAddedEvent) GetCallerId() string {
	if m != nil {
		return m.CallerId
	}
	return ""
}

func (m *StageAddedEvent) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

// A stage completed  - downstream stages may be triggered
type StageCompletedEvent struct {
	StageId string                     `protobuf:"bytes,1,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	Result  *CompletionResult          `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	Ts      *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=ts" json:"ts,omitempty"`
	FlowId  string                     `protobuf:"bytes,4,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *StageCompletedEvent) Reset()                    { *m = StageCompletedEvent{} }
func (m *StageCompletedEvent) String() string            { return proto.CompactTextString(m) }
func (*StageCompletedEvent) ProtoMessage()               {}
func (*StageCompletedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *StageCompletedEvent) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *StageCompletedEvent) GetResult() *CompletionResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *StageCompletedEvent) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *StageCompletedEvent) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

// A stage was composed into  stage_id  - stage_id will compelete with the saem result as composed_stage_id
type StageComposedEvent struct {
	StageId         string                     `protobuf:"bytes,1,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	ComposedStageId string                     `protobuf:"bytes,2,opt,name=composed_stage_id,json=composedStageId" json:"composed_stage_id,omitempty"`
	Ts              *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=ts" json:"ts,omitempty"`
	FlowId          string                     `protobuf:"bytes,4,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *StageComposedEvent) Reset()                    { *m = StageComposedEvent{} }
func (m *StageComposedEvent) String() string            { return proto.CompactTextString(m) }
func (*StageComposedEvent) ProtoMessage()               {}
func (*StageComposedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *StageComposedEvent) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *StageComposedEvent) GetComposedStageId() string {
	if m != nil {
		return m.ComposedStageId
	}
	return ""
}

func (m *StageComposedEvent) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *StageComposedEvent) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

// A call to the FaaS has started
type FaasInvocationStartedEvent struct {
	StageId    string                     `protobuf:"bytes,1,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	Ts         *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=ts" json:"ts,omitempty"`
	FunctionId string                     `protobuf:"bytes,3,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	FlowId     string                     `protobuf:"bytes,4,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *FaasInvocationStartedEvent) Reset()                    { *m = FaasInvocationStartedEvent{} }
func (m *FaasInvocationStartedEvent) String() string            { return proto.CompactTextString(m) }
func (*FaasInvocationStartedEvent) ProtoMessage()               {}
func (*FaasInvocationStartedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *FaasInvocationStartedEvent) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *FaasInvocationStartedEvent) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *FaasInvocationStartedEvent) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *FaasInvocationStartedEvent) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

// A call to the FaaS completed
type FaasInvocationCompletedEvent struct {
	StageId string                     `protobuf:"bytes,1,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	Result  *CompletionResult          `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	Ts      *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=ts" json:"ts,omitempty"`
	CallId  string                     `protobuf:"bytes,4,opt,name=call_id,json=callId" json:"call_id,omitempty"`
	FlowId  string                     `protobuf:"bytes,5,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
}

func (m *FaasInvocationCompletedEvent) Reset()                    { *m = FaasInvocationCompletedEvent{} }
func (m *FaasInvocationCompletedEvent) String() string            { return proto.CompactTextString(m) }
func (*FaasInvocationCompletedEvent) ProtoMessage()               {}
func (*FaasInvocationCompletedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *FaasInvocationCompletedEvent) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *FaasInvocationCompletedEvent) GetResult() *CompletionResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *FaasInvocationCompletedEvent) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *FaasInvocationCompletedEvent) GetCallId() string {
	if m != nil {
		return m.CallId
	}
	return ""
}

func (m *FaasInvocationCompletedEvent) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

// Request Wrapper,
type RuntimeInvokeStageRequest struct {
	FlowId  string              `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	StageId string              `protobuf:"bytes,2,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	Args    []*CompletionResult `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	Closure *BlobDatum          `protobuf:"bytes,4,opt,name=closure" json:"closure,omitempty"`
}

func (m *RuntimeInvokeStageRequest) Reset()                    { *m = RuntimeInvokeStageRequest{} }
func (m *RuntimeInvokeStageRequest) String() string            { return proto.CompactTextString(m) }
func (*RuntimeInvokeStageRequest) ProtoMessage()               {}
func (*RuntimeInvokeStageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *RuntimeInvokeStageRequest) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *RuntimeInvokeStageRequest) GetStageId() string {
	if m != nil {
		return m.StageId
	}
	return ""
}

func (m *RuntimeInvokeStageRequest) GetArgs() []*CompletionResult {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *RuntimeInvokeStageRequest) GetClosure() *BlobDatum {
	if m != nil {
		return m.Closure
	}
	return nil
}

// Result wrapper - intentionally deep to allow extra fields at top level
type RuntimeInvokeStageResponse struct {
	Result *CompletionResult `protobuf:"bytes,5,opt,name=result" json:"result,omitempty"`
}

func (m *RuntimeInvokeStageResponse) Reset()                    { *m = RuntimeInvokeStageResponse{} }
func (m *RuntimeInvokeStageResponse) String() string            { return proto.CompactTextString(m) }
func (*RuntimeInvokeStageResponse) ProtoMessage()               {}
func (*RuntimeInvokeStageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *RuntimeInvokeStageResponse) GetResult() *CompletionResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*CompletionResult)(nil), "model.CompletionResult")
	proto.RegisterType((*BlobDatum)(nil), "model.BlobDatum")
	proto.RegisterType((*HTTPHeader)(nil), "model.HTTPHeader")
	proto.RegisterType((*HTTPReqDatum)(nil), "model.HTTPReqDatum")
	proto.RegisterType((*HTTPRespDatum)(nil), "model.HTTPRespDatum")
	proto.RegisterType((*EmptyDatum)(nil), "model.EmptyDatum")
	proto.RegisterType((*StageRefDatum)(nil), "model.StageRefDatum")
	proto.RegisterType((*ErrorDatum)(nil), "model.ErrorDatum")
	proto.RegisterType((*StatusDatum)(nil), "model.StatusDatum")
	proto.RegisterType((*Datum)(nil), "model.Datum")
	proto.RegisterType((*AddStageRequest)(nil), "model.AddStageRequest")
	proto.RegisterType((*CompleteStageExternallyRequest)(nil), "model.CompleteStageExternallyRequest")
	proto.RegisterType((*AddCompletedValueStageRequest)(nil), "model.AddCompletedValueStageRequest")
	proto.RegisterType((*AddDelayStageRequest)(nil), "model.AddDelayStageRequest")
	proto.RegisterType((*AddInvokeFunctionStageRequest)(nil), "model.AddInvokeFunctionStageRequest")
	proto.RegisterType((*AddStageResponse)(nil), "model.AddStageResponse")
	proto.RegisterType((*CommitGraphRequest)(nil), "model.CommitGraphRequest")
	proto.RegisterType((*GraphRequestProcessedResponse)(nil), "model.GraphRequestProcessedResponse")
	proto.RegisterType((*CompleteDelayStageRequest)(nil), "model.CompleteDelayStageRequest")
	proto.RegisterType((*CompleteStageExternallyResponse)(nil), "model.CompleteStageExternallyResponse")
	proto.RegisterType((*DeactivateGraphRequest)(nil), "model.DeactivateGraphRequest")
	proto.RegisterType((*CreateGraphRequest)(nil), "model.CreateGraphRequest")
	proto.RegisterType((*CreateGraphResponse)(nil), "model.CreateGraphResponse")
	proto.RegisterType((*FaasInvocationResponse)(nil), "model.FaasInvocationResponse")
	proto.RegisterType((*GetGraphStateRequest)(nil), "model.GetGraphStateRequest")
	proto.RegisterType((*GetGraphStateResponse)(nil), "model.GetGraphStateResponse")
	proto.RegisterType((*GetGraphStateResponse_StageRepresentation)(nil), "model.GetGraphStateResponse.StageRepresentation")
	proto.RegisterType((*ListGraphsRequest)(nil), "model.ListGraphsRequest")
	proto.RegisterType((*StreamLifecycleRequest)(nil), "model.StreamLifecycleRequest")
	proto.RegisterType((*StreamGraphRequest)(nil), "model.StreamGraphRequest")
	proto.RegisterType((*ListGraphResponse)(nil), "model.ListGraphResponse")
	proto.RegisterType((*ListGraphsResponse)(nil), "model.ListGraphsResponse")
	proto.RegisterType((*AwaitStageResultRequest)(nil), "model.AwaitStageResultRequest")
	proto.RegisterType((*AwaitStageResultResponse)(nil), "model.AwaitStageResultResponse")
	proto.RegisterType((*InvokeFunctionRequest)(nil), "model.InvokeFunctionRequest")
	proto.RegisterType((*InvokeStageRequest)(nil), "model.InvokeStageRequest")
	proto.RegisterType((*GraphLifecycleEvent)(nil), "model.GraphLifecycleEvent")
	proto.RegisterType((*GraphEvent)(nil), "model.GraphEvent")
	proto.RegisterType((*GraphCreatedEvent)(nil), "model.GraphCreatedEvent")
	proto.RegisterType((*DelayScheduledEvent)(nil), "model.DelayScheduledEvent")
	proto.RegisterType((*GraphTerminatingEvent)(nil), "model.GraphTerminatingEvent")
	proto.RegisterType((*GraphCompletedEvent)(nil), "model.GraphCompletedEvent")
	proto.RegisterType((*GraphCommittedEvent)(nil), "model.GraphCommittedEvent")
	proto.RegisterType((*StageAddedEvent)(nil), "model.StageAddedEvent")
	proto.RegisterType((*StageCompletedEvent)(nil), "model.StageCompletedEvent")
	proto.RegisterType((*StageComposedEvent)(nil), "model.StageComposedEvent")
	proto.RegisterType((*FaasInvocationStartedEvent)(nil), "model.FaasInvocationStartedEvent")
	proto.RegisterType((*FaasInvocationCompletedEvent)(nil), "model.FaasInvocationCompletedEvent")
	proto.RegisterType((*RuntimeInvokeStageRequest)(nil), "model.RuntimeInvokeStageRequest")
	proto.RegisterType((*RuntimeInvokeStageResponse)(nil), "model.RuntimeInvokeStageResponse")
	proto.RegisterEnum("model.HTTPMethod", HTTPMethod_name, HTTPMethod_value)
	proto.RegisterEnum("model.ErrorDatumType", ErrorDatumType_name, ErrorDatumType_value)
	proto.RegisterEnum("model.StatusDatumType", StatusDatumType_name, StatusDatumType_value)
	proto.RegisterEnum("model.CompletionOperation", CompletionOperation_name, CompletionOperation_value)
	proto.RegisterEnum("model.ListGraphsFilter", ListGraphsFilter_name, ListGraphsFilter_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FlowService service

type FlowServiceClient interface {
	CreateGraph(ctx context.Context, in *CreateGraphRequest, opts ...grpc.CallOption) (*CreateGraphResponse, error)
	AddStage(ctx context.Context, in *AddStageRequest, opts ...grpc.CallOption) (*AddStageResponse, error)
	AddValueStage(ctx context.Context, in *AddCompletedValueStageRequest, opts ...grpc.CallOption) (*AddStageResponse, error)
	AddInvokeFunction(ctx context.Context, in *AddInvokeFunctionStageRequest, opts ...grpc.CallOption) (*AddStageResponse, error)
	AddDelay(ctx context.Context, in *AddDelayStageRequest, opts ...grpc.CallOption) (*AddStageResponse, error)
	AwaitStageResult(ctx context.Context, in *AwaitStageResultRequest, opts ...grpc.CallOption) (*AwaitStageResultResponse, error)
	CompleteStageExternally(ctx context.Context, in *CompleteStageExternallyRequest, opts ...grpc.CallOption) (*CompleteStageExternallyResponse, error)
	Commit(ctx context.Context, in *CommitGraphRequest, opts ...grpc.CallOption) (*GraphRequestProcessedResponse, error)
	GetGraphState(ctx context.Context, in *GetGraphStateRequest, opts ...grpc.CallOption) (*GetGraphStateResponse, error)
	StreamLifecycle(ctx context.Context, in *StreamLifecycleRequest, opts ...grpc.CallOption) (FlowService_StreamLifecycleClient, error)
	StreamEvents(ctx context.Context, in *StreamGraphRequest, opts ...grpc.CallOption) (FlowService_StreamEventsClient, error)
}

type flowServiceClient struct {
	cc *grpc.ClientConn
}

func NewFlowServiceClient(cc *grpc.ClientConn) FlowServiceClient {
	return &flowServiceClient{cc}
}

func (c *flowServiceClient) CreateGraph(ctx context.Context, in *CreateGraphRequest, opts ...grpc.CallOption) (*CreateGraphResponse, error) {
	out := new(CreateGraphResponse)
	err := grpc.Invoke(ctx, "/model.FlowService/CreateGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) AddStage(ctx context.Context, in *AddStageRequest, opts ...grpc.CallOption) (*AddStageResponse, error) {
	out := new(AddStageResponse)
	err := grpc.Invoke(ctx, "/model.FlowService/AddStage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) AddValueStage(ctx context.Context, in *AddCompletedValueStageRequest, opts ...grpc.CallOption) (*AddStageResponse, error) {
	out := new(AddStageResponse)
	err := grpc.Invoke(ctx, "/model.FlowService/AddValueStage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) AddInvokeFunction(ctx context.Context, in *AddInvokeFunctionStageRequest, opts ...grpc.CallOption) (*AddStageResponse, error) {
	out := new(AddStageResponse)
	err := grpc.Invoke(ctx, "/model.FlowService/AddInvokeFunction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) AddDelay(ctx context.Context, in *AddDelayStageRequest, opts ...grpc.CallOption) (*AddStageResponse, error) {
	out := new(AddStageResponse)
	err := grpc.Invoke(ctx, "/model.FlowService/AddDelay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) AwaitStageResult(ctx context.Context, in *AwaitStageResultRequest, opts ...grpc.CallOption) (*AwaitStageResultResponse, error) {
	out := new(AwaitStageResultResponse)
	err := grpc.Invoke(ctx, "/model.FlowService/AwaitStageResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) CompleteStageExternally(ctx context.Context, in *CompleteStageExternallyRequest, opts ...grpc.CallOption) (*CompleteStageExternallyResponse, error) {
	out := new(CompleteStageExternallyResponse)
	err := grpc.Invoke(ctx, "/model.FlowService/CompleteStageExternally", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) Commit(ctx context.Context, in *CommitGraphRequest, opts ...grpc.CallOption) (*GraphRequestProcessedResponse, error) {
	out := new(GraphRequestProcessedResponse)
	err := grpc.Invoke(ctx, "/model.FlowService/Commit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetGraphState(ctx context.Context, in *GetGraphStateRequest, opts ...grpc.CallOption) (*GetGraphStateResponse, error) {
	out := new(GetGraphStateResponse)
	err := grpc.Invoke(ctx, "/model.FlowService/GetGraphState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) StreamLifecycle(ctx context.Context, in *StreamLifecycleRequest, opts ...grpc.CallOption) (FlowService_StreamLifecycleClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FlowService_serviceDesc.Streams[0], c.cc, "/model.FlowService/StreamLifecycle", opts...)
	if err != nil {
		return nil, err
	}
	x := &flowServiceStreamLifecycleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlowService_StreamLifecycleClient interface {
	Recv() (*GraphLifecycleEvent, error)
	grpc.ClientStream
}

type flowServiceStreamLifecycleClient struct {
	grpc.ClientStream
}

func (x *flowServiceStreamLifecycleClient) Recv() (*GraphLifecycleEvent, error) {
	m := new(GraphLifecycleEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flowServiceClient) StreamEvents(ctx context.Context, in *StreamGraphRequest, opts ...grpc.CallOption) (FlowService_StreamEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FlowService_serviceDesc.Streams[1], c.cc, "/model.FlowService/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &flowServiceStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlowService_StreamEventsClient interface {
	Recv() (*GraphEvent, error)
	grpc.ClientStream
}

type flowServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *flowServiceStreamEventsClient) Recv() (*GraphEvent, error) {
	m := new(GraphEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FlowService service

type FlowServiceServer interface {
	CreateGraph(context.Context, *CreateGraphRequest) (*CreateGraphResponse, error)
	AddStage(context.Context, *AddStageRequest) (*AddStageResponse, error)
	AddValueStage(context.Context, *AddCompletedValueStageRequest) (*AddStageResponse, error)
	AddInvokeFunction(context.Context, *AddInvokeFunctionStageRequest) (*AddStageResponse, error)
	AddDelay(context.Context, *AddDelayStageRequest) (*AddStageResponse, error)
	AwaitStageResult(context.Context, *AwaitStageResultRequest) (*AwaitStageResultResponse, error)
	CompleteStageExternally(context.Context, *CompleteStageExternallyRequest) (*CompleteStageExternallyResponse, error)
	Commit(context.Context, *CommitGraphRequest) (*GraphRequestProcessedResponse, error)
	GetGraphState(context.Context, *GetGraphStateRequest) (*GetGraphStateResponse, error)
	StreamLifecycle(*StreamLifecycleRequest, FlowService_StreamLifecycleServer) error
	StreamEvents(*StreamGraphRequest, FlowService_StreamEventsServer) error
}

func RegisterFlowServiceServer(s *grpc.Server, srv FlowServiceServer) {
	s.RegisterService(&_FlowService_serviceDesc, srv)
}

func _FlowService_CreateGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).CreateGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FlowService/CreateGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).CreateGraph(ctx, req.(*CreateGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_AddStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).AddStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FlowService/AddStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).AddStage(ctx, req.(*AddStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_AddValueStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompletedValueStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).AddValueStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FlowService/AddValueStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).AddValueStage(ctx, req.(*AddCompletedValueStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_AddInvokeFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInvokeFunctionStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).AddInvokeFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FlowService/AddInvokeFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).AddInvokeFunction(ctx, req.(*AddInvokeFunctionStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_AddDelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDelayStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).AddDelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FlowService/AddDelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).AddDelay(ctx, req.(*AddDelayStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_AwaitStageResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwaitStageResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).AwaitStageResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FlowService/AwaitStageResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).AwaitStageResult(ctx, req.(*AwaitStageResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_CompleteStageExternally_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteStageExternallyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).CompleteStageExternally(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FlowService/CompleteStageExternally",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).CompleteStageExternally(ctx, req.(*CompleteStageExternallyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FlowService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).Commit(ctx, req.(*CommitGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetGraphState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGraphStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetGraphState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FlowService/GetGraphState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetGraphState(ctx, req.(*GetGraphStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_StreamLifecycle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLifecycleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlowServiceServer).StreamLifecycle(m, &flowServiceStreamLifecycleServer{stream})
}

type FlowService_StreamLifecycleServer interface {
	Send(*GraphLifecycleEvent) error
	grpc.ServerStream
}

type flowServiceStreamLifecycleServer struct {
	grpc.ServerStream
}

func (x *flowServiceStreamLifecycleServer) Send(m *GraphLifecycleEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _FlowService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamGraphRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlowServiceServer).StreamEvents(m, &flowServiceStreamEventsServer{stream})
}

type FlowService_StreamEventsServer interface {
	Send(*GraphEvent) error
	grpc.ServerStream
}

type flowServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *flowServiceStreamEventsServer) Send(m *GraphEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _FlowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.FlowService",
	HandlerType: (*FlowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGraph",
			Handler:    _FlowService_CreateGraph_Handler,
		},
		{
			MethodName: "AddStage",
			Handler:    _FlowService_AddStage_Handler,
		},
		{
			MethodName: "AddValueStage",
			Handler:    _FlowService_AddValueStage_Handler,
		},
		{
			MethodName: "AddInvokeFunction",
			Handler:    _FlowService_AddInvokeFunction_Handler,
		},
		{
			MethodName: "AddDelay",
			Handler:    _FlowService_AddDelay_Handler,
		},
		{
			MethodName: "AwaitStageResult",
			Handler:    _FlowService_AwaitStageResult_Handler,
		},
		{
			MethodName: "CompleteStageExternally",
			Handler:    _FlowService_CompleteStageExternally_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _FlowService_Commit_Handler,
		},
		{
			MethodName: "GetGraphState",
			Handler:    _FlowService_GetGraphState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLifecycle",
			Handler:       _FlowService_StreamLifecycle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEvents",
			Handler:       _FlowService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "model.proto",
}

func init() { proto.RegisterFile("model.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2897 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x39, 0xcd, 0x6f, 0x1b, 0xc7,
	0xf5, 0x5a, 0x7e, 0x8a, 0x8f, 0xfa, 0x58, 0x8d, 0x2c, 0x89, 0x62, 0x1c, 0x8b, 0xd9, 0x38, 0xf9,
	0xc9, 0x4c, 0x24, 0xda, 0x32, 0xfc, 0x4b, 0x1c, 0x04, 0x4d, 0x24, 0x5b, 0x8a, 0x84, 0xda, 0x48,
	0xb0, 0x32, 0xfa, 0xe1, 0xa4, 0x21, 0x56, 0xdc, 0x21, 0xb9, 0xd5, 0x72, 0x77, 0xbd, 0x33, 0x94,
	0xc2, 0xba, 0x46, 0x8b, 0xa2, 0x87, 0x02, 0x45, 0x8b, 0x02, 0x2d, 0x7a, 0x6b, 0x50, 0xa0, 0x68,
	0x7a, 0x2a, 0x7a, 0x2c, 0x7a, 0xeb, 0xb1, 0xa7, 0xf6, 0x50, 0xa0, 0xb7, 0xc2, 0x80, 0x51, 0xa0,
	0xff, 0x41, 0xae, 0x2d, 0xe6, 0x63, 0xbf, 0xf8, 0x61, 0x52, 0xb6, 0x92, 0xf2, 0xc4, 0x7d, 0xf3,
	0xe6, 0x7d, 0xcd, 0x7b, 0x6f, 0xde, 0x7b, 0x03, 0xc5, 0x8e, 0x6b, 0x62, 0x7b, 0xd3, 0xf3, 0x5d,
	0xea, 0xa2, 0x2c, 0xff, 0x28, 0xaf, 0xb5, 0x5c, 0xb7, 0x65, 0xe3, 0x1a, 0x07, 0x1e, 0x75, 0x9b,
	0x35, 0x6a, 0x75, 0x30, 0xa1, 0x46, 0xc7, 0x13, 0x78, 0xe5, 0xff, 0x6f, 0x59, 0xb4, 0xdd, 0x3d,
	0xda, 0x6c, 0xb8, 0x9d, 0x5a, 0xe7, 0xd4, 0xa2, 0xc7, 0xee, 0x69, 0xad, 0xe5, 0x6e, 0xf0, 0xc5,
	0x8d, 0x13, 0xc3, 0xb6, 0x4c, 0x83, 0xba, 0x3e, 0xa9, 0x85, 0x7f, 0xe5, 0xbe, 0x8b, 0x92, 0xb0,
	0xe1, 0x59, 0x35, 0xc3, 0x71, 0x5c, 0x6a, 0x50, 0xcb, 0x75, 0x88, 0x58, 0xd5, 0x3e, 0x06, 0xf5,
	0x96, 0xdb, 0xf1, 0x6c, 0xcc, 0x80, 0x3a, 0x26, 0x5d, 0x9b, 0xa2, 0x4b, 0x00, 0xa4, 0xdb, 0x68,
	0x60, 0x42, 0x9a, 0x5d, 0xbb, 0xa4, 0x54, 0x94, 0xf5, 0x69, 0x3d, 0x06, 0x41, 0x55, 0xc8, 0x9a,
	0x06, 0xed, 0x76, 0x4a, 0xa9, 0x8a, 0xb2, 0x5e, 0xdc, 0x9a, 0xd9, 0x14, 0xea, 0xdc, 0x66, 0xb0,
	0x9d, 0xdc, 0x93, 0xc7, 0x6b, 0xa9, 0x8a, 0xa2, 0x0b, 0x14, 0xed, 0x14, 0x0a, 0x3b, 0xb6, 0x7b,
	0xc4, 0xd7, 0xd0, 0x1a, 0xe4, 0x8f, 0x6c, 0xf7, 0xa8, 0x6e, 0x99, 0x9c, 0x6a, 0x41, 0x20, 0x7f,
	0x43, 0xd1, 0x73, 0x0c, 0x7c, 0x60, 0xa2, 0x2b, 0x30, 0xd3, 0x70, 0x1d, 0x8a, 0x1d, 0x5a, 0xa7,
	0x3d, 0x0f, 0x73, 0x06, 0x11, 0x56, 0x51, 0xae, 0xdd, 0xeb, 0x79, 0x18, 0x5d, 0x82, 0x9c, 0x8d,
	0x9d, 0x16, 0x6d, 0x97, 0xd2, 0x15, 0x65, 0x3d, 0x2d, 0x90, 0xd4, 0x29, 0x5d, 0x42, 0xb5, 0xdb,
	0x00, 0xfb, 0xf7, 0xee, 0x7d, 0xb0, 0x8f, 0x0d, 0x13, 0xfb, 0xa8, 0x04, 0xe9, 0x63, 0xdc, 0xeb,
	0xe3, 0xca, 0x40, 0xe8, 0x22, 0x64, 0x4f, 0x0c, 0xbb, 0xdb, 0xcf, 0x4b, 0x00, 0xb5, 0x5f, 0x28,
	0x30, 0xc3, 0xc8, 0xe8, 0xf8, 0x81, 0x50, 0xe1, 0x32, 0x64, 0x8e, 0x5c, 0x53, 0x50, 0x2a, 0x6e,
	0xa9, 0x52, 0xf5, 0x50, 0x45, 0x9d, 0xaf, 0xa2, 0xd7, 0x20, 0xdf, 0xe6, 0x8c, 0x49, 0x29, 0x5d,
	0x49, 0xaf, 0x17, 0xb7, 0x16, 0x24, 0x62, 0x24, 0x92, 0x1e, 0x60, 0xa0, 0x6b, 0x90, 0xeb, 0x60,
	0xda, 0x76, 0xcd, 0x52, 0xa6, 0xa2, 0xac, 0xcf, 0x25, 0x70, 0xef, 0xf2, 0x85, 0xd0, 0xa8, 0x12,
	0x51, 0xfb, 0xb1, 0x02, 0xb3, 0x42, 0x2c, 0xe2, 0x7d, 0x61, 0x72, 0xfd, 0x1f, 0x14, 0x09, 0x35,
	0x68, 0x97, 0xd4, 0x1b, 0xae, 0x89, 0xb9, 0x70, 0xd9, 0xd0, 0xcc, 0x20, 0x96, 0x6e, 0xb9, 0x26,
	0xd6, 0x66, 0x00, 0x76, 0x3b, 0x1e, 0xed, 0x71, 0x4e, 0xda, 0x16, 0xcc, 0x1e, 0x52, 0xa3, 0x85,
	0x75, 0xdc, 0x14, 0xa2, 0xbd, 0x04, 0xd3, 0x84, 0x01, 0x06, 0x8f, 0x3d, 0xcf, 0xe1, 0x07, 0xa6,
	0xf6, 0x4d, 0x80, 0x5d, 0xdf, 0x77, 0x7d, 0xb1, 0xe1, 0x1a, 0x64, 0xf8, 0xe9, 0x2b, 0xdc, 0x1c,
	0x4b, 0x52, 0xc4, 0x08, 0x81, 0x9d, 0x7f, 0x68, 0x12, 0x8e, 0x8a, 0x4a, 0x90, 0xef, 0x60, 0x42,
	0x8c, 0x96, 0x3c, 0x47, 0x3d, 0xf8, 0xd4, 0xb6, 0xa1, 0x78, 0xc8, 0x45, 0x15, 0xb4, 0xb7, 0x12,
	0xb4, 0x97, 0x25, 0xed, 0x18, 0xc6, 0x20, 0x71, 0xed, 0x1f, 0x29, 0xc8, 0x8a, 0xdd, 0x57, 0x20,
	0x8b, 0x99, 0xa6, 0xd2, 0xcc, 0x81, 0xf5, 0x22, 0xed, 0xf7, 0xa7, 0x74, 0x81, 0x81, 0x5e, 0x85,
	0x0c, 0x73, 0x6a, 0x19, 0x23, 0x03, 0x07, 0xb2, 0x3f, 0xa5, 0xf3, 0x75, 0x4e, 0x92, 0x69, 0xc6,
	0xdd, 0x38, 0x46, 0x32, 0xd4, 0x96, 0x93, 0x64, 0x5f, 0xe8, 0x3a, 0x14, 0x84, 0x21, 0x7d, 0xdc,
	0xe4, 0xc7, 0x51, 0xdc, 0xba, 0x10, 0x29, 0x10, 0x59, 0x7c, 0x7f, 0x4a, 0x17, 0x16, 0xd7, 0x71,
	0x13, 0x5d, 0x85, 0xe9, 0x36, 0xa5, 0x5e, 0xdd, 0xc7, 0x0f, 0x4a, 0x59, 0xbe, 0x67, 0x31, 0x76,
	0xe6, 0x81, 0x5f, 0xef, 0x4f, 0xe9, 0x79, 0x86, 0xa6, 0xe3, 0x07, 0x8c, 0x8d, 0xdc, 0x41, 0xbc,
	0x52, 0x2e, 0xc1, 0x26, 0xe1, 0x73, 0x8c, 0x8d, 0xd8, 0x43, 0x3c, 0xf4, 0x3a, 0xe4, 0x84, 0x47,
	0x94, 0xf2, 0x7c, 0x07, 0x1a, 0xb4, 0xec, 0xfe, 0x94, 0x2e, 0x71, 0x76, 0xb2, 0x90, 0x3e, 0x31,
	0x6c, 0xed, 0x73, 0x05, 0xe6, 0xb7, 0x4d, 0x53, 0x0a, 0xff, 0xa0, 0x8b, 0x09, 0x65, 0x39, 0xa2,
	0x69, 0xbb, 0xa7, 0x43, 0x72, 0x04, 0x03, 0x1f, 0x98, 0xe8, 0x5d, 0x28, 0xb8, 0x1e, 0xf6, 0x79,
	0x16, 0xe3, 0xd6, 0x9d, 0xdb, 0x2a, 0x4b, 0x66, 0x51, 0x26, 0x7b, 0x3f, 0xc0, 0x08, 0x8f, 0x32,
	0xda, 0x84, 0xaa, 0x90, 0x6f, 0xd8, 0x2e, 0xe9, 0xfa, 0x58, 0x1a, 0x7d, 0x30, 0x5c, 0x02, 0x04,
	0x84, 0x20, 0x63, 0x62, 0x8f, 0x94, 0x32, 0x95, 0xf4, 0x7a, 0x41, 0xe7, 0xff, 0xd1, 0xcb, 0x30,
	0xcb, 0x22, 0xa2, 0x6e, 0xbb, 0x0d, 0x21, 0x45, 0x96, 0xbb, 0xdc, 0x0c, 0x03, 0xde, 0x91, 0x30,
	0xf4, 0x02, 0x14, 0x1a, 0x86, 0x6d, 0x63, 0x9f, 0x69, 0x92, 0xe3, 0x08, 0xd3, 0x02, 0x70, 0x60,
	0x6a, 0xff, 0x54, 0xe0, 0x92, 0x14, 0x16, 0x73, 0xed, 0x77, 0x3f, 0xa1, 0xd8, 0x77, 0x0c, 0xdb,
	0xee, 0x4d, 0x6c, 0x87, 0x78, 0x58, 0xa5, 0x86, 0x86, 0x15, 0xba, 0x11, 0xe4, 0x36, 0xa1, 0xe6,
	0xca, 0x80, 0x99, 0x44, 0xc2, 0x8f, 0x72, 0x36, 0xc7, 0x1e, 0xd4, 0x2f, 0x33, 0x4e, 0xbf, 0x6c,
	0x9f, 0x7e, 0x7f, 0x52, 0xe0, 0xc5, 0x6d, 0xd3, 0x0c, 0x54, 0x34, 0xbf, 0xc6, 0xe8, 0x9e, 0xed,
	0x98, 0x6f, 0xc4, 0xf3, 0xf2, 0x73, 0xc8, 0x9e, 0x1e, 0x27, 0x7b, 0xa6, 0x4f, 0xf6, 0xdf, 0x2a,
	0x70, 0x61, 0xdb, 0x34, 0x6f, 0x63, 0xdb, 0xe8, 0x9d, 0x4d, 0xe4, 0x2a, 0x4c, 0x9b, 0x6c, 0x57,
	0xbd, 0x43, 0xb8, 0xd4, 0xe9, 0x9d, 0xf9, 0x27, 0x8f, 0xd7, 0x8a, 0xea, 0x7f, 0x82, 0x9f, 0xa2,
	0xe7, 0x39, 0xc2, 0x5d, 0x72, 0x0e, 0x72, 0xfe, 0x32, 0xc5, 0x6d, 0x7c, 0xe0, 0x9c, 0xb8, 0xc7,
	0x78, 0xaf, 0xeb, 0x34, 0xd8, 0x96, 0xb3, 0x09, 0xdc, 0x80, 0x62, 0x53, 0x6e, 0x8c, 0xbc, 0x68,
	0xe7, 0xc9, 0xe3, 0xb5, 0xaf, 0xc0, 0xdb, 0x1f, 0xaf, 0x7f, 0xb4, 0xf9, 0xdd, 0x0f, 0x8d, 0x8d,
	0xef, 0x6c, 0x6f, 0xdc, 0xbf, 0xba, 0x71, 0xb3, 0xfe, 0xd1, 0xc6, 0xb7, 0x1e, 0x5e, 0x7b, 0x7d,
	0xeb, 0xc6, 0x8d, 0x47, 0x57, 0xd6, 0x6b, 0x31, 0x78, 0x8d, 0x2d, 0x5c, 0x95, 0x0b, 0x1f, 0xbd,
	0xb3, 0x59, 0xbd, 0xf2, 0xce, 0x65, 0x1d, 0x02, 0xb2, 0x07, 0x26, 0xda, 0x80, 0xb4, 0xe1, 0xb7,
	0xa4, 0x0b, 0x0e, 0xcb, 0x3d, 0xe1, 0x11, 0x32, 0xbc, 0x73, 0x70, 0xbe, 0x3d, 0x50, 0xa3, 0xa4,
	0x42, 0x3c, 0xd7, 0x21, 0x18, 0xad, 0xf4, 0x99, 0x22, 0x34, 0xc1, 0x6a, 0x7f, 0x14, 0x45, 0x97,
	0xd2, 0x0d, 0x40, 0xb7, 0xdc, 0x4e, 0xc7, 0xa2, 0xef, 0xf9, 0x86, 0xd7, 0x9e, 0xd4, 0xa8, 0xda,
	0x9b, 0xf0, 0x62, 0x7c, 0xc3, 0x07, 0xbe, 0xcb, 0xea, 0x26, 0x6c, 0x8e, 0x95, 0x45, 0xfb, 0x99,
	0x02, 0xab, 0x41, 0xc8, 0x3c, 0x83, 0xfb, 0x4d, 0x90, 0x10, 0x6a, 0x90, 0xf3, 0x79, 0xd8, 0x8c,
	0xc9, 0x08, 0xba, 0x44, 0xd3, 0xba, 0xb0, 0x36, 0x32, 0x4f, 0x3d, 0xbb, 0x69, 0xfb, 0x2a, 0xcc,
	0x74, 0x7f, 0x85, 0xa9, 0xdd, 0x84, 0xe5, 0xdb, 0xd8, 0x68, 0x50, 0xeb, 0xc4, 0xa0, 0xf8, 0x6c,
	0xe6, 0xff, 0xab, 0x02, 0xe8, 0x96, 0x8f, 0xfb, 0xf7, 0x7d, 0xaa, 0x24, 0x7d, 0x5d, 0x6c, 0x7e,
	0xf4, 0xe4, 0xf1, 0x5a, 0x0f, 0x6e, 0x7e, 0xbc, 0xfe, 0x8c, 0x8e, 0x5e, 0x7d, 0x3b, 0xa0, 0x59,
	0xb1, 0xcc, 0x4a, 0xa7, 0x4b, 0x68, 0xe5, 0x08, 0x57, 0x0c, 0xa7, 0x62, 0x1c, 0x11, 0xd7, 0xee,
	0x52, 0x5c, 0x09, 0xd7, 0xdd, 0x66, 0xa5, 0xe9, 0xfa, 0x9d, 0x8a, 0x66, 0x78, 0x5e, 0xcd, 0x77,
	0xbb, 0x14, 0x6b, 0x89, 0x30, 0x89, 0x99, 0x31, 0x95, 0xf0, 0x8a, 0x4d, 0x58, 0x4c, 0xe8, 0x33,
	0xce, 0x8b, 0xfe, 0xa8, 0xc0, 0xf2, 0x9e, 0x61, 0x10, 0x96, 0x18, 0x44, 0xb8, 0x3c, 0xd7, 0x51,
	0xad, 0x25, 0xed, 0x26, 0xd2, 0x54, 0x5c, 0xf0, 0xc8, 0xa7, 0x32, 0x13, 0xf9, 0x14, 0x93, 0x82,
	0xc5, 0x6a, 0x14, 0xba, 0x39, 0xf6, 0x79, 0x60, 0x6a, 0x6f, 0xc0, 0x85, 0xf7, 0xb0, 0x88, 0x36,
	0x56, 0x36, 0x4c, 0xec, 0xf9, 0xda, 0xbf, 0x53, 0xb0, 0xd4, 0xb7, 0x53, 0x6a, 0xfc, 0x2e, 0x2f,
	0x4b, 0x5a, 0x98, 0x94, 0x14, 0x5e, 0xef, 0xae, 0x4b, 0xe1, 0x86, 0x62, 0x8b, 0x2a, 0x8a, 0xec,
	0x3a, 0xd4, 0xef, 0xe9, 0x72, 0x5f, 0xbf, 0xfe, 0xa9, 0x01, 0xfd, 0x63, 0x46, 0x4d, 0xc7, 0x8d,
	0x5a, 0xc6, 0xb0, 0x28, 0x03, 0xd8, 0xf3, 0x31, 0xc1, 0x8e, 0x68, 0xbc, 0x58, 0x45, 0x11, 0x56,
	0xa0, 0x05, 0x59, 0xbe, 0x2e, 0x87, 0xd5, 0x93, 0x3c, 0x7b, 0xf1, 0x85, 0x34, 0x98, 0x31, 0xb1,
	0x87, 0x1d, 0x13, 0x3b, 0x0d, 0x0b, 0x8b, 0xa2, 0xbd, 0xa0, 0x27, 0x60, 0xe5, 0x63, 0x5e, 0xe0,
	0x06, 0x72, 0x23, 0x35, 0xd6, 0xe9, 0x88, 0x0e, 0x67, 0x2f, 0x79, 0x93, 0x5e, 0x1d, 0x6f, 0x82,
	0xa4, 0xc4, 0xf2, 0x6a, 0x7d, 0x2b, 0xf5, 0xa6, 0xa2, 0xdd, 0x81, 0x85, 0x3b, 0x16, 0x11, 0x1b,
	0x49, 0x70, 0x3e, 0x6f, 0x40, 0xae, 0x69, 0xd9, 0x14, 0xfb, 0xb2, 0xaa, 0x0e, 0x3c, 0x20, 0xc2,
	0xdc, 0xe3, 0xcb, 0x51, 0x1b, 0x23, 0xd0, 0xb5, 0x12, 0x2c, 0x1f, 0x52, 0x1f, 0x1b, 0x9d, 0x3b,
	0x56, 0x13, 0x37, 0x7a, 0x0d, 0x3b, 0x38, 0x72, 0x6d, 0x1f, 0x90, 0x58, 0x49, 0x04, 0xf1, 0xa8,
	0x18, 0x61, 0xfe, 0xdb, 0xf4, 0xdd, 0x4e, 0x9d, 0xe0, 0x07, 0xfc, 0x10, 0x32, 0x7a, 0x9e, 0x7d,
	0x1f, 0xe2, 0x07, 0xda, 0xeb, 0x31, 0x89, 0xc7, 0x07, 0xcf, 0x1e, 0xa0, 0xb8, 0x7e, 0x12, 0xfd,
	0x2a, 0xe4, 0x5a, 0x1c, 0x22, 0xbd, 0xa8, 0xd4, 0xaf, 0x60, 0x80, 0xa9, 0x4b, 0x3c, 0xed, 0x27,
	0x0a, 0xac, 0x6c, 0x9f, 0x1a, 0x16, 0x0d, 0xae, 0x21, 0x16, 0x00, 0xe7, 0x98, 0xc8, 0x37, 0x01,
	0xa8, 0xd5, 0xc1, 0x6e, 0x97, 0xb2, 0x62, 0x23, 0xcd, 0x5b, 0xb3, 0x81, 0x62, 0xa3, 0x20, 0x51,
	0xee, 0x12, 0xed, 0x7b, 0x50, 0x1a, 0x14, 0xe7, 0x39, 0xb2, 0xc2, 0x99, 0x2f, 0x92, 0x1f, 0xa6,
	0x60, 0x29, 0x59, 0xaa, 0x9c, 0xa7, 0x39, 0x3e, 0x19, 0x92, 0xa4, 0x76, 0xbe, 0xfe, 0xe4, 0xf1,
	0xda, 0xe1, 0xf3, 0x15, 0x32, 0xd5, 0x45, 0xcb, 0xe1, 0xf3, 0x94, 0x4a, 0x2c, 0xcf, 0x0f, 0xab,
	0x6e, 0x32, 0x93, 0x55, 0x37, 0xda, 0xa7, 0x29, 0x40, 0xc2, 0x0c, 0xe7, 0x7e, 0xb7, 0x37, 0x86,
	0xd9, 0xe0, 0xbc, 0x8b, 0xb9, 0xd7, 0x20, 0x63, 0xf8, 0x2d, 0x52, 0xca, 0xf2, 0x38, 0x18, 0x79,
	0xea, 0x1c, 0x09, 0x6d, 0x45, 0x7d, 0x56, 0x6e, 0x78, 0x9f, 0x15, 0x1a, 0x27, 0x40, 0xd4, 0xfe,
	0xa6, 0xc0, 0x22, 0x0f, 0xa9, 0x30, 0x25, 0xec, 0x9e, 0x60, 0x87, 0xb2, 0xb4, 0xc6, 0x82, 0x5b,
	0xe1, 0xc1, 0xcd, 0xfe, 0x8e, 0x4e, 0x06, 0xef, 0xc0, 0x2c, 0x8f, 0xc2, 0x7a, 0x83, 0x5f, 0x9b,
	0x66, 0x09, 0x38, 0xf3, 0x20, 0x68, 0x39, 0x75, 0x71, 0xa3, 0x9a, 0x9c, 0xf6, 0xfe, 0x94, 0x3e,
	0xd3, 0x8a, 0x01, 0xd1, 0x2e, 0xcc, 0x4b, 0x02, 0x41, 0xff, 0x52, 0x9a, 0xe1, 0x24, 0xca, 0x09,
	0x12, 0xc1, 0x62, 0x40, 0x64, 0xae, 0x95, 0x00, 0x07, 0x4d, 0xee, 0xef, 0x72, 0x00, 0x7c, 0xc3,
	0x97, 0xaf, 0xc8, 0x57, 0x61, 0x41, 0x10, 0xa0, 0xd8, 0xef, 0x58, 0x8e, 0x41, 0x2d, 0xa7, 0x55,
	0x2a, 0x72, 0x22, 0x17, 0xe3, 0x44, 0xee, 0x45, 0xcb, 0x01, 0x21, 0xb5, 0xd5, 0xb7, 0x70, 0x4e,
	0x56, 0x61, 0x64, 0x44, 0x93, 0x44, 0x1a, 0x6d, 0x6c, 0x76, 0x6d, 0x6c, 0x96, 0x66, 0x13, 0x64,
	0x44, 0xe5, 0x1b, 0x2c, 0x86, 0x64, 0xcc, 0x04, 0x18, 0xdd, 0xe4, 0xc3, 0xa9, 0x16, 0xae, 0x1b,
	0xa6, 0x89, 0xcd, 0xd2, 0x1c, 0x27, 0xb1, 0x1c, 0x9f, 0x86, 0x6c, 0xb3, 0x85, 0x60, 0x3b, 0x90,
	0x10, 0xc4, 0x24, 0x10, 0x5b, 0x23, 0x45, 0xe6, 0x13, 0x12, 0xf0, 0xed, 0x83, 0x8a, 0x90, 0x04,
	0x18, 0xed, 0xc0, 0x5c, 0x44, 0xc6, 0x25, 0xd8, 0x2c, 0xa9, 0x9c, 0xca, 0x6a, 0x3f, 0x15, 0xb6,
	0x16, 0x10, 0x99, 0x25, 0x71, 0x28, 0xfa, 0x10, 0x56, 0x9a, 0x86, 0x41, 0xea, 0x56, 0x58, 0xab,
	0xd5, 0x09, 0x35, 0x7c, 0x26, 0xd2, 0x02, 0x27, 0xf6, 0x92, 0x24, 0x96, 0x2c, 0xe8, 0x0e, 0x05,
	0x4e, 0x40, 0x74, 0xa9, 0x39, 0x6c, 0x15, 0x19, 0xb0, 0xda, 0x4f, 0x3c, 0xd2, 0x18, 0x71, 0xf2,
	0x2f, 0x0f, 0x25, 0x3f, 0xa0, 0xfa, 0x4a, 0x73, 0xf8, 0x7a, 0xc2, 0x27, 0x3a, 0x16, 0x65, 0x84,
	0x17, 0x87, 0xfa, 0x84, 0x58, 0x1c, 0xf0, 0x09, 0x01, 0x0e, 0x22, 0xa5, 0x07, 0x0b, 0x03, 0x3e,
	0x3d, 0xfa, 0x76, 0x1a, 0x5b, 0x98, 0x55, 0x21, 0x45, 0x89, 0xbc, 0x9f, 0xca, 0x9b, 0x62, 0x0a,
	0xbe, 0x19, 0x8c, 0xd7, 0x37, 0xef, 0x05, 0xe3, 0x75, 0x3d, 0x45, 0x89, 0xf6, 0x53, 0x05, 0x16,
	0x87, 0x38, 0x5e, 0xe2, 0x0a, 0x54, 0x92, 0x57, 0xe0, 0x0a, 0xe4, 0xd9, 0xfd, 0x1a, 0x36, 0xfb,
	0x7a, 0x8e, 0x7d, 0xde, 0x25, 0x67, 0xe1, 0x1b, 0xd7, 0x2e, 0x93, 0x28, 0x44, 0x7e, 0xaf, 0xc0,
	0xd2, 0xd0, 0xd8, 0x7c, 0x0e, 0x83, 0x6c, 0x86, 0x55, 0x66, 0xfa, 0x69, 0xd3, 0xcf, 0xb0, 0xfa,
	0x14, 0x8a, 0x64, 0x26, 0x32, 0xe0, 0x43, 0x99, 0xb6, 0x93, 0xbe, 0xf3, 0x25, 0x9d, 0xde, 0xfd,
	0x88, 0x79, 0xcc, 0xd1, 0x46, 0x33, 0x17, 0xb4, 0x53, 0x13, 0xd1, 0xfe, 0x43, 0x0a, 0xe6, 0xfb,
	0xf2, 0xc9, 0xd3, 0xbc, 0xa2, 0x0a, 0x29, 0xd7, 0x1b, 0x3f, 0x96, 0xd4, 0x53, 0xae, 0x77, 0xa6,
	0x39, 0x64, 0x7f, 0x27, 0x90, 0x19, 0xec, 0x04, 0xa4, 0x5a, 0xd9, 0x89, 0x1c, 0x6f, 0x60, 0xcc,
	0x92, 0x1b, 0x37, 0x66, 0xc9, 0x27, 0xc7, 0x2c, 0x71, 0xeb, 0x4e, 0x27, 0x5c, 0xf7, 0x33, 0x45,
	0x36, 0x3e, 0x7d, 0xbe, 0xf0, 0x14, 0xab, 0x45, 0xe5, 0x64, 0x6a, 0xb2, 0x1e, 0xf2, 0x5c, 0x62,
	0xec, 0xd7, 0x0a, 0xeb, 0x32, 0xfa, 0xb3, 0xf4, 0xd3, 0x4f, 0x77, 0x21, 0xc8, 0xf6, 0xf5, 0xbe,
	0xd2, 0x78, 0x3e, 0x58, 0x38, 0x8c, 0x3c, 0xe1, 0xf9, 0x45, 0xfc, 0x95, 0x02, 0xe5, 0xd1, 0xb9,
	0x7f, 0x8c, 0x23, 0x4e, 0xea, 0xe3, 0xe3, 0x7b, 0xfc, 0x91, 0xf2, 0xfd, 0x45, 0x81, 0x8b, 0x4f,
	0xbb, 0x3c, 0xfe, 0x97, 0x87, 0x1e, 0x0c, 0x19, 0x32, 0xf1, 0x21, 0x43, 0x5c, 0x95, 0x6c, 0x42,
	0x95, 0x3f, 0x2b, 0xb0, 0xaa, 0x77, 0x1d, 0x96, 0xc4, 0xbf, 0xa0, 0x0a, 0x3d, 0x28, 0x9e, 0xd3,
	0x67, 0x2c, 0x9e, 0x33, 0x93, 0x16, 0xcf, 0x77, 0xa1, 0x3c, 0x4c, 0x03, 0xd9, 0xe7, 0x45, 0xf6,
	0xce, 0x4e, 0x64, 0xef, 0xea, 0xb7, 0xc5, 0x13, 0xaa, 0x78, 0x83, 0x44, 0x08, 0xe6, 0xba, 0xce,
	0xb1, 0xe3, 0x9e, 0x3a, 0x75, 0xf1, 0x0a, 0xa9, 0x4e, 0xa1, 0x3c, 0xa4, 0x5b, 0x98, 0xaa, 0x0a,
	0x9a, 0x86, 0x4c, 0x1b, 0x1b, 0xa6, 0x9a, 0x62, 0xff, 0x3c, 0x97, 0x50, 0x35, 0xcd, 0x16, 0xbd,
	0x2e, 0x55, 0x33, 0x08, 0x20, 0x67, 0x62, 0xe6, 0x13, 0x6a, 0x16, 0x15, 0x21, 0xef, 0x7a, 0xfc,
	0x01, 0x5a, 0xcd, 0xa3, 0x02, 0x64, 0x3d, 0x83, 0x36, 0xda, 0x6a, 0xae, 0xfa, 0x99, 0x02, 0x73,
	0xc9, 0x17, 0x3e, 0xb4, 0x00, 0xb3, 0x01, 0x43, 0xfe, 0xfe, 0xa5, 0x4e, 0x31, 0x90, 0x30, 0xb2,
	0xec, 0x6c, 0x55, 0x05, 0xa9, 0x30, 0x23, 0x40, 0x4d, 0xc3, 0xb2, 0x31, 0x93, 0xe0, 0x02, 0xa8,
	0xa1, 0x37, 0x07, 0x78, 0x69, 0x54, 0x86, 0xe5, 0xc8, 0xc7, 0xb9, 0x75, 0x82, 0x1d, 0x19, 0x34,
	0x07, 0xa2, 0x3e, 0xac, 0xdb, 0x4c, 0xf2, 0x2c, 0xc3, 0x95, 0x7d, 0x5f, 0x3d, 0x78, 0x70, 0x13,
	0x36, 0x54, 0x73, 0xd5, 0xfb, 0xfc, 0x3a, 0x88, 0xdf, 0x97, 0x71, 0x41, 0xd9, 0xcd, 0x89, 0xd5,
	0x29, 0x34, 0x0b, 0x05, 0x3e, 0xce, 0xc4, 0x26, 0x36, 0x55, 0x85, 0x59, 0x20, 0x14, 0x6f, 0x96,
	0x25, 0x55, 0xa7, 0x81, 0x6d, 0xf6, 0x99, 0x66, 0x4b, 0xc7, 0x16, 0xff, 0x9f, 0xa9, 0x7e, 0x3f,
	0x0d, 0x8b, 0x43, 0x2e, 0x0b, 0xb4, 0x04, 0x0b, 0x01, 0x83, 0xf0, 0x15, 0x4b, 0x9d, 0x62, 0xaa,
	0x1b, 0x8d, 0x06, 0xf6, 0xe8, 0xae, 0x45, 0xdb, 0xd8, 0x57, 0x15, 0x26, 0x89, 0xe1, 0x79, 0x76,
	0xef, 0x9e, 0x2b, 0x41, 0x29, 0x76, 0x6c, 0xb4, 0x8d, 0x9d, 0x6d, 0x8e, 0xb8, 0xe3, 0xd2, 0xb6,
	0x9a, 0x66, 0x22, 0x70, 0x18, 0x43, 0x55, 0x33, 0xec, 0x4c, 0xd8, 0xa7, 0xde, 0x75, 0xd4, 0x2c,
	0xb3, 0x45, 0x84, 0xaf, 0xe6, 0xd0, 0x3c, 0x14, 0xd9, 0xb7, 0x4c, 0x91, 0x6a, 0x3e, 0x06, 0x38,
	0xb2, 0x1c, 0xac, 0x4e, 0x33, 0x31, 0x4e, 0x25, 0x06, 0x3f, 0xe4, 0x02, 0xd3, 0xa9, 0x6d, 0x38,
	0xa6, 0x8d, 0x55, 0x60, 0xff, 0x49, 0x97, 0x33, 0x2a, 0x32, 0x59, 0xac, 0xc4, 0x0c, 0x40, 0x9d,
	0x61, 0xb0, 0x46, 0xe2, 0x99, 0x48, 0x9d, 0x65, 0x7e, 0xc1, 0xcb, 0x7d, 0x75, 0x8e, 0xfd, 0x35,
	0x6c, 0xfb, 0xfd, 0xa6, 0x3a, 0xcf, 0xff, 0x3a, 0xbd, 0xf7, 0x9b, 0xaa, 0x8a, 0x96, 0x01, 0x61,
	0x39, 0x89, 0x8e, 0xec, 0xa5, 0x2e, 0x30, 0xfd, 0xf1, 0x27, 0x4c, 0x70, 0xcb, 0xe5, 0x43, 0x6a,
	0x15, 0xa1, 0x45, 0x98, 0x0f, 0xbb, 0x1f, 0xd7, 0xd9, 0x77, 0xdd, 0x63, 0x75, 0x11, 0x95, 0xe0,
	0x42, 0x02, 0x2f, 0xd0, 0xee, 0x42, 0xf5, 0x36, 0xa8, 0xfd, 0x63, 0x2b, 0x66, 0x1f, 0x69, 0x7e,
	0xe1, 0xf2, 0x86, 0x6d, 0xab, 0x0a, 0x83, 0xfa, 0x5d, 0xc7, 0xb1, 0x9c, 0x96, 0x3c, 0xd4, 0x40,
	0x0b, 0x35, 0xbd, 0xf5, 0x79, 0x01, 0x8a, 0x7b, 0xb6, 0x7b, 0x7a, 0x88, 0xfd, 0x13, 0xab, 0x81,
	0xd1, 0x7d, 0x28, 0xc6, 0x66, 0xb8, 0x28, 0x68, 0x11, 0x06, 0xe7, 0xd4, 0xe5, 0xf2, 0xb0, 0x25,
	0xe1, 0x7c, 0xda, 0x85, 0x1f, 0xfc, 0xfd, 0x5f, 0x3f, 0x4f, 0xcd, 0x69, 0x85, 0xda, 0xc9, 0xb5,
	0x1a, 0x4b, 0x3b, 0xe4, 0x2d, 0xa5, 0x8a, 0x0c, 0x98, 0x0e, 0x9e, 0x3b, 0x50, 0x50, 0xd1, 0xf5,
	0x3d, 0xaa, 0x96, 0x57, 0x06, 0xe0, 0x92, 0xe4, 0x65, 0x4e, 0xf2, 0x92, 0xb6, 0x1a, 0x92, 0xac,
	0x3d, 0x94, 0x79, 0xee, 0x51, 0x8d, 0xfb, 0x3e, 0x63, 0x41, 0x61, 0x76, 0xdb, 0x8c, 0x3d, 0xe2,
	0xa1, 0xcb, 0x11, 0xbd, 0xd1, 0x6f, 0x7c, 0xcf, 0xc8, 0x55, 0x0c, 0x1b, 0x95, 0x2a, 0xea, 0xc1,
	0xc2, 0xc0, 0xfb, 0x56, 0x9c, 0xf3, 0xe8, 0x97, 0xaf, 0xd1, 0x9c, 0x5f, 0xe1, 0x9c, 0xd7, 0xb4,
	0xf2, 0x30, 0xce, 0xc2, 0x37, 0x19, 0xeb, 0x26, 0xb7, 0x29, 0x6f, 0x08, 0xd0, 0x0b, 0x11, 0xad,
	0x81, 0x47, 0x99, 0x67, 0x54, 0x91, 0x3b, 0x37, 0xe3, 0xf3, 0x23, 0x05, 0xd4, 0xfe, 0xb9, 0x1c,
	0xba, 0x14, 0xd0, 0x1c, 0x3e, 0x3f, 0x2c, 0xaf, 0x8d, 0x5c, 0x97, 0xbc, 0xaf, 0x73, 0xde, 0x1b,
	0xe8, 0xb5, 0x91, 0x87, 0x4a, 0x6a, 0x0f, 0x83, 0xcb, 0xea, 0x51, 0xcd, 0x60, 0x74, 0xd0, 0x6f,
	0x14, 0x58, 0x19, 0xf1, 0xd4, 0x83, 0x5e, 0x49, 0xde, 0x14, 0x23, 0x9e, 0xac, 0xcb, 0xaf, 0x8e,
	0x43, 0x93, 0xf2, 0xdd, 0xe4, 0xf2, 0x5d, 0xd7, 0x36, 0x27, 0x93, 0x2f, 0x08, 0x2c, 0x66, 0xb0,
	0x0e, 0xe4, 0x44, 0x91, 0x1f, 0xc5, 0xd0, 0xc0, 0x13, 0x5d, 0xf9, 0x72, 0xbc, 0xf9, 0x1c, 0xf5,
	0x0c, 0xa7, 0x69, 0x5c, 0x8a, 0x8b, 0xc3, 0x5d, 0x41, 0xf4, 0xb3, 0xa8, 0x05, 0xb3, 0x89, 0x31,
	0x79, 0xe8, 0x0c, 0xc3, 0xde, 0x29, 0xca, 0x17, 0x9f, 0x36, 0x59, 0xd7, 0x5e, 0xe0, 0xfc, 0x96,
	0xd0, 0xe2, 0x10, 0x7e, 0xe8, 0x88, 0xdd, 0x2a, 0x89, 0x49, 0x38, 0x7a, 0x31, 0xec, 0xce, 0x86,
	0x4d, 0xc8, 0xcb, 0x89, 0x0e, 0x3b, 0x39, 0x2c, 0xd3, 0x10, 0x67, 0x35, 0x83, 0x80, 0xb1, 0x22,
	0x7c, 0xff, 0x55, 0x05, 0x1d, 0xc1, 0x8c, 0xa0, 0xc5, 0x91, 0x08, 0x5a, 0x4d, 0x30, 0x48, 0x58,
	0x70, 0x21, 0x4e, 0x5c, 0xd0, 0x94, 0xe6, 0x42, 0xe5, 0xe1, 0x87, 0x26, 0x78, 0x1c, 0xe5, 0x78,
	0x39, 0x76, 0xfd, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x38, 0xd0, 0x4b, 0x3b, 0xe2, 0x26, 0x00,
	0x00,
}
