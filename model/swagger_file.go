// Code generated by go-bindata.
// sources:
// model/model.swagger.json
// DO NOT EDIT!

package model

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelModelSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x8f\xdb\x36\x12\x7f\xdf\x4f\x31\xd0\xdd\x43\x0b\xa4\xdd\x5c\x71\xb8\x87\xbc\x6d\x2f\x9b\x26\x0f\x45\x73\xd9\xbd\x7b\xb9\x0b\x0c\x5a\x1c\x5b\xec\x52\xa4\x96\xa4\xec\x1a\xc1\x7e\xf7\x03\x49\xfd\x37\x25\x4b\xb6\xd7\x76\x9a\x2d\xd0\xd6\xa6\x38\x23\x72\xe6\xc7\xf9\x4b\xef\x97\x2b\x80\x48\xaf\xc9\x72\x89\x2a\x7a\x03\xd1\x4f\x3f\xbe\x8e\x5e\xd9\x31\x26\x16\x32\x7a\x03\xf6\x39\x40\x64\x98\xe1\x68\x9f\xa7\x92\x22\xff\x31\x53\xd2\x48\x37\x0f\x20\x5a\xa1\xd2\x4c\x0a\xfb\xb4\xf8\x08\x42\x1a\xd0\x68\xa2\x2b\x80\x27\xc7\x4d\xc7\x09\xa6\xa8\xa3\x37\xf0\x5f\x4f\x94\x18\x93\x95\x0c\xec\x67\x6d\xe7\x7e\x76\x73\x63\x29\x74\xde\x9a\x4c\xb2\x8c\xb3\x98\x18\x26\xc5\xf5\xef\x5a\x8a\x7a\x6e\xa6\x24\xcd\xe3\x91\x73\x89\x49\x74\xbd\xa5\xeb\xd5\xdf\xae\x17\x5c\xae\xaf\x63\x85\xc4\x60\xf5\xc0\xce\x94\xda\x34\xbe\x03\x44\x32\x43\xe5\x78\x7e\xa0\x76\x9f\xff\x74\x24\xbf\x28\x92\x25\xc5\x26\xdc\x2c\x85\x3a\x93\x42\xa3\x6e\x11\x03\x44\x3f\xbd\x7e\xdd\x19\x02\x88\x28\xea\x58\xb1\xcc\x14\xb2\x6b\x30\x72\x8f\x9d\xc8\xc8\x16\x19\x40\xf4\x57\x85\x0b\x4b\xf1\x97\x6b\x8a\x0b\x26\x98\xe5\xa0\xaf\x9d\x66\x1a\x0b\xfb\x54\x2c\x26\x6a\x91\x3f\x5d\x85\x3e\x3f\x35\x36\x91\x11\x45\x52\x34\xa8\x6a\xa1\xfa\x7f\x3a\xcb\x17\x24\x75\x88\x98\x4b\xba\xe9\xae\x9d\x89\xbe\x27\x0a\x1f\x73\xa6\xd0\x4a\xd1\xa8\x1c\x8f\xbe\xe7\xc7\x1c\xb5\x19\xb3\xe5\xcf\x8d\x2d\x1b\xb2\xec\x6e\x36\x7a\xc7\xe5\xfa\x0e\xd5\x8a\xc5\x0d\x09\x7e\xbe\x6a\xb2\x29\xa4\x56\x23\x49\x1b\x85\x24\x6d\x22\x69\x89\xc3\x40\xba\x73\x14\xb7\x2b\x14\x46\x1f\x0d\x49\xdf\xf9\x75\x30\xb1\x84\x8a\xcf\xf7\x47\x81\x97\x13\xb2\x5b\xed\x73\xa3\x6a\x69\xdf\xf4\xa3\xfb\xef\x8c\xd1\x30\xbe\x1e\x73\x54\x43\x00\x5b\x10\xae\xbb\x08\x33\x9b\xcc\xf1\xd7\x46\x31\xb1\x6c\xee\xe2\xe9\xd5\xd8\x55\x2d\x94\x4c\x67\x1a\x1f\x9f\x6d\x55\x9d\xa7\x0b\xa9\x52\x62\x71\x14\xe5\x4c\x98\x7f\xfc\x3d\x3a\x19\xa0\xbf\x94\x0a\x78\x9a\x02\xea\x5f\xd0\x38\xa0\xdc\x19\x6b\x57\x2f\xca\x3e\xb6\x96\x76\x2a\x0b\x39\x8c\x62\xeb\x96\xa6\x59\xc9\x01\x0c\x9f\x08\x0d\xd7\xb1\x4c\x53\x66\xa6\xf9\x4c\x4f\x72\x59\x70\x68\x38\x8d\x8f\x4a\xc6\xa8\x35\xd2\x3f\x21\x2c\x46\x98\xb6\xf3\xbb\x71\x87\x8f\x4b\x70\xe3\x0d\x9c\x53\xe4\x64\x33\x09\xe6\x37\x94\xbe\x75\x44\x17\x05\xf4\x1b\x4a\xef\x0c\x59\xfe\x19\x4d\xde\xd7\x80\xed\x12\x14\x85\x0e\x2e\x05\xdd\x4c\xac\xe4\xc3\xb4\xcc\xe7\x86\xd2\x0f\x8e\xea\x5d\x2e\x62\x07\xd1\x17\x9c\xbf\xe0\xbc\x21\xfe\x36\x3a\x2e\x0c\xf0\xda\x2e\x67\x2a\xde\xdd\x1e\x5e\x60\xfe\x02\xf3\x80\xf8\x2f\x0a\xd8\xfa\xfa\x8b\xfb\xbf\x1b\x21\x6b\xd2\x0e\xd0\x77\x65\x6d\x37\x96\xa0\x44\x55\xce\x2f\x2c\x52\xef\xae\xee\xdb\x44\x7e\xa9\xde\xcb\x58\x8d\x61\x29\xca\xdc\xcc\x52\xfd\x2d\x55\x42\x02\x67\x2d\x96\x69\xc6\x71\x6a\x0d\xb9\x20\x72\xa0\xbe\xfd\xc3\xa0\x12\x84\xf3\x0b\xcb\x1b\x7a\x16\xf9\x72\xfa\xce\xbf\x9a\xb3\x7b\xc1\x5e\x6c\x9c\xd4\x29\x56\x2d\xa6\xc6\xfa\xea\x26\x4f\xb0\xde\x57\xb8\x91\x4c\xa1\x46\x61\x48\x71\x60\xaa\x93\x5b\xaa\x45\xce\x7f\xc7\xb8\x76\x83\x51\xa6\xec\x09\x36\xac\x73\x1c\xcb\xf9\xad\x03\xda\xa7\xda\xe6\x61\xd0\x86\x98\x7c\xeb\x68\x8f\xa1\xa4\x98\xa1\xa0\x28\xe2\xee\x5a\x1a\xf4\x44\x29\xd2\x46\x41\xc4\x0c\xa6\xdd\xf9\x23\xcb\x89\x4f\x41\xeb\xd8\x9f\xdb\x1e\x20\xce\xea\xcc\xef\x25\x18\x4e\x36\xb3\xad\x4d\x0e\x79\x95\x86\x4f\xe9\xb8\x94\x26\xe3\x58\x52\x9c\x71\x19\x77\xc1\x32\x7a\x65\x31\xe1\x1c\xd5\x94\x6d\x5d\x75\x98\xd4\x3d\xd8\x90\xc4\xc1\x77\x31\x35\x10\x70\x42\x00\x9f\xea\x04\xd5\x35\x90\xa2\x9d\x49\x6f\x8b\x62\x2d\x7b\x92\x13\xb5\xec\x92\x0d\xd8\xad\xf7\xf7\xf7\x1f\x3f\xe1\xe3\x5b\x62\xf2\xf4\xeb\xd0\x76\xbf\xc2\x80\x50\x6a\x75\x5e\x0a\x10\x98\x58\x95\xeb\x0e\xea\xfe\x12\xb4\x5d\x05\x42\x13\x94\x56\x38\x1b\x26\xc5\x6f\x15\x75\x58\xf4\x5c\xea\x5c\x6d\x19\xe4\x01\xd6\x3f\x73\x39\x1f\x00\x03\xc5\xec\x54\x46\xf6\x82\x21\x18\x02\x9d\xc0\xb5\x37\x33\xb0\x66\x26\x81\xd2\x2b\x79\xbf\x04\x46\x82\x49\x10\x1c\x50\x06\xb1\x58\x84\x92\x67\x02\x63\x15\xd4\x1d\x53\x4c\x7e\x4b\xa0\xd0\xe4\x4a\x68\x27\x07\x2f\xa8\x0f\x6f\x41\x2e\xdc\x77\x6f\xaf\x69\xbf\x9d\xee\x4b\x78\xbf\x16\x39\xb5\xf3\x98\x9c\x9b\xbd\x4e\x7b\x51\x8b\x18\x13\x88\xd4\xe7\xf8\x00\x11\xcd\xb9\x9c\xef\xb9\xcb\x58\x0a\x83\xc2\xcc\xf6\x8d\x07\x39\x8a\xa5\x49\xf6\x0b\x5d\xba\xe9\xf0\x00\x4a\x2b\x31\x41\x22\xb9\x3b\xc7\x0a\x17\xa8\x50\xc4\x68\xcf\x2c\x01\x2b\x02\x07\x51\xa2\xb5\x8c\x99\x43\xa9\x1b\xd3\x46\xaa\x10\x54\x03\x9d\xbb\x53\x82\xb4\x1f\x11\x3b\x32\x94\x6f\xfc\x24\x5d\xaa\xb7\x19\xd6\x1a\xa4\x44\x3d\x68\x20\x02\xf0\x0f\xa6\x0d\x13\xcb\xc2\xb4\x12\x0d\x65\x1d\xc6\xfb\x23\x02\x3a\xc3\x98\x2d\x58\x0c\x2b\xc2\xf3\x1e\xe4\x0e\x96\x37\xbe\x42\x84\xe8\x3c\x8e\x51\xeb\x45\xce\xfb\xa8\xe7\x52\x72\x24\xa2\xcf\x94\x94\x8f\x27\x1c\xb0\x56\x54\x16\x90\x59\xc7\x76\x45\x28\x9c\x91\xae\x73\xfd\x28\x17\x0f\x42\xae\xc5\xac\x0e\x0d\x9b\xe1\x7d\x1c\x63\x66\x6e\x99\x49\x50\xb5\xc6\xb3\x8c\x6f\xee\xe5\xf6\x03\x93\xa0\xb8\x71\x44\x3f\xcb\x56\x51\xc6\x3f\xb1\x64\xdd\xc1\x4f\xb9\x08\x73\xe8\x8e\xda\x2d\x4b\x8d\x81\xe1\x39\x13\xad\xe1\x75\x31\xdb\x55\x06\x1b\xe3\x09\x11\x94\xb7\x46\x74\xde\x5d\x12\xeb\xed\xb1\x96\x18\xa7\xff\x71\x98\xee\x26\xbf\x2d\xf9\x70\xfe\xdb\xa2\x35\x20\x36\xed\x01\x2c\x20\x5f\xeb\xb1\xfd\xd4\x0a\x80\xc9\xad\xba\xa4\x41\x95\x32\xe1\xf4\xf4\x5e\xca\x87\x5e\x9a\x52\x56\xc5\xe3\xaa\xdc\x13\x51\x5c\x10\x6f\xc7\x06\x34\xbf\x65\x11\x9a\x30\x03\x5f\xed\x9c\xa3\x8f\xae\x2c\xd2\x80\x08\x0a\x73\x4c\xc8\x8a\xc9\x5c\xd9\x38\x8b\x14\xa6\xa1\x08\xb9\xfa\x42\xd1\x2d\x1b\x79\xc0\xb1\x7f\x86\xe3\xd7\x54\x71\x27\xbc\x81\x1d\xd6\xbf\x9b\xd6\xec\x34\xba\x4c\x94\x42\xa8\xa2\x03\x67\x3b\xc1\x47\x0c\x56\xc2\x36\x5e\x70\x13\x7c\xfd\x0a\xbe\xab\xb7\x7c\xbd\x20\x8c\x23\xfd\x3e\x24\xe3\xed\x4b\xba\x07\x48\xf9\xc0\x7a\xc1\x31\x43\x8c\xc0\x85\xeb\xcb\x08\x7e\x0e\x0e\x85\x31\xcd\xcc\x66\x02\xd8\x6e\xed\xfc\x81\x44\xda\xc6\x90\xc7\x4b\xcb\x51\x29\xa9\xa6\xac\xce\xce\x1f\xe0\xe7\x7d\xae\xa7\x1f\xcb\xb3\x48\xcf\x16\x03\x6c\x13\x63\xb2\x99\xc2\xc7\xa3\xd6\xa7\x0a\xa6\x3a\x9b\xcc\x55\x67\xc3\x22\x30\x53\x0a\x27\xae\xa8\x3e\xde\xc4\x78\x13\x82\x22\x26\x59\xae\x73\xee\xab\x95\x9c\x43\x26\xb5\x66\x73\x8e\xde\xd2\x58\x7b\x4e\x6c\x94\xb7\x81\x79\x2b\x05\x29\x63\x3a\x67\xd1\x99\x70\x16\x7d\xc1\xe5\xba\xd7\xac\xfb\x1a\x69\x9c\x20\xcd\x39\x52\x7f\x6b\xfd\x10\xcb\x7e\x40\x50\x66\x58\x8a\xcf\x51\x96\x36\x7b\xb2\xa4\xc4\xe0\x0f\x76\x51\xe3\xea\x1a\x45\x49\x39\x21\xda\x8a\x5f\x59\x6d\xfc\x00\x26\x61\xba\x08\xc6\xad\x2a\x14\x72\x62\xd8\x0a\xfd\x0c\xe7\x7d\x05\xa0\x15\x3a\xd8\x40\xa8\xaa\x4b\x0b\x49\x11\x98\x06\x85\xb1\x5c\xa1\x42\x1a\xd0\x5c\xc3\x92\x8c\x50\x58\xb5\xce\x9a\x0c\x54\xd9\xdd\x71\x75\xaa\x9c\x73\x90\x0a\x9c\x41\xeb\xcd\x05\x1a\x06\xe2\xc8\xcd\xa0\x51\x56\xe9\xde\x12\x06\x95\x9c\xa2\xd6\xed\x6b\x4b\xc3\xb8\xeb\x57\x64\xfd\xb6\x96\x80\x04\x38\x63\xea\x0f\x9e\x55\xb2\x8c\xe3\x5c\x15\x47\x8e\x59\xd5\xd5\xe7\xec\x55\x1d\x6e\x31\x41\x59\xec\x4e\xb1\xab\x67\x91\x5c\x57\x91\x96\xe7\x67\xa3\x05\xfb\xad\xd8\x80\xd5\x3a\x13\x1e\x84\x2e\x40\x1c\x54\xc2\x7d\x5b\x90\x7b\xe4\x12\xde\x43\x6c\x99\xf8\xe2\xd6\xc2\xf6\x03\x1f\xbc\x44\xa1\xb6\x44\x80\xa6\x0e\x41\x5c\xa8\x1e\xa0\xf6\x5c\xb9\xd4\xa6\x13\xd9\x13\xce\xe8\xac\xf4\x37\xed\x46\xfa\x60\x88\xdc\xde\x50\x48\xad\x56\x68\xe0\x40\x86\x4e\xaf\x4c\xf8\xf8\xbe\x50\x88\x4d\xf3\x61\x89\xc2\xc6\xd0\x5d\xf5\x06\x94\xf1\x8e\x10\xfd\xa1\xea\x27\x94\xa9\xcc\x79\x2d\xe9\x33\x15\x40\x8e\x69\x48\x3b\x65\x91\x23\xd5\x96\xc1\xf2\x2a\x8b\xea\xef\x08\xb9\xab\xaa\x1d\x21\x0b\xda\x56\xdd\x9d\x37\xda\xe7\x75\x81\xcf\x23\xe1\x7d\x32\x81\x49\x52\x6e\x38\xbd\x80\x9c\xc3\xbf\x27\x3a\x54\xc4\xbd\xa2\xea\x70\x71\xcf\x08\xa5\xcc\xdb\xd3\x8f\x61\x9e\xd0\x7f\x42\x46\x5f\x8f\x68\x30\x0b\xf7\xab\x2e\x27\x23\x73\x1b\x3a\x9e\xb1\x3a\x63\x5b\xfb\x34\xd1\x9d\x93\x97\xf5\xcd\x55\xf5\xd4\x39\xee\x35\xe3\x1c\x84\x04\x2e\xc5\x12\x15\xc4\x09\x11\xc1\x3e\x95\x17\xb7\x6f\x66\xbd\x08\x7b\x9c\xb0\x8b\xde\x5f\x9f\x34\x0f\xb7\xd3\xdb\xf9\xe6\x9e\x6d\xa4\x43\x8e\xe8\x16\x6d\xb9\xed\xf1\xce\x7b\x1b\x5c\x03\xec\x5d\x55\x92\x08\x63\x57\x31\xf1\x15\xf7\x65\x41\x53\x2c\x77\xbe\xa6\x76\xbb\x53\xf7\xd1\xb6\x49\xc1\x57\xf8\x0b\x4c\xba\x4c\x5a\xa7\x94\xfa\x02\xd9\x6e\xf0\x15\xde\x89\x13\x4a\x27\xb1\x77\x4e\xe1\xc6\x12\xed\x64\xbd\x8f\x80\x1c\xfb\x31\x02\xaa\x5f\x21\xf5\x7e\x6f\xb0\x74\x03\x2f\x58\x10\xa2\x67\xf5\x2d\x9a\x59\xe9\xfb\xc7\xbf\x69\x20\xf6\x1a\xf5\xc6\x7d\xe4\x37\x18\xaa\x8f\xf6\x9a\xbd\xbf\x84\xbd\x8c\x8a\x66\xf8\xa8\x7e\x9d\xee\x66\xff\x5a\x5b\x7f\xa1\xe0\x94\x2e\xac\xd1\x02\xea\xd4\x85\x84\x84\x54\x2a\x2c\x22\x06\x0d\x31\x11\x30\x47\x48\x09\x45\x1f\x58\x33\xed\x4b\x09\xff\x13\xee\xb3\x0b\x34\xe6\x08\x0b\xc6\xb9\x5c\x23\x85\xf9\x06\x48\x19\x8c\x58\xf6\xcd\x22\x92\xd8\xb4\xdf\x2c\xe5\x83\x86\x84\xac\x10\x54\x1e\xba\xf1\xf6\xfe\xfe\xfe\xe3\x7b\x24\x14\xd5\x21\x38\x79\xc0\xad\x3a\xf8\x18\x1d\xfb\x4a\xd3\xe1\x59\x49\xbd\x09\x58\x2b\x92\x69\x20\xa0\x99\x58\x72\x84\xc4\x8f\x3e\xe0\xe6\xba\xaf\xac\x65\x89\x7f\x45\x93\x48\x7a\x58\x35\x25\xf5\x3c\x9a\xee\x10\x5b\x85\x0d\xbb\x96\xe6\xf7\xac\x53\xf8\xc8\xda\xf5\x13\x8a\xdd\xbe\xa8\xcc\xfc\xe5\xed\x26\x0d\x31\x71\x32\xaa\x36\xd2\x59\x5e\x5b\x78\x7e\xff\x75\x61\xa4\xbe\x18\x60\x9f\x42\x41\x1b\x96\x5d\x55\x89\x3f\xe4\x52\x91\xa4\x53\x1a\x29\x3b\x3a\x1f\x5e\xe9\x47\xb8\x93\xb8\xa3\x5b\x50\x9c\x9b\x06\x4d\x38\xf5\x4b\xbb\xe8\x1a\xc3\xfc\xd7\x86\xcc\x61\x37\xfc\x4b\x2d\x34\xda\xbe\x44\x80\xcc\xcd\x52\x32\xb1\x04\xa9\x80\x89\x58\xba\x3f\x79\xe3\x54\x5a\x78\xb2\x57\xc0\x4c\x71\x66\x6c\x42\x5f\x48\xee\x55\xa1\x71\x97\xe7\xc8\xa2\x5b\x0d\x4e\x49\x7d\x18\x28\xfb\x26\x2f\x20\xe8\x01\x81\x6f\x06\xcf\x62\x49\x7b\x2d\x1e\x13\x06\x97\xad\x8b\x1a\x83\x6d\x8e\x5d\x80\x28\x54\x52\x9a\xc4\x41\x34\xdc\xfe\xeb\xdf\xb7\x77\xf7\x7d\x68\x28\x1a\xd9\xae\x3a\x5a\x42\x42\xc8\x7e\x48\x74\x63\xe1\x33\x55\xd4\xe4\x94\xf6\xdf\x59\xef\x4f\x9f\xfa\xc7\x2a\x27\x28\xec\x5e\xd2\x85\xb9\x9b\xf2\x16\x36\xd1\xe0\xf2\xba\x5d\x77\xaf\x43\xd9\xd6\x4b\x3d\x7f\x9f\xc6\xa8\x17\x7c\x95\xb1\x01\xfc\x00\x54\xae\x85\xff\x03\x6c\xfe\xa9\x2e\x7b\xd9\x46\xb1\xe5\xb2\xa7\xe3\x19\xc8\x4e\xcf\xa4\x90\x32\xb5\x9e\x5d\x4a\xb1\x7f\x1c\xee\xcb\x65\x03\x13\x46\x02\x94\x8b\xb7\x0a\xa9\x3e\xbb\x4c\xc3\x4e\xc4\xfa\x92\xa8\xbb\x9a\x4f\x30\x2d\x2f\x35\x35\x58\xd5\x12\xe8\xd1\x57\x75\xf3\xe3\x60\x55\x05\xae\x9d\xec\x61\x07\x5a\x8b\x6a\xb7\xc0\xdb\x57\xbc\x85\x34\x09\xaa\xf6\x55\x8a\x01\x5b\x51\x5e\xf2\x38\x5d\x5b\xbc\x37\xdb\x1d\xdc\x7c\x41\x52\x25\x49\x8d\x1f\x44\x97\x8d\x69\x97\x76\xb7\xee\x03\x82\xeb\x80\xd2\xda\x7f\xf5\xec\xfe\xf0\x7e\xb4\xee\xfe\x39\x3c\x77\x71\x0e\x69\xa7\xe7\xbc\xd5\x47\x8e\x89\x88\x91\x77\x06\x1f\x98\x1b\x29\x06\x06\x53\xa3\xf6\x7b\x43\x12\x2b\xda\xc6\xcd\x0b\x95\x95\xa0\xaa\x3b\x94\xaa\x05\x91\x2b\xfb\xef\xd3\xd5\xff\x03\x00\x00\xff\xff\x04\xe3\x0e\x62\x3f\x56\x00\x00")

func modelModelSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_modelModelSwaggerJson,
		"model/model.swagger.json",
	)
}

func modelModelSwaggerJson() (*asset, error) {
	bytes, err := modelModelSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/model.swagger.json", size: 22079, mode: os.FileMode(420), modTime: time.Unix(1511271414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model/model.swagger.json": modelModelSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"model": &bintree{nil, map[string]*bintree{
		"model.swagger.json": &bintree{modelModelSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

