// Code generated by go-bindata.
// sources:
// model/model.swagger.json
// DO NOT EDIT!

package model

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelModelSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x8f\xdb\xb8\x11\x7f\xdf\x4f\x31\x50\xfb\x70\x07\xe4\x6e\xd3\xb4\xe8\x43\xde\xf6\x2e\x9b\x4b\x80\x1e\x2e\xcd\x6e\xfb\xd2\x06\x06\x2d\x8e\x2d\xde\x52\xa4\x96\xa4\xd6\xb7\x08\xf6\xbb\x17\x24\xf5\xdf\x94\x2c\xd9\x5e\xdb\xdb\x38\x40\xb0\xb6\xc4\xa1\xc8\x99\x1f\xe7\xbf\xfc\xf5\x02\x20\xd2\x2b\xb2\x5c\xa2\x8a\xde\x42\xf4\xe6\xc7\xd7\xd1\x2b\x7b\x8d\x89\x85\x8c\xde\x82\xbd\x0f\x10\x19\x66\x38\xda\xfb\xa9\xa4\xc8\x7f\xcc\x94\x34\xd2\x8d\x03\x88\x1e\x50\x69\x26\x85\xbd\x5b\x7c\x04\x21\x0d\x68\x34\xd1\x05\xc0\x93\x9b\x4d\xc7\x09\xa6\xa8\xa3\xb7\xf0\x1f\x4f\x94\x18\x93\x95\x13\xd8\xcf\xda\x8e\xfd\xe2\xc6\xc6\x52\xe8\xbc\x35\x98\x64\x19\x67\x31\x31\x4c\x8a\xcb\xdf\xb5\x14\xf5\xd8\x4c\x49\x9a\xc7\x23\xc7\x12\x93\xe8\x7a\x4b\x97\x0f\x7f\xb9\x5c\x70\xb9\xaa\x2f\xd9\x31\x52\x9b\xc6\x77\x80\x48\x66\xa8\xdc\x6c\x1f\xa9\xdd\xe1\xcf\x0a\x89\xc1\x5f\x14\xc9\x92\x62\xf9\x6e\x94\x42\x9d\x49\xa1\x51\xb7\x88\x01\xa2\x37\xaf\x5f\x77\x2e\x01\x44\x14\x75\xac\x58\x66\x0a\xae\x35\x26\x72\xb7\x1d\xb3\xc8\x1a\x19\x40\xf4\x67\x85\x0b\x4b\xf1\xa7\x4b\x8a\x0b\x26\x98\x9d\x41\x5f\x3a\x99\x34\x16\xf6\xb9\x58\x4c\xd4\x22\x7f\xba\x08\x7d\x7e\x6a\x6c\x22\x23\x8a\xa4\x68\x50\xd5\xec\xf4\xff\x3a\xcb\x17\x24\x75\x58\x98\x4b\xfa\xd8\x5d\x3b\x13\x7d\x77\x14\xde\xe7\x4c\xa1\xe5\xa2\x51\x39\xee\x7d\xcf\xf7\x39\x6a\x33\x66\xcb\x5f\x1a\x5b\x36\x64\xd9\xdd\x6c\xf4\x9e\xcb\xd5\x0d\xaa\x07\x16\x37\x38\xf8\xe5\xa2\x39\x4d\xc1\xb5\x1a\x43\x97\x5f\xed\x9f\x19\xa3\x4f\x4d\x34\x2d\x71\x18\x4c\xbf\xa0\x71\x8b\xbf\x31\xc4\xe0\x69\xc1\xa9\xb5\xb4\x43\x01\xaa\xe0\x61\x18\x53\xf6\xf8\x4e\xc3\x94\x79\xcc\xdc\xb4\xda\x28\x26\x96\xd1\x11\xc0\x70\x19\xcb\x34\x65\x66\x9a\x86\xf1\x24\xa7\x85\x86\xc6\x11\xfb\xa4\x64\x8c\x5a\x23\x3d\xa3\x62\x5b\x54\x50\xe4\xe4\x71\x12\x28\xae\x28\x7d\xe7\x88\x4e\x0a\x16\x57\x94\xde\x18\xb2\xfc\x3f\xd4\x0f\xaf\x5e\x80\xf5\x2b\x31\x51\x88\xe0\x44\xec\xdf\x25\x13\x0f\xf2\x0e\xa7\xa2\xfb\xa3\xa3\x7a\x9f\x8b\xd8\x21\xf4\x0c\xf3\x33\xcc\x6b\xee\xb7\xc1\x71\x62\x78\xd7\x76\x39\x53\xe1\xee\xf6\x70\x46\xf9\x19\xe5\xeb\xdc\x3f\x29\x5c\xeb\xcb\xaf\xee\xaf\xbb\x42\x56\xa4\xed\xcb\x6e\x8a\x6f\xae\x2c\x41\x09\xaa\x9c\x9f\x98\x53\xdb\x5d\xdd\x37\x09\xfc\x52\xba\xa7\xb1\x1a\xc3\x52\x94\xb9\x99\xa5\x3a\xbc\x9e\xfb\x1c\xd5\xd0\x69\x5c\x10\xae\xfb\x56\xc4\x84\xc1\x25\xaa\x2e\xf5\x42\xaa\x94\x98\x62\xc0\x5f\xdf\x1c\x25\x1e\x58\x3f\x6a\xb1\x4c\x33\x8e\x66\x9a\x5d\xf9\xb9\x20\x72\x98\xbe\xfe\xc3\xa0\x12\x84\xf3\x13\x8b\x19\x7a\x16\x79\x3e\x7c\x47\x5f\xcd\xd1\x6d\x60\x2f\x34\x4e\xc7\x24\x2a\x24\xe9\x14\x0b\x78\xe3\x28\xae\x1f\x50\x18\xbd\xb7\x73\xf8\x9d\x5f\x07\x13\x4b\xa8\xe6\xf9\x7e\x7f\x79\x1e\xb7\xda\x6f\xea\x1c\x2e\x94\x4c\x67\x1a\xef\xf7\x6f\x74\x8a\xf5\xf4\xda\x9c\x9c\x09\xf3\xf7\xbf\x1d\xc5\xe8\x3c\x10\x9e\x4f\x8e\x5b\xfe\x6d\x89\xce\xc1\xcb\x69\xc1\xf7\xe8\x8a\xfb\x8a\xd2\x52\x77\x37\x10\x72\x3c\xbd\xbd\xad\x9e\xfe\x07\x5b\x60\xfc\x18\xf3\xfd\x81\xfb\x99\x55\x75\xb5\xe0\xad\x74\xf6\xb6\x9c\xae\xaa\xba\x8d\x45\xd5\x75\xd5\x60\xe5\xa8\x00\x44\xa6\x50\xa3\x30\xa4\x60\x4f\x25\x9e\x12\xff\x72\xfe\x3b\xc6\x75\x98\x18\x65\xca\xca\xc9\xb0\x0e\xf3\xcb\xf1\x2d\x71\xf4\x9d\xa1\xe6\x8e\xb5\x21\x26\x5f\x13\xe4\x18\x4a\x8a\x19\x0a\x8a\x22\xee\xae\xa5\x41\x4f\x94\x22\xed\xe3\x16\x31\x83\x69\x77\xfc\xc8\x1a\xc4\x53\x10\xde\x23\xce\xdb\x0e\x7c\x2d\xd5\xda\x16\x0c\xea\x9a\x13\x18\xe7\xec\x31\x29\x8a\xdc\x40\x70\xd6\x58\x52\x9c\x71\x19\x77\x11\x33\x7a\x59\x31\xe1\x1c\xd5\x94\x3d\x5d\x74\x26\xa9\x7b\x1f\x06\xd9\x0e\xb1\x2b\x46\x6b\x20\x20\x70\x05\xce\xb5\x87\x15\x33\x09\x10\xd0\x19\xc6\x6c\xc1\x62\xf0\x4c\x0a\x0a\x74\x3d\x95\x7f\x1c\x39\xba\xda\xd4\x6c\x0d\xb4\x43\x1e\x4d\x3b\x86\x6e\xba\x33\xa7\x2c\xca\x35\x86\x37\x24\xe8\x98\xe0\x65\x18\x96\xd6\x40\x46\xfa\x38\x62\x5b\x14\x4b\xd9\x92\x9c\xa8\xe5\x84\xb3\xfb\xe1\xf6\xf6\xd3\x67\xbc\x7f\x47\x4c\x9e\xbe\x0c\x61\xf7\xcb\x0b\x08\xa5\x56\xe4\x25\x03\x81\x89\x87\x72\xdd\x41\xd1\x9f\x80\xb0\x2b\xe7\x65\x2b\x7d\xfb\x5b\x45\x1d\xe6\x3c\x97\x3a\x57\x53\x54\xf9\x4f\x5c\xce\x07\xb0\x40\x31\x3b\x94\xc9\x3c\x61\x04\x86\x30\xd7\x31\x14\xa5\x8f\xe1\xbd\x0c\x30\x12\x4c\x82\xb0\x74\xbd\x66\x43\x50\x2c\x42\x9e\xe3\x60\xb1\xca\x61\xed\x93\x4b\x7e\x47\xa0\xd0\xe4\x4a\x68\xc7\x06\xcf\xa7\x8f\xef\x40\x2e\xdc\x77\xaf\xac\x69\xbf\x92\xee\xcb\xee\xbf\x10\x36\xb5\x23\x10\xeb\x20\xed\xc5\xb7\xea\x77\x2a\xeb\x53\xbc\x03\x87\xe6\x5c\xce\xb7\xdc\x65\x2c\x85\x41\x61\x66\xdb\xfa\xf6\x1c\xc5\xd2\x24\xfb\x71\x5b\xfa\x31\x5a\x71\x09\x12\xc9\xdd\x21\x56\xb8\x40\x85\x22\x46\x7b\x60\x09\x58\x0e\x38\x80\x12\xad\x65\xcc\x1c\x46\xdd\x35\x6d\xa4\x0a\x01\x75\x43\xd6\xf3\xe5\xc1\xf5\x1b\x88\x04\x86\x65\x06\x29\x51\x77\x1a\x88\x00\xfc\x83\x69\x63\x83\x7f\xaf\xbd\x88\x86\xb2\xb0\x33\x3a\x34\xd8\x54\x2f\x79\x79\xf8\xd0\x79\x1c\xa3\xd6\x8b\x9c\xf7\x51\xcf\xa5\xe4\x48\x44\xdf\x69\x2d\x6f\x8f\xd1\x6a\x21\xb7\x27\xc0\xb2\x8e\x7a\x88\x50\x38\x3d\x58\xa7\x46\xa2\x5c\xdc\x09\xb9\x12\xb3\xda\xf7\x6a\xba\xcf\x71\x8c\x99\xb9\x66\x26\x69\x15\x18\x5d\x33\xfa\xe3\xad\x5c\xbf\x61\x12\x14\x57\x8e\xe8\x27\xd9\x4a\x16\xfa\x3b\x96\xac\x7b\xf1\x73\x2e\xc2\x33\x74\xaf\xda\x2d\x4b\x8d\x81\xcb\x73\x26\x5a\x97\x57\xc5\x68\x57\x69\x6c\x5c\x4f\x88\xa0\xed\x24\x98\xce\xbb\x4b\x62\xbd\x0d\x5b\x71\x2b\x46\x8e\xba\xb1\x65\x8b\x3f\x9c\xff\xb6\x68\x5d\x10\x8f\xed\x0b\x58\x20\xbe\x96\x63\xfb\xae\x65\x00\x93\x6b\x75\x4e\x83\x2a\x65\xc2\xc9\xe9\x83\x94\x77\xbd\x34\x25\xaf\x8a\xdb\x55\x1e\x32\xa2\xb8\x20\xde\xe8\x0e\x48\x7e\x4d\x21\x34\x61\x06\x3e\x15\x38\x47\xef\xbf\x58\xa4\x01\x11\x14\xe6\x98\x90\x07\x26\x73\x65\x3d\x19\x52\x68\x86\xc2\xa9\xe9\xf3\xf5\xd6\x54\xe4\x0e\xa7\xfe\x19\x8e\x5f\x53\xc4\x1d\x0f\x02\x36\x28\xff\x6e\xdc\xb0\x51\xe7\x32\x51\x32\xa1\xb2\xc0\x4e\x75\x82\xb7\xca\x96\xc3\xd6\x26\xbb\x01\x3e\xdd\x07\xdf\xd5\x5b\xbe\x5c\x10\xc6\x91\x7e\x1f\xe2\xf1\xfa\xcb\x04\xbb\xe8\xd6\xdd\xe2\xf1\xa9\xaa\x79\x40\x01\x06\xde\x0b\x39\xa0\xcd\xe8\x5f\xd8\xce\xbe\x26\xa6\x99\x79\x9c\x00\xb5\x6b\x3b\x7e\x20\x4e\xb5\x5e\xda\xfe\xa2\x5e\x54\x4a\xaa\x29\xab\xb3\xe3\x07\xe6\xf3\x16\xd7\xd3\x8f\x9d\xb3\x08\x7f\x16\x03\xd3\x26\xc6\x64\x33\x85\xf7\x7b\xcd\xfe\x14\x93\xea\x6c\xf2\xac\x3a\x1b\x66\x81\x99\xe2\x58\xba\x0a\xc4\x78\x05\xe3\x15\x08\x8a\x98\x64\xb9\xce\xb9\x4f\x05\x72\x0e\x99\xd4\x9a\xcd\x39\x7a\x3d\x63\xb5\x39\xb1\x2e\xde\x23\xcc\x5b\x4e\x7e\xe9\xd0\x39\x7d\xce\x84\xd3\xe7\xf6\xb4\xf4\x2a\x75\x9f\x80\x8c\x13\xa4\x39\x47\xea\x2b\x38\xbb\xe8\xf5\x1d\x5c\x32\xc3\x52\x7c\x8e\x9c\xaf\xd9\x72\x4a\x4a\x0c\xfe\x60\x17\xb5\x5f\xed\x18\x48\x39\x14\xa9\xde\x84\x68\x2b\x39\x65\x05\xf9\x03\x98\x84\xe9\xc2\x89\xb7\x52\x54\xc8\x89\x61\x0f\xe8\x47\x38\xb3\x2d\x00\xad\xbc\xc0\x7a\x50\x55\xbe\x58\x48\x8a\xc0\x34\x28\x8c\xe5\x03\x2a\xa4\x01\xa1\x37\x94\xd0\x08\x59\x57\xeb\xac\xc9\x40\x95\x55\x34\x97\x41\xca\x39\x07\xa9\xc0\xe9\xc2\xde\x18\xa2\xa1\x5b\xf6\x5c\x74\x1b\xa5\xd0\x6e\x2d\x61\x50\x90\x29\x6a\xdd\xee\x9e\xde\x56\x90\xf5\xd3\x5a\x0c\x12\xe0\xf4\xb0\x3f\xb3\x56\xc8\x32\x8e\x73\x55\x9c\x56\x66\x45\x57\x1f\xd1\x57\xb5\x9f\xc6\x04\x65\xb1\x53\x00\x2e\xd5\x44\x72\x5d\xb9\x68\x7e\x3e\xeb\x66\xd8\x6f\xc5\x06\xac\xd4\x99\xf0\xf8\x75\x9e\xe5\xa0\x10\x6e\xdb\x8c\xdc\x22\x08\xf1\xc6\x65\xcd\x3a\x14\xed\x93\xeb\x37\xbc\xd7\x13\x85\xea\x05\x01\x9a\xda\x77\x71\x3e\x7e\x80\xda\xcf\xca\xa5\x36\x9d\x90\x80\x70\x46\x67\xa5\xa9\x6a\xb7\x62\x0c\xfa\xd6\xed\x0d\x85\xc4\x6a\x99\x06\x0e\x64\xe8\xe4\xca\x84\x0f\x0c\x0a\x81\xc4\xf6\xec\x2d\x51\x58\xe7\xbb\x2b\xde\x80\x30\xde\x13\xa2\x3f\x56\x89\xfe\xaa\xaa\x77\x54\x25\xbc\xcf\x34\xdf\xf3\xeb\xe0\x98\x70\x7e\x60\xe7\x36\xa4\xbe\xed\x32\xca\x4c\xf9\x7b\x42\x6e\xaa\x04\x4b\x48\xf9\xb6\xa5\x7e\xe3\xf5\xfd\x71\x0d\xef\x33\x19\xc8\xe3\x44\x1f\xa3\x04\xd4\x30\xb5\x01\x11\x85\xdf\x3b\xde\x55\x3a\xbd\x5c\xee\xcc\xe2\xee\x11\x4a\x99\xd7\xe2\x9f\xc2\x73\x42\xff\xb9\x1c\xdd\xfc\xd2\x98\x2c\x5c\xbf\x3a\x99\x00\xd2\xed\x67\x7f\x1a\xf2\x78\x35\xee\x7d\x9e\xb5\x7e\xc4\x3b\x76\x59\x7f\xa0\xca\xf4\x3a\x67\x61\xc5\x38\x07\x21\x81\x4b\xb1\x44\x05\x71\x42\x44\xb0\x6c\xe5\xb9\xed\x6b\x5b\x67\x5e\x8f\xe2\x75\x51\x09\xec\x63\xe6\xee\xfa\x7d\x3d\x3a\x1e\xb7\x99\x6e\x73\xef\x2e\xe7\xb3\x41\xea\x9c\xd5\x59\xb9\xeb\xf1\xee\xc2\x3a\xb4\x06\xa6\xaf\x12\xa8\x62\x4a\x63\x88\x7b\xc4\x6d\x4d\xba\xf1\x31\xb5\xb5\x9e\xba\x8f\xb6\x42\x0a\x3e\xc2\xb7\x32\xe9\x32\xc2\x9e\x92\x95\x0c\x84\xe6\xc1\x47\x78\xdb\x4f\x28\x9d\x34\xbd\x33\x08\x57\x96\x68\xe3\xd4\xdb\x30\xc8\x4d\x3f\x86\x41\xf5\x23\xa4\xde\xee\x09\x96\x6e\xe0\x01\x0b\x42\xf4\xac\x6e\xa8\x99\x95\x76\x7f\xfc\x93\x06\x5c\xb6\x51\x4f\xdc\x86\x7f\x83\xc1\xc1\x68\x93\xd9\xe9\xcd\x3d\x2b\xa0\x69\x0a\x68\xff\x9a\x61\x83\xbc\x7a\x7f\xde\xe4\x24\xb2\xe5\x61\xcd\xfa\x22\x7d\x83\xed\xd3\xb8\xfd\x89\xa4\x43\xfa\x1b\x8d\xda\x62\x27\x6f\x28\x24\xa4\x52\x61\xe1\xdd\x69\x88\x89\x80\x39\x42\x4a\x28\xfa\x10\x88\x69\x9f\x6a\xfa\xaf\x70\x9f\x9d\x53\x38\x47\x58\x30\xce\xe5\x0a\x29\xcc\x1f\x81\x94\x8e\xa3\x9d\xbe\x99\x64\x14\x8f\xed\x27\x4b\x79\xa7\x21\x21\x0f\x08\x2a\x0f\xb5\x2a\x7e\xb8\xbd\xfd\xf4\x01\x09\x45\xb5\x0b\x4c\xee\x70\xad\xc4\xb2\x75\x0f\xc8\x16\xf1\x63\xbd\x09\x58\x29\x92\x69\x20\xa0\x99\x58\x72\x84\xc4\x5f\xbd\xc3\xc7\xcb\xbe\xb4\xa7\x25\xfe\x15\x4d\x22\xe9\x6e\xd9\xb6\xd4\xcf\xd1\x54\x51\xd8\x4a\x7c\xd9\xb5\x34\xbf\x67\x9d\xc4\x58\xd6\xce\xaf\x51\xec\x16\xdc\x65\xe6\x5f\xa2\x68\xd2\x10\x13\x27\xa3\x72\x67\x9d\xe5\xb5\x99\xe7\xf7\x5f\x27\xce\xea\x86\x13\x7b\x17\x0a\xda\x30\xef\xaa\x22\xcf\x2e\x0d\x61\x92\x4e\xa9\xd1\x6d\x28\xaa\x79\xa1\xef\xa1\x9b\x74\x43\x21\xaa\x38\x37\x0d\x9a\x70\x90\x9e\x76\xd1\x35\x66\xf2\x5f\x1b\x3c\x87\xcd\xf0\x2f\xa5\xd0\xe8\x27\x20\x02\x64\x6e\x96\x92\x89\x25\x48\x05\x4c\xc4\xd2\xbd\x62\xe4\x44\x5a\xd8\xb1\x57\xc0\x4c\x71\x66\x4c\x52\x1e\x17\xfd\xaa\x90\xb8\x8b\x49\x65\xd1\x06\x01\x4e\x48\x7d\x18\x28\x4b\x72\x67\x10\xf4\x80\xc0\x77\x19\xcc\x62\x49\x7b\x35\x5e\xe8\xb7\x07\xfa\x7f\x79\x60\x23\x20\x0a\x91\x94\x2a\x71\x10\x0d\xd7\xff\xfc\xd7\xf5\xcd\x6d\x1f\x1a\x8a\x0e\x09\x97\x3d\x2f\x21\x21\x64\x3f\x24\xba\x91\xcb\x91\xd2\xa6\x72\x4a\x65\xf9\xa8\x9d\xef\x87\x7e\x69\xec\x00\x89\xff\xc3\x37\x62\x3e\x53\x6a\xba\x68\xbd\x27\x1a\x5c\x00\xbf\xa9\xe1\x3e\x14\x56\x9f\x4b\x45\x07\x2e\xd7\x7b\x99\x55\xc1\x21\xc0\x0f\x40\xe5\x4a\xf8\xd7\x6c\xfd\x5d\x5d\x36\x67\x18\xc5\x96\xcb\x9e\x3a\x7c\x20\x83\x71\x24\x59\x96\xe9\x97\xd9\x29\xd6\x91\x9e\xe5\xb4\x95\x3b\x06\x26\x8c\x04\x28\xf7\x6d\x65\x59\x7d\x76\xa1\x91\x1d\x88\x75\xb7\xb4\x7b\x0d\x84\x60\x5a\xb6\xf7\x35\xa6\xaa\x99\xd7\x23\xea\xaa\x0b\xea\x90\x52\xee\x67\x47\x6b\x4d\xed\x96\x8e\xf6\xfb\x04\x42\x9a\x04\x55\xbb\xab\x68\x40\x41\x95\xfd\x4e\x87\x6b\xf3\xe8\x8d\xce\x07\x37\x5f\x90\x54\x41\x5d\xe3\xb5\xf9\xb2\xd1\xc2\xa5\x09\x5a\x8d\xb1\xe0\x2a\xfa\xb4\xb6\xb7\x3d\xbb\xdf\xbd\xbf\x42\x77\x7f\x90\xd9\x75\x90\x22\xed\xf4\x50\xac\xf5\x45\xc4\x44\xc4\xc8\x3b\x17\xef\x98\xbb\x52\x5c\x18\x0c\xe5\xda\xcf\x0d\x71\xac\x68\x83\x68\x76\x16\x57\x8c\xaa\x9a\x89\x55\x0b\x22\x17\xf6\xff\xd3\xc5\xff\x02\x00\x00\xff\xff\x36\xbb\xd0\xe5\xea\x5d\x00\x00")

func modelModelSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_modelModelSwaggerJson,
		"model/model.swagger.json",
	)
}

func modelModelSwaggerJson() (*asset, error) {
	bytes, err := modelModelSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/model.swagger.json", size: 24042, mode: os.FileMode(420), modTime: time.Unix(1511795670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model/model.swagger.json": modelModelSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"model": &bintree{nil, map[string]*bintree{
		"model.swagger.json": &bintree{modelModelSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

