// Code generated by go-bindata.
// sources:
// model/model.swagger.json
// DO NOT EDIT!

package model

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelModelSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xe8\xee\x61\x17\x68\x9b\xde\xe2\x70\x0f\x7d\xcb\x5e\xd3\x6d\x1f\x16\xdb\x6b\x72\xf7\x72\x57\x18\xb4\x38\xb6\xb8\xa1\x48\x85\xa4\xec\x0d\x8a\x7c\xf7\x03\x49\xfd\x37\x25\x4b\xb6\x63\x3b\xdb\x2c\xb0\xa8\x4d\x71\x46\xe4\xcc\x8f\xc3\xf9\xe7\x7c\xbb\x00\x88\xf4\x9a\x2c\x97\xa8\xa2\x77\x10\xfd\xf4\xe6\x6d\xf4\xca\x8e\x31\xb1\x90\xd1\x3b\xb0\xcf\x01\x22\xc3\x0c\x47\xfb\x3c\x95\x14\xf9\x9b\x4c\x49\x23\xdd\x3c\x80\x68\x85\x4a\x33\x29\xec\xd3\xe2\x23\x08\x69\x40\xa3\x89\x2e\x00\x1e\x1d\x37\x1d\x27\x98\xa2\x8e\xde\xc1\x7f\x3d\x51\x62\x4c\x56\x32\xb0\x9f\xb5\x9d\xfb\xd5\xcd\x8d\xa5\xd0\x79\x6b\x32\xc9\x32\xce\x62\x62\x98\x14\x97\xbf\x6b\x29\xea\xb9\x99\x92\x34\x8f\x47\xce\x25\x26\xd1\xf5\x96\x2e\x57\x7f\xbb\x5c\x70\xb9\xbe\x8c\x15\x12\x83\xd5\x03\x3b\x53\x6a\xd3\xf8\x0e\x10\xc9\x0c\x95\xe3\xf9\x89\xda\x7d\xfe\xd3\x91\xfc\xa2\x48\x96\x14\x9b\x70\xb3\x14\xea\x4c\x0a\x8d\xba\x45\x0c\x10\xfd\xf4\xf6\x6d\x67\x08\x20\xa2\xa8\x63\xc5\x32\x53\xc8\xae\xc1\xc8\x3d\x76\x22\x23\x1b\x64\x00\xd1\x5f\x15\x2e\x2c\xc5\x5f\x2e\x29\x2e\x98\x60\x96\x83\xbe\x74\x9a\x69\x2c\xec\x4b\xb1\x98\xa8\x45\xfe\x78\x11\xfa\xfc\xd8\xd8\x44\x46\x14\x49\xd1\xa0\xaa\x85\xea\xff\xeb\x2c\x5f\x90\xd4\x21\x62\x2e\xe9\x43\x77\xed\x4c\xf4\x3d\x51\x78\x9f\x33\x85\x56\x8a\x46\xe5\x78\xf0\x3d\xdf\xe7\xa8\xcd\x98\x2d\x7f\x6d\x6c\xd9\x90\x65\x77\xb3\xd1\x07\x2e\xd7\x37\xa8\x56\x2c\x6e\x48\xf0\xeb\x45\x93\x4d\x21\xb5\x1a\x49\xda\x28\x24\x69\x13\x49\x4b\x1c\x06\xd2\x8d\xa3\xb8\x5e\xa1\x30\xfa\x60\x48\xfa\xc1\xaf\x83\x89\x25\x54\x7c\x7e\x3c\x08\xbc\x9c\x90\xdd\x6a\x9f\x1a\x55\x4b\xfb\xa6\x37\x56\xaa\x33\x46\xc3\xf0\xba\xcf\x51\x0d\xe1\x6b\x41\xb8\xee\x02\xcc\x3c\x64\x8e\xbd\x36\x8a\x89\x65\x73\x13\x8f\xaf\x46\x2f\x4a\xc9\x74\xa6\xf1\xfe\xc9\x56\xd5\x79\xba\x90\x2a\x25\x16\x46\x51\xce\x84\xf9\xc7\xdf\xa3\xa3\xe1\xf9\x5b\x21\xff\xc7\x29\x90\xfe\x05\x8d\x83\xc9\x8d\xb1\x56\xf5\xac\xac\x63\x6b\x69\xc7\xb2\x8f\x83\x18\xb6\x77\xd2\x34\x13\x39\x80\xe0\xe3\x60\xe1\x32\x96\x69\xca\xcc\xb4\xfb\xd2\x93\x9c\x17\x18\x1a\x17\xc6\x67\x25\x63\xd4\x1a\xe9\x9f\x0f\x14\x23\xcc\xda\xe9\x6f\x70\x07\x8f\x73\xb8\xc1\x6b\x94\x53\xe4\xe4\x61\x12\xc8\xaf\x28\x7d\xef\x88\xce\x0a\xe6\x57\x94\xde\x18\xb2\xfc\x13\x9a\xbb\xe7\x80\xec\x12\x13\x85\x0a\xce\x04\xdb\x4c\xac\xe4\xdd\xb4\x88\xe7\x8a\xd2\x4f\x8e\xea\x43\x2e\x62\x07\xd0\x17\x94\xbf\xa0\xbc\x96\x7e\x1b\x1c\xe7\x05\x77\x6d\x57\x33\x15\xed\x6e\x0b\x2f\x20\x7f\x01\xf9\xa6\xf4\xcf\x09\xd6\xfa\xf2\x9b\xfb\xd7\x8d\x90\x35\x69\x3b\xe6\xdb\x62\xb5\x2b\x4b\x50\x62\x2a\xe7\x67\xe6\xa1\x77\x57\xf7\x5d\xe2\xbe\xd4\xee\x79\xac\xc6\xb0\x14\x65\x6e\x66\xa9\xfe\x8e\xb2\x1f\x81\x93\x16\xcb\x34\xe3\x38\x35\x6b\x5c\x10\x39\x48\x5f\xff\x61\x50\x09\xc2\xf9\x99\xc5\x0b\x3d\x8b\x7c\x39\x7b\x27\x5f\xcd\xc9\x6f\xc0\x5e\x68\x9c\xc9\x85\xb8\x22\x3c\x9f\xec\xe7\xfd\xc7\x12\xbd\x38\x7b\xe7\x75\xf0\x4e\x0e\xf5\x2b\x4a\x4b\xb4\x37\x10\x72\x64\xa4\x57\xd5\xd3\xc6\xf2\xea\xfa\x65\x30\x99\x5d\x2c\x33\x53\xa8\x51\x18\x52\x20\xb2\x3a\x10\xa5\x56\xe4\xfc\x77\x8c\x6b\x6f\x2f\xca\x94\x3d\x18\x86\x75\xf0\x5e\xce\x6f\x9d\x80\x3e\xcd\x36\xc1\xa7\x0d\x31\xf9\xc6\xd9\x19\x43\x49\x31\x43\x41\x51\xc4\xdd\xb5\x34\xe8\x89\x52\xa4\x0d\x82\x88\x19\x4c\xbb\xf3\x47\x26\xcb\x1f\x83\xe6\x65\x04\x0a\xf6\x90\x6b\x79\xd8\x76\x10\x50\xd7\xc8\xc1\x38\xa3\xcd\xa4\x28\x5c\xfc\x20\xd7\x58\x52\x9c\x71\x19\x77\x11\x33\x7a\x59\x31\xe1\x1c\xd5\x94\x3d\x5d\x74\x98\xd4\x3d\x06\x83\x62\x07\x5f\xae\xd7\x40\x40\xe0\x1a\xdc\x15\x0d\x6b\x66\x12\x20\xa0\x33\x8c\xd9\x82\xc5\xe0\x85\x14\x54\xe8\x66\x3a\xee\x34\x7a\x74\xf9\xe5\xd9\x06\x68\x87\xbc\xe1\x86\x2f\xdc\x71\x85\xcf\x59\x95\x1b\x02\x6f\x68\xd0\x09\xc1\xeb\x30\xac\xad\x81\xb4\xd2\x69\xd4\xb6\x28\x96\xb2\x23\x39\x51\xcb\x09\x67\xf7\xe3\xed\xed\xe7\x2f\x78\xff\x9e\x98\x3c\x7d\x1e\xca\xee\xd7\x17\x10\x4a\xad\xca\x4b\x01\x02\x13\xab\x72\xdd\x41\xd5\x9f\x81\xb2\x2b\x6f\x71\x27\x7b\xfb\x5b\x45\x1d\x96\x3c\x97\x3a\x57\x53\x4c\xf9\xcf\x5c\xce\x07\xb0\x40\x31\x3b\xd6\x95\x79\xc6\x08\x0c\x61\xae\x73\x51\x94\x3e\x86\xf7\x32\xc0\x48\x30\x09\x82\x6b\xee\x18\x84\x62\xe1\x88\x9f\x06\x8b\x55\x2c\x7a\x48\x29\xf9\x1d\x81\x42\x93\x2b\xa1\x9d\x18\xbc\x9c\x3e\xbd\x07\xb9\x70\xdf\xbd\xb1\xa6\xfd\x46\xba\x2f\x49\xf7\x4c\xc4\xd4\x0e\xfa\xac\x83\x74\x10\xdf\xaa\xdf\xa9\xac\x4f\xf1\x1e\x12\x9a\x73\x39\xdf\x71\x97\xb1\x14\x06\x85\x99\xed\xea\xdb\x73\x14\x4b\x93\xec\xe6\xb6\x74\x53\x78\x03\x20\xad\xc4\x04\x89\xe4\xee\x14\x2b\x5c\xa0\x42\x11\xa3\x3d\xb1\x04\xac\x08\x1c\x42\x89\xd6\x32\x66\x0e\xa4\x6e\x4c\x1b\xa9\x42\x48\x0d\x74\x19\x1c\x11\xa3\xfd\x80\xd8\x92\x56\x79\x7e\xe7\xe8\x3b\x08\x51\x86\x75\x06\x29\x51\x77\x1a\x88\x00\xfc\x83\x69\xc3\xc4\xb2\x30\xab\x44\x43\x99\x39\x1e\x1d\xb3\x6c\x4b\xc8\x3e\x3f\x7c\xe8\x3c\x8e\x51\xeb\x45\xce\xfb\xa8\xe7\x52\x72\x24\xa2\xcf\x8c\x94\x8f\x27\x9c\xae\x96\x3f\x16\x10\x59\xc7\x6e\x45\x28\x9c\x81\xae\x73\x36\x51\x2e\xee\x84\x5c\x8b\x59\xed\x14\x36\xfd\xfa\x38\xc6\xcc\x5c\x33\x93\xa0\x6a\x8d\x67\x19\x7f\xb8\x95\x9b\x0f\x4c\x82\xe2\xca\x11\xfd\x2c\x5b\xb9\x35\xff\xc4\x92\x75\x07\xbf\xe4\x22\xcc\xa1\x3b\x6a\xb7\x2c\x35\x06\x86\xe7\x4c\xb4\x86\xd7\xc5\x6c\x57\xca\x68\x8c\x27\x44\x50\xde\x1a\xd1\x79\x77\x49\xac\xb7\x1d\x24\x6e\x05\xef\x51\x37\xe8\x6d\xc9\x87\xf3\xdf\x16\xad\x01\xf1\xd0\x1e\xc0\x02\xf1\xb5\x1e\xdb\x4f\xad\x00\x98\xdc\x28\xa4\x18\x54\x29\x13\x4e\x4f\x1f\xa5\xbc\xeb\xa5\x29\x65\x55\x3c\xae\xd2\x76\x11\xc5\x05\xf1\xde\xc0\x80\xe6\x37\x0c\x42\x13\x66\xe0\xd3\xc2\x73\xf4\x8e\x95\x45\x1a\x10\x41\x61\x8e\x09\x59\x31\x99\x2b\xeb\x62\x91\xc2\x32\x14\xde\x56\x9f\x13\xba\x61\x22\xf7\x38\xf5\x4f\x70\xfc\x9a\x2a\xee\xb8\x36\xb0\xc5\xf8\x77\x03\x9a\xad\x36\x97\x89\x52\x08\x95\x67\xe0\x4c\x27\x78\x6f\xc1\x4a\xd8\xfa\x0a\x6e\x82\xcf\x43\xc2\x0f\xf5\x96\x2f\x17\x84\x71\xa4\x3f\x86\x64\xbc\xf9\x3b\x82\x7d\x6c\xeb\x7e\x89\x82\x03\xba\x17\x81\x9f\x84\x9c\x85\xdf\xb3\xb7\x13\x8c\x69\x66\x1e\x26\x40\xed\xda\xce\x1f\x08\xa0\xad\xf7\x78\xb8\x70\x1c\x95\x92\x6a\xca\xea\xec\xfc\x01\x7e\xfe\xc6\xf5\xf4\x63\x79\x16\x71\xd9\x62\x80\x6d\x62\x4c\x36\x53\x78\x7f\xd0\xb4\x54\xc1\x54\x67\x93\xb9\xea\x6c\x58\x04\x66\x8a\x63\xe9\x4a\x23\xe3\x0d\x8c\x37\x20\x28\x62\x92\xe5\x3a\xe7\x3e\x47\xc9\x39\x64\x52\x6b\x36\xe7\xe8\xed\x8c\xb5\xe6\xc4\xba\x78\x0f\x30\x6f\x05\x1f\xa5\x43\xe7\xec\x39\x13\xce\x9e\xdb\xd3\xd2\x6b\xd4\x7d\x66\x34\x4e\x90\xe6\x1c\xa9\xff\x59\xcd\x3e\x76\x7d\x0f\x97\xcc\xb0\x14\x9f\x22\x19\x6d\x76\x64\x49\x89\xc1\xd7\x76\x51\xe3\x12\x1a\x45\x22\x39\x21\xda\x8a\x5f\x59\x6d\xbc\x06\x93\x30\x5d\x78\xe2\x56\x15\x0a\x39\x31\x6c\x85\x7e\x86\xbb\x7b\x05\xa0\x15\x3a\x58\x37\xa8\xca\x46\x0b\x49\x11\x98\x06\x85\xb1\x5c\xa1\x42\x1a\xd0\x5c\xc3\x92\x8c\x50\x58\xb5\xce\x9a\x0c\x54\x59\xa3\x73\xf9\xa9\x9c\x73\x90\x0a\x9c\x41\xeb\x0d\x04\x1a\x06\xe2\xc0\x25\xbd\x51\x56\xe9\xd6\x12\x06\x95\x9c\xa2\xd6\xed\x0e\xcb\x61\xdc\xf5\x2b\xb2\x7e\x5b\x4b\x40\x02\x9c\x31\xf5\x07\xcf\x2a\x59\xc6\x71\xae\x8a\x23\xc7\xac\xea\xea\x73\xf6\xaa\x76\xb6\x98\xa0\x2c\x76\xa7\xd8\x25\xb2\x48\xae\x2b\x3f\xcb\xf3\xb3\xbe\x82\xfd\x56\x6c\xc0\x6a\x9d\x09\x0f\x42\xe7\x1e\x0e\x2a\xe1\xb6\x2d\xc8\x1d\x22\x09\x7f\x43\x6c\x98\xf8\xa2\xc7\x6a\xf3\x81\x77\x5d\xa2\x50\x35\x22\x40\x53\x3b\x20\xce\x51\x0f\x50\x7b\xae\x5c\x6a\xd3\xf1\xeb\x09\x67\x74\x56\xde\x37\xed\xf6\x83\x41\x07\xb9\xbd\xa1\x90\x5a\xad\xd0\xc0\x81\x0c\x9d\x5e\x99\xf0\xde\x7d\xa1\x10\x1b\xe3\xc3\x12\x85\xf5\xa0\xbb\xea\x0d\x28\xe3\x03\x21\xfa\x53\x55\x46\xa8\x6a\x86\x27\xb5\xa4\x87\x4c\x22\x3e\x91\x21\xed\xe4\x44\x0e\x94\x54\x06\xcb\xab\x4c\xa6\x7f\x20\xe4\xa6\x4a\x75\x84\x2c\x68\x5b\x75\x37\xde\x68\x9f\xf6\x0a\x7c\x1a\x09\xef\x12\x07\x4c\x92\x72\xe3\xd2\x0b\xc8\x39\xfc\x93\xc7\x7d\x45\xdc\x2b\xaa\x0e\x17\xf7\x8c\x50\xca\xbc\x3d\xfd\x1c\xe6\x09\xfd\x27\x64\x74\x93\x4b\x83\x59\xb8\x4e\x75\x36\xf1\x98\xdb\xcf\xe1\x6c\xd5\xe9\x6a\xd9\xc7\xf1\xed\x9c\xb8\xec\xcd\x5c\x25\x4e\xdd\xb5\xbd\x66\x9c\x83\x90\xc0\xa5\x58\xa2\x82\x38\x21\x22\x58\x9e\xf2\xd2\xf6\x35\xac\x17\x59\x8f\x92\x75\x51\xf1\xeb\x13\xe6\xfe\x46\x7a\x33\xd8\xdc\xb1\x7a\xb4\xc7\xf9\x6c\x90\x3a\xb7\x71\x56\xee\x7a\xfc\xc5\xbd\x09\xad\x01\xf6\x2e\x1f\x49\x84\xb1\xab\x98\xf8\x8a\xdb\x32\x95\x29\x96\x5b\x5f\x53\x5f\xb9\x53\xf7\xd1\x36\x48\xc1\x57\xf8\x96\x25\x5d\x06\xac\x53\x92\x7c\x81\x48\x37\xf8\x0a\x7f\x81\x13\x4a\x27\xb1\x77\x17\xc2\x95\x25\xda\xca\x7a\x17\x01\x39\xf6\x63\x04\x54\xbf\x42\xea\xdd\xde\x60\xe9\x06\x5e\xb0\x20\x44\xcf\xea\xc6\x99\x59\x79\xef\x8f\x7f\xd3\x80\xdf\x35\xea\x8d\xbb\xc8\x6f\xd0\x4d\x1f\x7d\x65\xf6\xfe\x54\xff\x2c\x92\x99\xe1\x93\xfa\x2c\xef\x9a\xdd\xb3\x6c\xfd\x29\x82\x63\xde\x5f\x8d\xd2\x4f\x27\x23\x24\x24\xa4\x52\x61\xe1\x2d\x68\x88\x89\x80\x39\x42\x4a\x28\x7a\x97\x9a\x69\x9f\x44\xf8\x9f\x70\x9f\x9d\x93\x31\x47\x58\x30\xce\xe5\x1a\x29\xcc\x1f\x80\x94\x8e\x88\x65\xdf\x4c\x1f\x89\x87\xf6\x9b\xa5\xbc\xd3\x90\x90\x15\x82\xca\x43\x2d\x6e\x1f\x6f\x6f\x3f\x7f\x44\x42\x51\xed\x03\x93\x3b\xdc\xc8\x80\xef\x5c\xa2\xdf\x21\x1e\xa9\x37\x01\x6b\x45\x32\x0d\x04\x34\x13\x4b\x8e\x90\xf8\xd1\x3b\x7c\xb8\xec\x4b\x68\x59\xe2\x5f\xd1\x24\x92\xee\x97\x47\x49\x3d\x8f\xe6\x65\x88\xad\x94\x86\x5d\x4b\xf3\x7b\xd6\x49\x79\x64\xed\xcc\x09\xc5\x6e\x3d\x54\x66\xbe\xf9\xbe\x49\x43\x4c\x9c\x8c\xca\x8a\x74\x96\xd7\x16\x9e\xdf\x7f\x9d\x12\xa9\xfb\x01\xec\x53\x28\x68\xc3\xb2\xab\x72\xf0\xfb\x34\x12\x49\x3a\xa5\x84\xb2\xa5\xe6\xe1\x95\x7e\x80\x2e\xc4\x2d\x75\x82\xe2\xdc\x34\x68\xc2\x41\x5f\xda\x45\xd7\x18\xe6\xbf\x36\x64\x0e\xdb\xe1\x5f\x6a\xa1\x51\xee\x25\x02\x64\x6e\x96\x92\x89\x25\x48\x05\x4c\xc4\xd2\xfd\x35\x2e\xa7\xd2\xe2\x1e\x7b\x05\xcc\x14\x67\xc6\x86\xf2\x85\xe4\x5e\x15\x1a\x77\x31\x8e\x2c\xaa\xd4\xe0\x94\xd4\x87\x81\xb2\x62\xf2\x02\x82\x1e\x10\xf8\x22\xf0\x2c\x96\xb4\xd7\xe2\x31\x61\x70\xd9\x6a\xd0\x18\x2c\x70\x6c\x03\x44\xa1\x92\xd2\x24\x0e\xa2\xe1\xfa\x5f\xff\xbe\xbe\xb9\xed\x43\x43\x51\xc0\x76\x79\xd1\x12\x12\x42\xf6\x43\xa2\xeb\x09\x9f\x28\x97\x26\xa7\x14\xfe\x4e\xda\x31\x7d\xec\x1f\x1b\x1d\x21\xa5\x7b\x4e\x7d\x72\x57\x65\xdf\x35\xd1\xe0\xa2\xba\x6d\xdd\xd6\xa1\x58\xeb\x25\x93\xbf\x4b\x49\xd4\x0b\xbe\x8a\xd7\x00\x5e\x03\x95\x6b\xe1\xff\x36\xa4\x7f\xaa\xcb\x2a\xb6\x51\x6c\xb9\xec\xa9\x75\x06\x62\xd3\x13\x29\xa4\x0c\xac\x67\xe7\x92\xe6\x1f\x87\xfb\x72\xd9\xc0\x84\x91\x00\xe5\xe2\xad\x42\xaa\xcf\x2e\xd2\xb0\x13\xb1\xee\x0d\x75\xdd\xf8\x04\xd3\xb2\x99\xa9\xc1\xaa\x96\x40\x8f\xbe\xaa\x9e\x8f\xbd\x55\x15\x68\x38\xd9\xc1\x0e\xb4\x16\xd5\x2e\x7e\xb7\xdb\xba\x85\x34\x09\xaa\x76\x13\xc5\x80\xad\x28\xdb\x3b\x8e\x57\x10\xef\x8d\x76\x07\x37\x5f\x90\x54\x41\x52\xe3\x17\xe3\x65\x49\xda\x85\xdd\xad\x3e\x40\x70\xb5\x4f\x5a\xdf\x5f\x3d\xbb\xdf\xbf\x12\xad\xbb\x7f\xab\xd3\x35\xcc\x21\xed\x54\x9b\x37\x2a\xc8\x31\x11\x31\xf2\xce\xe0\x1d\x73\x23\xc5\xc0\x60\x68\xd4\x7e\x6f\x48\x62\x45\xc1\xb8\xd9\x48\x59\x09\xaa\xea\x9d\x54\x2d\x88\x5c\xd8\xff\x1f\x2f\xfe\x1f\x00\x00\xff\xff\xfc\x52\x19\x06\xda\x5a\x00\x00")

func modelModelSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_modelModelSwaggerJson,
		"model/model.swagger.json",
	)
}

func modelModelSwaggerJson() (*asset, error) {
	bytes, err := modelModelSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/model.swagger.json", size: 23258, mode: os.FileMode(420), modTime: time.Unix(1511290227, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model/model.swagger.json": modelModelSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"model": &bintree{nil, map[string]*bintree{
		"model.swagger.json": &bintree{modelModelSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

