// Code generated by go-bindata.
// sources:
// model/model.swagger.json
// DO NOT EDIT!

package model

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelModelSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x8f\xdb\xb8\x11\x7f\xdf\x4f\x31\x50\xfb\x70\x07\xe4\x6e\xd3\xb4\xe8\x43\xde\xf6\x2e\x9b\x4b\x80\x1e\x2e\xcd\x6e\xfb\xd2\x06\x06\x2d\x8e\x2d\xde\x52\xa4\x96\xa4\xd6\xb7\x08\xf6\xbb\x17\x24\xf5\xdf\x94\x2c\xd9\x5e\xdb\xdb\x38\x40\xb0\xb6\xc4\xa1\xc8\x99\x1f\xe7\xbf\xfc\xf5\x02\x20\xd2\x2b\xb2\x5c\xa2\x8a\xde\x42\xf4\xe6\xc7\xd7\xd1\x2b\x7b\x8d\x89\x85\x8c\xde\x82\xbd\x0f\x10\x19\x66\x38\xda\xfb\xa9\xa4\xc8\x7f\xcc\x94\x34\xd2\x8d\x03\x88\x1e\x50\x69\x26\x85\xbd\x5b\x7c\x04\x21\x0d\x68\x34\xd1\x05\xc0\x93\x9b\x4d\xc7\x09\xa6\xa8\xa3\xb7\xf0\x1f\x4f\x94\x18\x93\x95\x13\xd8\xcf\xda\x8e\xfd\xe2\xc6\xc6\x52\xe8\xbc\x35\x98\x64\x19\x67\x31\x31\x4c\x8a\xcb\xdf\xb5\x14\xf5\xd8\x4c\x49\x9a\xc7\x23\xc7\x12\x93\xe8\x7a\x4b\x97\x0f\x7f\xb9\x5c\x70\xb9\xaa\x2f\xd9\x31\x52\x9b\xc6\x77\x80\x48\x66\xa8\xdc\x6c\x1f\xa9\xdd\xe1\xcf\x0a\x89\xc1\x5f\x14\xc9\x92\x62\xf9\x6e\x94\x42\x9d\x49\xa1\x51\xb7\x88\x01\xa2\x37\xaf\x5f\x77\x2e\x01\x44\x14\x75\xac\x58\x66\x0a\xae\x35\x26\x72\xb7\x1d\xb3\xc8\x1a\x19\x40\xf4\x67\x85\x0b\x4b\xf1\xa7\x4b\x8a\x0b\x26\x98\x9d\x41\x5f\x3a\x99\x34\x16\xf6\xb9\x58\x4c\xd4\x22\x7f\xba\x08\x7d\x7e\x6a\x6c\x22\x23\x8a\xa4\x68\x50\xd5\xec\xf4\xff\x3a\xcb\x17\x24\x75\x58\x98\x4b\xfa\xd8\x5d\x3b\x13\x7d\x77\x14\xde\xe7\x4c\xa1\xe5\xa2\x51\x39\xee\x7d\xcf\xf7\x39\x6a\x33\x66\xcb\x5f\x1a\x5b\x36\x64\xd9\xdd\x6c\xf4\x9e\xcb\xd5\x0d\xaa\x07\x16\x37\x38\xf8\xe5\xa2\x39\x4d\xc1\xb5\x1a\x43\x97\x5f\xed\x9f\x19\xa3\x4f\x4d\x34\x2d\x71\x18\x4c\xbf\xa0\x71\x8b\xbf\x31\xc4\xe0\x69\xc1\xa9\xb5\xb4\x43\x01\xaa\xe0\x61\x18\x53\xf6\xf8\x4e\xc3\x94\x79\xcc\xdc\xb4\xda\x28\x26\x96\xd1\x11\xc0\x70\x19\xcb\x34\x65\x66\x9a\x86\xf1\x24\xa7\x85\x86\xc6\x11\xfb\xa4\x64\x8c\x5a\x23\x3d\xa3\x62\x5b\x54\x50\xe4\xe4\x71\x12\x28\xae\x28\x7d\xe7\x88\x4e\x0a\x16\x57\x94\xde\x18\xb2\xfc\x3f\xd4\x0f\xaf\x5e\x80\xf5\x2b\x31\x51\x88\xe0\x44\xec\xdf\x25\x13\x0f\xf2\x0e\xa7\xa2\xfb\xa3\xa3\x7a\x9f\x8b\xd8\x21\xf4\x0c\xf3\x33\xcc\x6b\xee\xb7\xc1\x71\x62\x78\xd7\x76\x39\x53\xe1\xee\xf6\x70\x46\xf9\x19\xe5\xeb\xdc\x3f\x29\x5c\xeb\xcb\xaf\xee\xaf\xbb\x42\x56\xa4\xed\xcb\x6e\x8a\x6f\xae\x2c\x41\x09\xaa\x9c\x9f\x98\x53\xdb\x5d\xdd\x37\x09\xfc\x52\xba\xa7\xb1\x1a\xc3\x52\x94\xb9\x99\xa5\x3a\xbc\x9e\xfb\x1c\xd5\xd0\x69\x5c\x10\xae\xfb\x56\xc4\x84\xc1\x25\xaa\x2e\xf5\x42\xaa\x94\x98\x62\xc0\x5f\xdf\x1c\x25\x1e\x58\x3f\x6a\xb1\x4c\x33\x8e\x66\x9a\x5d\xf9\xb9\x20\x72\x98\xbe\xfe\xc3\xa0\x12\x84\xf3\x13\x8b\x19\x7a\x16\x79\x3e\x7c\x47\x5f\xcd\xd1\x6d\x60\x2f\x34\x4e\xc7\x24\x2a\x24\xe9\x14\x0b\x78\xe3\x28\xae\x1f\x50\x18\xbd\xb7\x73\xf8\x9d\x5f\x07\x13\x4b\xa8\xe6\xf9\x7e\x7f\x79\x1e\xb7\xda\x6f\xea\x1c\x2e\x94\x4c\x67\x1a\xef\xf7\x6f\x74\x8a\xf5\xf4\xda\x9c\x9c\x09\xf3\xf7\xbf\x1d\xc5\xe8\x3c\x10\x9e\x4f\x8e\x5b\xfe\x6d\x89\xce\xc1\xcb\x69\xc1\xf7\xe8\x8a\xfb\x8a\xd2\x52\x77\x37\x10\x72\x3c\xbd\xbd\xad\x9e\xfe\x07\x5b\x60\xfc\x18\xf3\xfd\x81\xfb\x99\x55\x75\xb5\xe0\xad\x74\xf6\xb6\x9c\xae\xaa\xba\x8d\x45\xd5\x75\xd5\x60\xe5\xa8\x00\x44\xa6\x50\xa3\x30\xa4\x60\x4f\x25\x9e\x12\xff\x72\xfe\x3b\xc6\x75\x98\x18\x65\xca\xca\xc9\xb0\x0e\xf3\xcb\xf1\x2d\x71\xf4\x9d\xa1\xe6\x8e\xb5\x21\x26\x5f\x13\xe4\x18\x4a\x8a\x19\x0a\x8a\x22\xee\xae\xa5\x41\x4f\x94\x22\xed\xe3\x16\x31\x83\x69\x77\xfc\xc8\x1a\xc4\x53\x10\xde\x23\xce\xdb\x0e\x7c\x2d\xd5\xda\x16\x0c\xea\x9a\x13\x18\xe7\xec\x31\x29\x8a\xdc\x40\x70\xd6\x58\x52\x9c\x71\x19\x77\x11\x33\x7a\x59\x31\xe1\x1c\xd5\x94\x3d\x5d\x74\x26\xa9\x7b\x1f\x06\xd9\x0e\xb1\x2b\x46\x6b\x20\x20\x70\x05\xce\xb5\x87\x15\x33\x09\x10\xd0\x19\xc6\x6c\xc1\x62\xf0\x4c\x0a\x0a\x74\x3d\x95\x7f\x1c\x39\xba\xda\xd4\x6c\x0d\xb4\x43\x1e\x4d\x3b\x86\x6e\xba\x33\xa7\x2c\xca\x35\x86\x37\x24\xe8\x98\xe0\x65\x18\x96\xd6\x40\x46\xfa\x38\x62\x5b\x14\x4b\xd9\x92\x9c\xa8\xe5\x84\xb3\xfb\xe1\xf6\xf6\xd3\x67\xbc\x7f\x47\x4c\x9e\xbe\x0c\x61\xf7\xcb\x0b\x08\xa5\x56\xe4\x25\x03\x81\x89\x87\x72\xdd\x41\xd1\x9f\x80\xb0\x2b\xe7\x65\x2b\x7d\xfb\x5b\x45\x1d\xe6\x3c\x97\x3a\x57\x53\x54\xf9\x4f\x5c\xce\x07\xb0\x40\x31\x3b\x94\xc9\x3c\x61\x04\x86\x30\xd7\x31\x14\xa5\x8f\xe1\xbd\x0c\x30\x12\x4c\x82\xb0\x74\xbd\x66\x43\x50\x2c\x42\x9e\xe3\x60\xb1\xca\x61\xed\x93\x4b\x7e\x47\xa0\xd0\xe4\x4a\x68\xc7\x06\xcf\xa7\x8f\xef\x40\x2e\xdc\x77\xaf\xac\x69\xbf\x92\xee\xcb\xee\xbf\x10\x36\xb5\x23\x10\xeb\x20\xed\xc5\xb7\xea\x77\x2a\xeb\x53\xbc\x03\x87\xe6\x5c\xce\xb7\xdc\x65\x2c\x85\x41\x61\x66\xdb\xfa\xf6\x1c\xc5\xd2\x24\xfb\x71\x5b\xfa\x31\x5a\x71\x09\x12\xc9\xdd\x21\x56\xb8\x40\x85\x22\x46\x7b\x60\x09\x58\x0e\x38\x80\x12\xad\x65\xcc\x1c\x46\xdd\x35\x6d\xa4\x0a\x01\x75\x43\xd6\xf3\xe5\xc1\xf5\x1b\x88\x04\x86\x65\x06\x29\x51\x77\x1a\x88\x00\xfc\x83\x69\x63\x83\x7f\xaf\xbd\x88\x86\xb2\xb0\x33\x3a\x34\xd8\x54\x2f\x79\x79\xf8\xd0\x79\x1c\xa3\xd6\x8b\x9c\xf7\x51\xcf\xa5\xe4\x48\x44\xdf\x69\x2d\x6f\x8f\xd1\x6a\x21\xb7\x27\xc0\xb2\x8e\x7a\x88\x50\x38\x3d\x58\xa7\x46\xa2\x5c\xdc\x09\xb9\x12\xb3\xda\xf7\x6a\xba\xcf\x71\x8c\x99\xb9\x66\x26\x69\x15\x18\x5d\x33\xfa\xe3\xad\x5c\xbf\x61\x12\x14\x57\x8e\xe8\x27\xd9\x4a\x16\xfa\x3b\x96\xac\x7b\xf1\x73\x2e\xc2\x33\x74\xaf\xda\x2d\x4b\x8d\x81\xcb\x73\x26\x5a\x97\x57\xc5\x68\x57\x69\x6c\x5c\x4f\x88\xa0\xed\x24\x98\xce\xbb\x4b\x62\xbd\x0d\x5b\x71\x2b\x46\x8e\xba\xb1\x65\x8b\x3f\x9c\xff\xb6\x68\x5d\x10\x8f\xed\x0b\x58\x20\xbe\x96\x63\xfb\xae\x65\x00\x93\x6b\x75\x4e\x83\x2a\x65\xc2\xc9\xe9\x83\x94\x77\xbd\x34\x25\xaf\x8a\xdb\x55\x1e\x32\xa2\xb8\x20\xde\xe8\x0e\x48\x7e\x4d\x21\x34\x61\x06\x3e\x15\x38\x47\xef\xbf\x58\xa4\x01\x11\x14\xe6\x98\x90\x07\x26\x73\x65\x3d\x19\x52\x68\x86\xc2\xa9\xe9\xf3\xf5\xd6\x54\xe4\x0e\xa7\xfe\x19\x8e\x5f\x53\xc4\x1d\x0f\x02\x36\x28\xff\x6e\xdc\xb0\x51\xe7\x32\x51\x32\xa1\xb2\xc0\x4e\x75\x82\xb7\xca\x96\xc3\xd6\x26\xbb\x01\x3e\xdd\x07\xdf\xd5\x5b\xbe\x5c\x10\xc6\x91\x7e\x1f\xe2\xf1\xfa\xcb\x04\xbb\xe8\xd6\xdd\xe2\xf1\xa9\xaa\x79\x40\x01\x06\xde\x0b\x39\xa0\xcd\xe8\x5f\xd8\xce\xbe\x26\xa6\x99\x79\x9c\x00\xb5\x6b\x3b\x7e\x20\x4e\xb5\x5e\xda\xfe\xa2\x5e\x54\x4a\xaa\x29\xab\xb3\xe3\x07\xe6\xf3\x16\xd7\xd3\x8f\x9d\xb3\x08\x7f\x16\x03\xd3\x26\xc6\x64\x33\x85\xf7\x7b\xcd\xfe\x14\x93\xea\x6c\xf2\xac\x3a\x1b\x66\x41\x20\x7b\x3f\xbc\x7f\x93\xeb\xf1\x2a\xc6\xab\x10\x14\x31\xc9\x72\x9d\x73\x9f\x0c\xe4\x1c\x32\xa9\x35\x9b\x73\xf4\x9a\xc6\xea\x73\x62\x9d\xbc\x47\x98\xb7\xdc\xfc\xd2\xa5\x73\x1a\x9d\x09\xa7\xd1\xed\x79\xe9\x55\xeb\x3e\x05\x19\x27\x48\x73\x8e\xd4\xd7\x70\x76\xd1\xec\x3b\x38\x65\x86\xa5\xf8\x1c\x59\x5f\xb3\xe5\x94\x94\x18\xfc\xc1\x2e\x6a\xbf\xfa\x31\x90\x74\x28\x92\xbd\x09\xd1\x56\x72\xca\x0a\xf2\x07\x30\x09\xd3\x85\x1b\x6f\xa5\xa8\x90\x13\xc3\x1e\xd0\x8f\x70\x86\x5b\x00\x5a\x79\x81\xf5\xa1\xaa\x8c\xb1\x90\x14\x81\x69\x50\x18\xcb\x07\x54\x48\x03\x42\x6f\xa8\xa1\x11\xb2\xae\xd6\x59\x93\x81\x2a\xeb\x68\x2e\x87\x94\x73\x0e\x52\x81\xd3\x86\xbd\x51\x44\x43\xbb\xec\xb9\xec\x36\x4a\xa5\xdd\x5a\xc2\xa0\x20\x53\xd4\xba\xdd\x3f\xbd\xad\x20\xeb\xa7\xb5\x18\x24\xc0\x69\x62\x7f\x66\xad\x90\x65\x1c\xe7\xaa\x38\xad\xcc\x8a\xae\x3e\xa2\xaf\x6a\x4f\x8d\x09\xca\x62\xa7\x00\x5c\xb2\x89\xe4\xba\x72\xd2\xfc\x7c\xd6\xd1\xb0\xdf\x8a\x0d\x58\xa9\x33\xe1\xf1\xeb\x7c\xcb\x41\x21\xdc\xb6\x19\xb9\x45\x18\xe2\xcd\xcb\x9a\x7d\x28\x1a\x28\xd7\x6f\x78\xbf\x27\x0a\x55\x0c\x02\x34\xb5\xf7\xe2\xbc\xfc\x00\xb5\x9f\x95\x4b\x6d\x3a\x41\x01\xe1\x8c\xce\x4a\x63\xd5\x6e\xc6\x18\xf4\xae\xdb\x1b\x0a\x89\xd5\x32\x0d\x1c\xc8\xd0\xc9\x95\x09\x1f\x1a\x14\x02\x89\xed\xd9\x5b\xa2\xb0\xee\x77\x57\xbc\x01\x61\xbc\x27\x44\x7f\xac\x52\xfd\x55\x5d\xef\xa8\x4a\x78\x9f\x89\xbe\xe7\xd7\xc1\x31\xe1\xfc\xc0\xee\x6d\x48\x7d\xdb\x65\x94\xb9\xf2\xf7\x84\xdc\x54\x29\x96\x90\xf2\x6d\x4b\xfd\xc6\xeb\xfb\xe3\x1a\xde\x67\x32\x90\xc7\x89\x3f\x46\x09\xa8\x61\x6a\x03\x22\x0a\xbf\x79\xbc\xab\x74\x7a\xb9\xdc\x99\xc5\xdd\x23\x94\x32\xaf\xc5\x3f\x85\xe7\x84\xfe\x73\x39\xba\xfd\xa5\x31\x59\xb8\x82\x75\x32\x21\xa4\xdb\xcf\xfe\x34\xe4\xf1\xaa\xdc\xfb\x3c\x6b\xfd\x88\x77\xec\xb2\xfe\x40\x95\xeb\x75\xce\xc2\x8a\x71\x0e\x42\x02\x97\x62\x89\x0a\xe2\x84\x88\x60\xe1\xca\x73\xdb\x57\xb7\xce\xbc\x1e\xc5\xeb\xa2\x16\xd8\xc7\xcc\xdd\xf5\xfb\x7a\x7c\x3c\x6e\x33\xdd\xf6\xde\x5d\xce\x67\x83\xd4\x39\xab\xb3\x72\xd7\xe3\xdd\x85\x75\x68\x0d\x4c\x5f\xa5\x50\xc5\x94\xd6\x10\xf7\x88\xdb\x9a\x74\xe3\x63\x6a\x6b\x3d\x75\x1f\x6d\x85\x14\x7c\x84\x6f\x66\xd2\x65\x84\x3d\x25\x2f\x19\x08\xcd\x83\x8f\xf0\xb6\x9f\x50\x3a\x69\x7a\x67\x10\xae\x2c\xd1\xc6\xa9\xb7\x61\x90\x9b\x7e\x0c\x83\xea\x47\x48\xbd\xdd\x13\x2c\xdd\xc0\x03\x16\x84\xe8\x59\xdd\x52\x33\x2b\xed\xfe\xf8\x27\x0d\xb8\x6c\xa3\x9e\xb8\x0d\xff\x06\x83\x83\xd1\x26\xb3\xd3\x9d\x7b\x56\x40\xd3\x14\xd0\xfe\x35\xc3\x06\x79\xf5\xfe\xc0\xc9\x49\xe4\xcb\xc3\x9a\xf5\x45\xfa\x06\xbb\x24\x72\xfb\x53\x49\x87\xf4\x38\x1a\xf5\xc5\x4e\xe6\x50\x48\x48\xa5\xc2\xc2\xbf\xd3\x10\x13\x01\x73\x84\x94\x50\xf4\x41\x10\xd3\x3e\xd9\xf4\x5f\xe1\x3e\x3b\xb7\x70\x8e\xb0\x60\x9c\xcb\x15\x52\x98\x3f\x02\x29\x5d\x47\x3b\x7d\x33\xcd\x28\x1e\xdb\x4f\x96\xf2\x4e\x43\x42\x1e\x10\x54\x1e\x6a\x57\xfc\x70\x7b\xfb\xe9\x03\x12\x8a\x6a\x17\xa0\xdc\xe1\x5a\x99\x65\xeb\x3e\x90\x2d\x22\xc8\x7a\x13\xb0\x52\x24\xd3\x40\x40\x33\xb1\xe4\x08\x89\xbf\x7a\x87\x8f\x97\x7d\x89\x4f\x4b\xfc\x2b\x9a\x44\xd2\xdd\xf2\x6d\xa9\x9f\xa3\xa9\xa4\xb0\x95\xfa\xb2\x6b\x69\x7e\xcf\x3a\xa9\xb1\xac\x9d\x61\xa3\xd8\x2d\xba\xcb\xcc\xbf\x48\xd1\xa4\x21\x26\x4e\x46\x65\xcf\x3a\xcb\x6b\x33\xcf\xef\xbf\x4e\x9d\xd5\x4d\x27\xf6\x2e\x14\xb4\x61\xde\x55\x85\x9e\x5d\x9a\xc2\x24\x9d\x52\xa7\xdb\x50\x58\xf3\x42\xdf\x43\x47\xe9\x86\x62\x54\x71\x6e\x1a\x34\xe1\x30\x3d\xed\xa2\x6b\xcc\xe4\xbf\x36\x78\x0e\x9b\xe1\x5f\x4a\xa1\xd1\x53\x40\x04\xc8\xdc\x2c\x25\x13\x4b\x90\x0a\x98\x88\xa5\x7b\xcd\xc8\x89\xb4\xb0\x64\xaf\x80\x99\xe2\xcc\x98\xa4\x3c\x2e\xfa\x55\x21\x71\x17\x95\xca\xa2\x15\x02\x9c\x90\xfa\x30\x50\x96\xe5\xce\x20\xe8\x01\x81\xb7\x68\xb3\x58\xd2\x5e\x8d\x17\xfa\xfd\x81\xfe\x5f\x1f\xd8\x08\x88\x42\x24\xa5\x4a\x1c\x44\xc3\xf5\x3f\xff\x75\x7d\x73\xdb\x87\x86\xa2\x4b\xc2\xe5\xcf\x4b\x48\x08\xd9\x0f\x89\x6e\xec\x72\xa4\xc4\xa9\x9c\x52\x5d\x3e\x6a\xf7\xfb\xa1\x5f\x1c\x3b\x40\xea\xff\xf0\xcd\x98\xcf\x94\x9c\x2e\xda\xef\x89\x06\x17\xc2\x6f\x6a\xba\x0f\x05\xd6\xe7\x62\xd1\x81\x0b\xf6\x5e\x66\x55\x78\x08\xf0\x03\x50\xb9\x12\xfe\x55\x5b\x7f\x57\x97\xed\x19\x46\xb1\xe5\xb2\xa7\x12\x1f\xc8\x61\x1c\x49\x96\x65\x02\x66\x76\x8a\x95\xa4\x67\x39\x6d\xe5\x8e\x81\x09\x23\x01\xca\x7d\x5b\x59\x56\x9f\x5d\x68\x64\x07\x62\xdd\x31\xed\x5e\x05\x21\x98\x96\x2d\x7e\x8d\xa9\x6a\xe6\xf5\x88\xba\xea\x84\x3a\xa4\x94\xfb\xd9\xd1\x5a\x53\xbb\xa9\xa3\xfd\x4e\x81\x90\x26\x41\xd5\xee\x2b\x1a\x50\x50\x55\xcb\xd3\xe1\x3a\x3d\xfa\xe3\xf3\xc1\xed\x1b\x6c\xf9\x30\xd0\x78\x79\xbe\x6c\xb6\xb0\xce\x49\xbb\x3d\x16\x5c\x55\x9f\xd6\x16\xb7\x6f\xff\xbb\x37\x59\xe8\xee\xef\x32\xbb\x46\x52\xa4\x9d\x46\x8a\xb5\xe6\x88\x98\x88\x18\x79\xe7\xe2\x1d\x73\x57\x8a\x0b\x83\xd1\x5c\xfb\xb9\x21\x96\x15\xbd\x10\xcd\x06\xe3\x8a\x53\x55\x4f\xb1\x6a\xa1\xe4\xc2\xfe\x7f\xba\xf8\x5f\x00\x00\x00\xff\xff\x85\xeb\xb6\x3f\xf1\x5d\x00\x00")

func modelModelSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_modelModelSwaggerJson,
		"model/model.swagger.json",
	)
}

func modelModelSwaggerJson() (*asset, error) {
	bytes, err := modelModelSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/model.swagger.json", size: 24049, mode: os.FileMode(420), modTime: time.Unix(1511950565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model/model.swagger.json": modelModelSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"model": &bintree{nil, map[string]*bintree{
		"model.swagger.json": &bintree{modelModelSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

