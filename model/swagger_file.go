// Code generated by go-bindata.
// sources:
// model/model.swagger.json
// DO NOT EDIT!

package model

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelModelSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdf\x6f\xdb\x38\xf2\x7f\xcf\x5f\x31\xd0\xf7\xfb\xb0\x0b\xb4\x4d\xaf\x77\xb8\x87\xbe\x65\xb7\xe9\xb6\x0f\x8b\xed\x35\xb9\x7b\xb9\x2b\x0c\x5a\x1c\x5b\xdc\x50\xa4\x42\x52\xf6\x06\x45\xfe\xf7\x03\x49\xfd\x36\x25\x4b\xb6\x63\x3b\xb7\x59\x60\xd1\x84\xe2\x50\xc3\x99\x0f\xe7\x27\x95\xef\x17\x00\x91\x5e\x93\xe5\x12\x55\xf4\x1e\xa2\x77\x6f\xde\x46\xaf\xec\x18\x13\x0b\x19\xbd\x07\xfb\x1c\x20\x32\xcc\x70\xb4\xcf\x53\x49\x91\xbf\xc9\x94\x34\xd2\xcd\x03\x88\x56\xa8\x34\x93\xc2\x3e\x2d\x7e\x04\x21\x0d\x68\x34\xd1\x05\xc0\xa3\x5b\x4d\xc7\x09\xa6\xa8\xa3\xf7\xf0\x6f\x4f\x94\x18\x93\x95\x0b\xd8\x9f\xb5\x9d\xfb\xcd\xcd\x8d\xa5\xd0\x79\x6b\x32\xc9\x32\xce\x62\x62\x98\x14\x97\xbf\x6b\x29\xea\xb9\x99\x92\x34\x8f\x47\xce\x25\x26\xd1\xf5\x96\x2e\x57\x7f\xb9\x5c\x70\xb9\xae\x87\xec\x1c\xa9\x4d\xe3\x77\x80\x48\x66\xa8\xdc\x6a\x9f\xa9\xdd\xe1\xcf\x0a\x89\xc1\x5f\x14\xc9\x92\x82\x7d\x37\x4b\xa1\xce\xa4\xd0\xa8\x5b\xc4\x00\xd1\xbb\xb7\x6f\x3b\x43\x00\x11\x45\x1d\x2b\x96\x99\x42\x6a\x8d\x85\xdc\x63\x27\x2c\xb2\x41\x06\x10\xfd\xbf\xc2\x85\xa5\xf8\xbf\x4b\x8a\x0b\x26\x98\x5d\x41\x5f\x3a\x9d\x34\x18\xfb\x5a\x30\x13\xb5\xc8\x1f\x2f\x42\x3f\x3f\x36\x36\x91\x11\x45\x52\x34\xa8\x6a\x71\xfa\xff\x3a\xec\x0b\x92\x3a\x2c\xcc\x25\x7d\xe8\xf2\xce\x44\xdf\x13\x85\xf7\x39\x53\x68\xa5\x68\x54\x8e\x07\xdf\xf3\x7d\x8e\xda\x8c\xd9\xf2\xb7\xc6\x96\x0d\x59\x76\x37\x1b\x7d\xe4\x72\x7d\x83\x6a\xc5\xe2\x86\x04\xbf\x5d\x34\x97\x29\xa4\x56\x63\xe8\x52\x1b\x85\x24\x6d\x42\x69\x89\xc3\x48\xba\x71\x14\xd7\x2b\x14\x46\x1f\x0c\x4a\x3f\x78\x3e\x98\x58\x42\xb5\xce\x8f\x07\xc1\x97\x93\xb2\xe3\xf6\xa9\x61\xb5\xb4\x6f\x7a\x63\xc5\x3a\x63\x34\x8c\xaf\xfb\x1c\xd5\x10\xc0\x16\x84\xeb\x2e\xc2\xcc\x43\xe6\x96\xd7\x46\x31\xb1\x6c\x6e\xe2\xf1\xd5\x68\xa6\x94\x4c\x67\x1a\xef\x9f\x8c\xab\xce\xd3\x85\x54\x29\xb1\x30\x8a\x72\x26\xcc\xdf\xff\x16\x1d\x0f\xd0\xdf\x0b\x05\x3c\x4e\xc1\xf4\x2f\x68\x1c\x4e\x6e\x0c\x31\x78\x5e\xf6\xb1\xc5\xda\xb1\x2c\xe4\x20\x88\xad\x3f\x9a\x66\x24\x07\x20\x7c\x24\x30\x5c\xc6\x32\x4d\x99\x99\xe6\x32\x3d\xc9\x79\xa1\xa1\xe1\x33\xbe\x28\x19\xa3\xd6\x48\x5f\x50\xb1\x2b\x2a\x28\x72\xf2\x30\x09\x14\x57\x94\x7e\x70\x44\x67\x05\x8b\x2b\x4a\x6f\x0c\x59\xfe\x0f\xda\x87\x11\x2e\xee\xe4\xe1\x5c\x89\x89\x42\x05\xa7\x0d\xe8\x6a\x70\x33\xb1\x92\x77\x38\x15\xdd\x9f\x1d\xd5\xc7\x5c\xc4\x0e\xa1\x2f\x30\x7f\x81\x79\x2d\xfd\x36\x38\xce\x0c\xef\xda\xb2\x33\x15\xee\x6e\x0f\x2f\x28\x7f\x41\xf9\xa6\xf4\xcf\x0a\xd7\xfa\xf2\xbb\xfb\xd7\x8d\x90\x35\x69\xc7\xb2\xdb\xf2\x9b\x2b\x4b\x50\x82\x2a\xe7\x67\x16\xd4\x76\xb9\xfb\x53\x02\xbf\xd4\xee\x79\x70\x63\x58\x8a\x32\x37\xb3\x54\x1f\xbe\x64\xc0\x84\xc1\x25\xaa\xfe\x9a\x01\x13\xe6\xaf\xef\x4e\x92\x0f\x6c\x1e\xb5\x58\xa6\x19\x47\x33\xcd\xaf\xfc\x5c\x10\x39\x4c\x5f\xff\x61\x50\x09\xc2\xf9\x99\xe5\x0c\x3d\x4c\xbe\x1c\xbe\x93\x73\x73\x72\x1f\xd8\x0b\x8d\x73\x71\x89\x2b\xc2\xf3\xc9\xa1\xde\xbf\x2c\xd1\x4b\xbc\x77\x5e\x27\xef\xe4\x58\xbf\xa2\xb4\x84\x7b\x03\x21\x47\x86\x7a\xd5\x6f\x6c\xb0\x57\x77\xfc\x82\x25\xe0\x82\xcd\x4c\xa1\x46\x61\x48\x81\xc8\xea\x40\x94\x5a\x91\xf3\xdf\x31\xae\xe3\xbd\x28\x53\xf6\x60\x18\xd6\xc1\x7b\x39\xbf\x75\x02\xfa\x34\xdb\x04\x9f\x36\xc4\xe4\x1b\x67\x67\x0c\x25\xc5\x0c\x05\x45\x11\x77\x79\x69\xd0\x13\xa5\x48\x1b\x04\x11\x33\x98\x76\xe7\x8f\x2c\x26\x3e\x06\xed\xcb\x08\x14\xec\x21\xd7\xf2\xb0\xed\x20\xa0\xae\x91\x83\x71\x56\x9b\x49\x51\x04\xf9\xc1\x55\x63\x49\x71\xc6\x65\xdc\x45\xcc\x68\xb6\x62\xc2\x39\xaa\x29\x7b\xba\xe8\x2c\x52\x77\xe5\x07\xc5\x0e\xb1\x6b\x93\x6a\x20\x20\x70\x0d\xce\x47\xc3\x9a\x99\x04\x08\xe8\x0c\x63\xb6\x60\x31\x78\x21\x05\x15\xba\x59\x93\x3b\x8d\x1e\x5d\x91\x79\xb6\x01\xda\xa1\x16\x5a\x3b\x18\x6e\xf6\xcf\xce\x59\x95\x1b\x02\x6f\x68\xd0\x09\xc1\xeb\x30\xac\xad\x81\xd2\xd2\x69\xd4\xb6\x28\x58\xd9\x91\x9c\xa8\xe5\x84\xb3\xfb\xe9\xf6\xf6\xcb\x57\xbc\xff\x40\x4c\x9e\x3e\x0f\x65\xf7\xeb\x0b\x08\xa5\x56\xe5\xa5\x00\x81\x89\x55\xc9\x77\x50\xf5\x67\xa0\xec\x2a\x5a\xdc\xc9\xde\xfe\x56\x51\x87\x25\xcf\xa5\xce\xd5\x14\x53\xfe\x13\x97\xf3\x01\x2c\x50\xcc\x8e\xe5\x32\xcf\x18\x81\x21\xcc\x75\x1c\x45\x19\x63\xf8\x28\x03\x8c\x04\x93\x20\xb8\x3b\x11\x83\x50\x2c\x02\xf1\xd3\x60\xb1\x4a\x46\x0f\x29\x25\xbf\x23\x50\x68\x72\x25\xb4\x13\x83\x97\xd3\xe7\x0f\x20\x17\xee\x77\x6f\xac\x69\xbf\x91\xee\x2b\xd3\x3d\x13\x31\xb5\x93\x3e\x1b\x20\x1d\x24\xb6\xea\x0f\x2a\xeb\x53\xbc\x87\x84\xe6\x5c\xce\x77\xdc\x65\x2c\x85\x41\x61\x66\xbb\xc6\xf6\x1c\xc5\xd2\x24\x87\x09\x5b\xfa\x31\x5a\x49\x09\x12\xc9\xdd\x21\x56\xb8\x40\x85\x22\x46\x7b\x60\x09\x58\x09\x38\x80\x12\xad\x65\xcc\x1c\x46\xdd\x98\x36\x52\x85\x80\xba\xa5\x7c\xf1\xfc\xe0\xfa\x27\xc8\x04\x86\x75\x06\x29\x51\x77\x1a\x88\x00\xfc\x83\x69\xc3\xc4\xb2\xb0\x5e\x44\x43\x59\xa1\x1d\x9d\x1a\x6c\x2b\x7c\x3e\x3f\x7c\xe8\x3c\x8e\x51\xeb\x45\xce\xfb\xa8\xe7\x52\x72\x24\xa2\xef\xb4\x96\x8f\xc7\x58\xb5\x50\xd8\x13\x10\x59\xc7\x3c\x44\x28\x9c\x1d\xac\x4b\x23\x51\x2e\xee\x84\x5c\x8b\x59\x1d\x7b\x35\xc3\xe7\x38\xc6\xcc\x5c\x33\x93\xb4\x3a\x05\xee\x9a\xf4\xc3\xad\xdc\x7c\x60\x12\x14\x57\x8e\xe8\x27\xd9\x2a\x61\xf9\x27\x96\xac\x3b\xf8\x35\x17\xe1\x15\xba\xa3\x76\xcb\x52\x63\x60\x78\xce\x44\x6b\x78\x5d\xcc\x76\x2d\x83\xc6\x78\x42\x04\xe5\xad\x11\x9d\x77\x59\x62\xbd\x37\x2f\xe2\x56\x8e\x1c\x75\x73\xcb\x96\x7c\x38\xff\x6d\xd1\x1a\x10\x0f\xed\x01\x2c\x10\x5f\xeb\xb1\xfd\xd4\x0a\x80\xc9\x8d\x86\x85\x41\x95\x32\xe1\xf4\xf4\x49\xca\xbb\x5e\x9a\x52\x56\xc5\xe3\xaa\x3a\x16\x51\x5c\x10\xef\x74\x07\x34\xbf\x61\x10\x9a\x30\x03\x5f\x7d\x9d\xa3\x8f\x5f\x2c\xd2\x80\x08\x0a\x73\x4c\xc8\x8a\xc9\x5c\xd9\x48\x86\x14\x96\xa1\x08\x6a\xfa\x62\xbd\x0d\x13\xb9\xc7\xa9\x7f\x82\xe3\xd7\x54\x71\x27\x82\x80\x2d\xc6\xbf\x9b\x37\x6c\xb5\xb9\x4c\x94\x42\xa8\x3c\xb0\x33\x9d\xe0\xbd\xb2\x95\xb0\xf5\xc9\x6e\x82\x2f\xf7\xc1\x0f\xf5\x96\x2f\x17\x84\x71\xa4\x3f\x86\x64\xbc\x79\xcd\x7d\x1f\xdb\xba\x5f\x3e\x3e\xd5\x34\x0f\x18\xc0\xc0\x17\x0b\x47\xf4\x19\xfd\x8c\xed\x1d\x6b\x62\x9a\x99\x87\x09\x50\xbb\xb6\xf3\x07\xf2\x54\x1b\xa5\x1d\x2e\xeb\x45\xa5\xa4\x9a\xc2\x9d\x9d\x3f\xb0\x9e\xf7\xb8\x9e\x7e\xec\x9a\x45\xfa\xb3\x18\x58\x36\x31\x26\x9b\x29\xbc\x3f\x68\xf5\xa7\x58\x54\x67\x93\x57\xd5\xd9\xb0\x08\xcc\x94\xc0\xd2\x75\x20\xc6\x1b\x18\x6f\x40\x50\xc4\x24\xcb\x75\xce\x7d\x29\x90\x73\xc8\xa4\xd6\x6c\xce\xd1\xdb\x19\x6b\xcd\x89\x0d\xf1\x1e\x60\xde\x0a\xf2\xcb\x80\xce\xd9\x73\x26\x9c\x3d\xb7\xa7\xa5\xd7\xa8\xfb\x02\x64\x9c\x20\xcd\x39\x52\xff\xd1\xc7\x3e\x76\x7d\x8f\x90\xcc\xb0\x14\x9f\xa2\xe6\x6b\x76\x5c\x92\x12\x83\xaf\x2d\x53\xe3\xea\x06\x45\xbd\x36\x21\xda\x8a\x5f\x59\x6d\xbc\x06\x93\x30\x5d\x44\xe2\x56\x15\x0a\x39\x31\x6c\x85\x7e\x86\xf3\xbd\x02\xd0\x0a\x1d\x6c\x18\x54\x15\x7d\x85\xa4\x08\x4c\x83\xc2\x58\xae\x50\x21\x0d\x68\xae\x61\x49\x46\x28\xac\xe2\xb3\x26\x03\x55\xb6\xc2\x5c\x19\x28\xe7\x1c\xa4\x02\x67\xd0\x7a\x13\x81\x86\x81\x38\x70\xe7\x6c\x94\x55\xba\xb5\x84\x41\x25\xa7\xa8\x75\xfb\x2e\xe3\x30\xee\xfa\x15\x59\xbf\xad\x25\x20\x01\xce\x98\xfa\x83\x67\x95\x2c\xe3\x38\x57\xc5\x91\x63\x56\x75\xf5\x39\x7b\x55\x07\x5b\x4c\x50\x16\xbb\x53\xec\xea\x45\x24\xd7\x55\x9c\xe5\xd7\xb3\xb1\x82\xfd\xad\xd8\x80\xd5\x3a\x13\x1e\x84\x2e\x3c\x1c\x54\xc2\x6d\x5b\x90\x3b\x64\x12\xde\x43\x6c\x98\xf8\xe2\x32\xd3\xe6\x03\x1f\xba\x44\xa1\xa2\x7f\x80\xa6\x0e\x40\x5c\xa0\x1e\xa0\xf6\xab\x72\xa9\x4d\x27\xae\x27\x9c\xd1\x59\xe9\x6f\xda\x5d\xfe\xc1\x00\xb9\xbd\xa1\x90\x5a\xad\xd0\xc0\x81\x0c\x9d\x5e\x99\xf0\xd1\x7d\xa1\x10\x9b\xe3\xc3\x12\x85\x8d\xa0\xbb\xea\x0d\x28\xe3\x23\x21\xfa\x73\x55\xad\xaf\x5a\x73\x27\xb5\xa4\x87\xac\xd5\x3d\x91\x21\xed\xd4\x44\x0e\x54\xbb\x05\xbb\x56\x59\xb3\xfe\x48\xc8\x4d\x55\xea\x08\x59\xd0\xb6\xea\x6e\xbc\xd1\x3e\xad\x0b\x7c\x1a\x09\xef\x92\x07\x4c\x92\x72\xc3\xe9\x05\xe4\x1c\xfe\x1e\x6f\x5f\x11\xf7\x8a\xaa\xb3\x8a\x7b\x46\x28\x65\xde\x9e\x7e\x09\xaf\x09\xfd\x27\x64\xf4\x5d\x92\xc6\x62\xe1\x76\xd0\xd9\xe4\x63\x6e\x3f\x87\xb3\x55\xa7\x6b\x19\x1f\x27\xb6\x73\xe2\xb2\x9e\xb9\x2a\x9c\x3a\xb7\xbd\x66\x9c\x83\x90\xc0\xa5\x58\xa2\x82\x38\x21\x22\xd8\x05\xf2\xd2\xf6\xad\xa2\x17\x59\x8f\x92\x75\xd1\x58\xeb\x13\xe6\xfe\x46\x7a\x33\xd9\x1c\xb7\x99\xee\xc7\xd9\xfb\x9c\xcf\x06\xa9\x0b\x1b\x67\xe5\xae\xc7\x3b\xee\x4d\x68\x0d\x2c\xef\xea\x91\x44\x18\xcb\xc5\xc4\x57\xdc\x96\xa5\x4c\xb1\xdc\xfa\x9a\xda\xe5\x4e\xdd\x47\xdb\x20\x05\x5f\xe1\x6f\x06\xe9\x32\x61\x9d\x52\xe4\x0b\x64\xba\xc1\x57\x78\x07\x4e\x28\x9d\xb4\xbc\x73\x08\x57\x96\x68\xeb\xd2\xbb\x08\xc8\x2d\x3f\x46\x40\xf5\x2b\xa4\xde\xed\x0d\x96\x6e\xe0\x05\x0b\x42\xf4\xac\xbe\x9f\x32\x2b\xfd\xfe\xf8\x37\x0d\xc4\x5d\xa3\xde\xb8\x8b\xfc\x06\xc3\xf4\xd1\x2e\xb3\xf7\x33\xf2\xb3\x28\x66\x86\x4f\xea\xb3\xf4\x35\xbb\x57\xd9\xfa\x4b\x04\xc7\xf4\x5f\x8d\xd6\x4f\xa7\x22\x24\x24\xa4\x52\x61\x11\x2d\x68\x88\x89\x80\x39\x42\x4a\x28\xfa\x90\x9a\x69\x5f\x44\xf8\x8f\x70\x3f\xbb\x20\x63\x8e\xb0\x60\x9c\xcb\x35\x52\x98\x3f\x00\x29\x03\x11\xbb\x7c\xb3\x7c\x24\x1e\xda\x6f\x96\xf2\x4e\x43\x42\x56\x08\x2a\x0f\xdd\x24\xfb\x74\x7b\xfb\xe5\x13\x12\x8a\x6a\x1f\x98\xdc\xe1\x46\x05\x7c\xe7\x16\xfd\x0e\xf9\x48\xbd\x09\x58\x2b\x92\x69\x20\xa0\x99\x58\x72\x84\xc4\x8f\xde\xe1\xc3\x65\x5f\x41\xcb\x12\xff\x8a\x26\x91\x74\xbf\x3a\x4a\xea\xd7\x68\x3a\x43\x6c\x95\x34\x2c\x2f\xcd\xdf\xb3\x4e\xc9\x23\x6b\x57\x4e\x28\x76\xfb\xa1\x32\xf3\x77\xdc\x9b\x34\xc4\xc4\xc9\xa8\xaa\x48\x87\xbd\xb6\xf0\xfc\xfe\xeb\x92\x48\x7d\x1f\xc0\x3e\x85\x82\x36\x2c\xbb\xaa\x06\xbf\xcf\x7d\x1d\x49\xa7\xb4\x50\xb6\xf4\x3c\xbc\xd2\x0f\x70\xd9\x6f\x4b\x9f\xa0\x38\x37\x0d\x9a\x70\xd2\x97\x76\xd1\x35\x66\xf1\x5f\x1b\x32\x87\xed\xf0\x2f\xb5\xd0\x68\xf7\x12\x01\x32\x37\x4b\xc9\xc4\x12\xa4\x02\x26\x62\xe9\xfe\x56\x94\x53\x69\xe1\xc7\x5e\x01\x33\xc5\x99\xb1\xa9\x7c\x21\xb9\x57\x85\xc6\x5d\x8e\x23\x8b\x2e\x35\x38\x25\xf5\x61\xa0\xec\x98\xbc\x80\xa0\x07\x04\xbe\x09\x3c\x8b\x25\xed\xb5\x78\xa1\x6f\x3c\xfb\xbf\xf0\xdc\x0a\x88\x42\x25\xa5\x49\x1c\x44\xc3\xf5\x3f\xfe\x79\x7d\x73\xdb\x87\x86\xa2\x81\xed\xea\xa2\x25\x24\x84\xec\x87\x44\x37\x12\x3e\x51\x2d\x4d\x4e\x69\xfc\x9d\xf4\x62\xf2\xb1\xbf\xe9\x39\x42\x49\xf7\x9c\xee\xc9\x5d\x95\xd7\x9b\x89\x06\x97\xd5\x6d\xbb\xd4\x1c\xca\xb5\x5e\x2a\xf9\xbb\xb4\x44\xbd\xe0\xab\x7c\x0d\xe0\x35\x50\xb9\x16\xfe\x2f\x17\xfa\xa7\xba\xec\x62\x1b\xc5\x96\xcb\x9e\x5e\x67\x20\x37\x3d\x91\x42\xca\xc4\x7a\x76\x2e\x65\xfe\x71\xb8\x2f\xd9\x06\x26\x8c\x04\x28\x99\xb7\x0a\xa9\x7e\x76\x99\x86\x9d\x88\xf5\xdd\x50\x77\xe9\x9d\x60\x5a\x5e\x66\x6a\x2c\x55\x4b\xa0\x47\x5f\xd5\x9d\x8f\x63\xaa\xaa\x5f\x1c\x2d\x9e\xda\xbd\xef\xf6\xed\x69\x21\x4d\x82\xaa\x7d\x87\x62\xc0\x54\x94\xb7\x3b\x8e\xd7\x0f\xef\x4d\x76\x07\x37\x5f\x90\x54\x39\x52\xe3\xbb\xec\xb2\x23\xed\xb2\xee\xd6\x35\x40\x70\xad\x4f\x5a\xbb\xaf\x9e\xdd\xef\xdf\x88\xd6\xdd\xbf\x23\xe9\xee\xcb\x21\xed\x34\x9b\x37\x1a\xc8\x31\x11\x31\xf2\xce\xe0\x1d\x73\x23\xc5\xc0\x60\x66\xd4\x7e\x6f\x48\x62\x45\xbf\xb8\x79\x8f\xb2\x12\x54\x75\x75\x52\xb5\x20\x72\x61\xff\x7f\xbc\xf8\x6f\x00\x00\x00\xff\xff\xfc\xd5\xcc\xc2\x72\x59\x00\x00")

func modelModelSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_modelModelSwaggerJson,
		"model/model.swagger.json",
	)
}

func modelModelSwaggerJson() (*asset, error) {
	bytes, err := modelModelSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/model.swagger.json", size: 22898, mode: os.FileMode(420), modTime: time.Unix(1511449403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model/model.swagger.json": modelModelSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"model": &bintree{nil, map[string]*bintree{
		"model.swagger.json": &bintree{modelModelSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

