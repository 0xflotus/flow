// Code generated by go-bindata.
// sources:
// model/model.swagger.json
// DO NOT EDIT!

package model

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelModelSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5b\x6f\x1c\xb7\x15\x7e\xd7\xaf\x38\xd8\xf6\x21\x01\x6c\xcb\x75\x8b\x3e\xf8\x4d\x89\xe5\x0b\xd0\x20\xae\xa5\xf6\xa5\x31\x16\x5c\xf2\xec\x0e\x23\x0e\x39\x22\x39\xda\x2c\x0c\xfd\xf7\x82\xe4\xdc\x97\x33\x3b\x7b\x91\x76\x15\x2b\x40\x60\x89\xc3\xc3\x21\xcf\xf9\x78\xee\xa3\x6f\x67\x00\x13\xb3\x24\x8b\x05\xea\xc9\x5b\x98\xbc\x79\xf5\x7a\xf2\xc2\x8d\x71\x39\x57\x93\xb7\xe0\x9e\x03\x4c\x2c\xb7\x02\xdd\xf3\x54\x31\x14\xaf\x32\xad\xac\xf2\xf3\x00\x26\x77\xa8\x0d\x57\xd2\x3d\x2d\x7e\x04\xa9\x2c\x18\xb4\x93\x33\x80\x7b\xbf\x9a\xa1\x09\xa6\x68\x26\x6f\xe1\x7f\x81\x28\xb1\x36\x2b\x17\x70\x3f\x1b\x37\xf7\xab\x9f\x4b\x95\x34\x79\x6b\x32\xc9\x32\xc1\x29\xb1\x5c\xc9\xf3\xdf\x8d\x92\xf5\xdc\x4c\x2b\x96\xd3\x91\x73\x89\x4d\x4c\x7d\xa4\xf3\xbb\xbf\x9d\xcf\x85\x5a\xd6\x43\x6e\x8e\x32\xb6\xf1\x3b\xc0\x44\x65\xa8\xfd\x6a\x9f\x98\x3b\xe1\xcf\x1a\x89\xc5\x0f\x9a\x64\x49\xb1\x7d\x3f\x4b\xa3\xc9\x94\x34\x68\x5a\xc4\x00\x93\x37\xaf\x5f\x77\x86\x00\x26\x0c\x0d\xd5\x3c\xb3\x05\xd7\x1a\x0b\xf9\xc7\x9e\x59\x64\x8d\x0c\x60\xf2\x57\x8d\x73\x47\xf1\x97\x73\x86\x73\x2e\xb9\x5b\xc1\x9c\x7b\x99\x34\x36\xf6\xa5\xd8\xcc\xa4\x45\x7e\x7f\x16\xfb\xf9\xbe\x71\x88\x8c\x68\x92\xa2\x45\x5d\xb3\x33\xfc\xd7\xd9\xbe\x24\xa9\xc7\xc2\x4c\xb1\x55\x77\xef\x5c\xf6\x3d\xd1\x78\x9b\x73\x8d\x8e\x8b\x56\xe7\x78\xf0\x33\xdf\xe6\x68\xec\x98\x23\x7f\x6d\x1c\xd9\x92\x45\xf7\xb0\x93\xf7\x42\x2d\xaf\x50\xdf\x71\xda\xe0\xe0\xd7\xb3\xe6\x32\x05\xd7\x6a\x0c\x9d\x7f\x73\xff\x4c\x39\xbb\x6f\xa2\x69\x81\xc3\x60\xfa\x80\xd6\x6f\xfe\xca\x12\x8b\xa7\x05\xa7\xd6\xd6\x1e\x0b\x50\x05\x0f\xe3\x98\x72\xd7\x77\x3b\x4c\xd9\x55\xe6\x97\x35\x56\x73\xb9\x98\x1c\x01\x0c\xe7\x54\xa5\x29\xb7\xdb\x69\x98\x40\x72\x5a\x68\x68\x5c\xb1\xcf\x5a\x51\x34\x06\xd9\x33\x2a\x76\x45\x05\x43\x41\x56\x5b\x81\xe2\x82\xb1\x77\x9e\xe8\xa4\x60\x71\xc1\xd8\x95\x25\x8b\x3f\xa1\x7e\x78\xf1\x04\xac\x5f\x89\x89\x42\x04\x27\x62\xff\xce\xb9\xbc\x53\x37\xb8\x2d\xba\x3f\x79\xaa\xf7\xb9\xa4\x1e\xa1\xcf\x30\x7f\x86\x79\xcd\xfd\x36\x38\x4e\x0c\xef\xc6\x6d\x67\x5b\xb8\xfb\x33\x3c\xa3\xfc\x19\xe5\xeb\xdc\x3f\x29\x5c\x9b\xf3\x6f\xfe\x5f\x3f\x42\x96\xa4\xed\xcb\x6e\x8a\x6f\x2e\x1c\x41\x09\xaa\x5c\x9c\x98\x53\xdb\xdd\xdd\x77\x09\xfc\x52\xba\xa7\xb1\x1b\xcb\x53\x54\xb9\x9d\xa6\x26\xbe\x9f\xdb\x1c\xf5\xd0\x6d\x9c\x13\x61\xfa\x76\xc4\xa5\xc5\x05\xea\x2e\xf5\x5c\xe9\x94\xd8\x62\xc2\xdf\xdf\x1c\x25\x1e\x58\xbf\x6a\x54\xa5\x99\x40\xbb\x9d\x5d\xf9\xb9\x20\xf2\x98\xbe\xfc\xc3\xa2\x96\x44\x88\x13\x8b\x19\x7a\x36\xf9\x7c\xf9\x8e\xbe\x9b\xa3\xdb\xc0\x5e\x68\x9c\x8e\x49\xd4\x48\xd2\x6d\x2c\xe0\x95\xa7\xb8\xbc\x43\x69\xcd\xc1\xee\xe1\x0f\x61\x1f\x5c\x2e\xa0\x5a\xe7\xc7\xc3\xe5\x79\xfc\x6e\xbf\xab\x7b\x38\xd7\x2a\x9d\x1a\xbc\x3d\xbc\xd1\x29\xf6\xd3\x6b\x73\x72\x2e\xed\x3f\xff\x71\x14\xa3\x73\x47\x44\xbe\x75\xdc\xf2\x5f\x47\xf4\x1c\xbc\x9c\x16\x7c\x8f\xae\xb8\x2f\x18\x2b\x75\x77\x03\x21\xc7\xd3\xdb\xbb\xea\xe9\x7f\xf1\x39\xd2\x15\x15\x87\x03\xf7\x03\xab\xea\x6a\xc3\x3b\xe9\xec\x5d\x39\x5d\x55\x75\x1b\x9b\xaa\xeb\xaa\xd1\xca\x51\x01\x88\x4c\xa3\x41\x69\x49\xc1\x9e\x4a\x3c\x25\xfe\xd5\xec\x77\xa4\x75\x98\x38\xc9\xb4\x93\x93\xe5\x1d\xe6\x97\xf3\x5b\xe2\xe8\xbb\x43\xcd\x13\x1b\x4b\x6c\xbe\x26\xc8\x31\x94\x0c\x33\x94\x0c\x25\xed\xee\xa5\x41\x4f\xb4\x26\xed\xeb\x36\xe1\x16\xd3\xee\xfc\x91\x35\x88\xfb\x28\xbc\x47\xdc\xb7\x3d\xf8\x5a\xaa\xb5\x1d\x18\xd4\x35\x27\x30\xce\xd9\xe3\x4a\x16\xb9\x81\xe8\xaa\x54\x31\x9c\x0a\x45\xbb\x88\x19\xbd\x2d\x4a\x84\x40\xbd\xcd\x99\xce\x3a\x8b\xd4\xbd\x0f\x83\x6c\x07\xea\x8b\xd1\x06\x08\x48\x5c\x82\x77\xed\x61\xc9\x6d\x02\x04\x4c\x86\x94\xcf\x39\x85\xc0\xa4\xa8\x40\xd7\x53\xf9\xc7\x91\xa3\xaf\x4d\x4d\xd7\x40\x3b\xe4\xd1\xb4\x63\xe8\xa6\x3b\x73\xca\xa2\x5c\x63\x78\x43\x82\x9e\x09\x41\x86\x71\x69\x0d\x64\xa4\x8f\x23\xb6\x79\xb1\x95\x1d\xc9\x89\x5e\x6c\x71\x77\x3f\x5e\x5f\x7f\xfe\x82\xb7\xef\x88\xcd\xd3\xa7\x21\xec\x7e\x79\x01\x61\xcc\x89\xbc\x64\x20\x70\x79\x57\xee\x3b\x2a\xfa\x13\x10\x76\xe5\xbc\xec\xa4\x6f\x7f\xad\xa8\xe3\x9c\x17\xca\xe4\x7a\x1b\x55\xfe\x93\x50\xb3\x01\x2c\x30\xcc\x1e\xcb\x64\x9e\x30\x02\x63\x98\xeb\x18\x8a\xd2\xc7\x08\x5e\x06\x58\x05\x36\x41\x58\xf8\x5e\xb3\x21\x28\x16\x21\xcf\x71\xb0\x58\xe5\xb0\x0e\xc9\xa5\x70\x22\xd0\x68\x73\x2d\x8d\x67\x43\xe0\xd3\xa7\x77\xa0\xe6\xfe\xf7\xa0\xac\x59\xbf\x92\xee\xcb\xee\x3f\x11\x36\xb5\x23\x10\xe7\x20\x1d\xc4\xb7\xea\x77\x2a\xeb\x5b\xbc\x07\x87\x66\x42\xcd\x76\x3c\x25\x55\xd2\xa2\xb4\xd3\x5d\x7d\x7b\x81\x72\x61\x93\xc3\xb8\x2d\xfd\x18\xad\xb8\x04\x89\x12\xfe\x12\x6b\x9c\xa3\x46\x49\xd1\x5d\x58\x02\x8e\x03\x1e\xa0\xc4\x18\x45\xb9\xc7\xa8\x1f\x33\x56\xe9\x18\x50\x37\x64\x3d\x9f\x1e\x5c\xbf\x83\x48\x60\x58\x66\x90\x12\x7d\x63\x80\x48\xc0\x3f\xb8\xb1\x2e\xf8\x0f\xda\x8b\x18\x28\x0b\x3b\xa3\x43\x83\x4d\xf5\x92\xa7\x87\x0f\x93\x53\x8a\xc6\xcc\x73\xd1\x47\x3d\x53\x4a\x20\x91\x7d\xb7\xb5\x7c\x3c\x46\xab\xc5\xdc\x9e\x08\xcb\x3a\xea\x61\x82\xd2\xeb\xc1\x3a\x35\x32\xc9\xe5\x8d\x54\x4b\x39\xad\x7d\xaf\xa6\xfb\x4c\x29\x66\xf6\x92\xdb\xa4\x55\x60\xf4\xcd\xe8\xab\x6b\xb5\xfe\xc0\x26\x28\x2f\x3c\xd1\x4f\xaa\x95\x2c\x0c\x4f\x1c\x59\x77\xf0\x4b\x2e\xe3\x2b\x74\x47\xdd\x91\x95\xc1\xc8\xf0\x8c\xcb\xd6\xf0\xb2\x98\xed\x2b\x8d\x8d\xf1\x84\x48\xd6\x4e\x82\x99\xbc\xbb\x25\xde\xdb\xb0\x45\x5b\x31\xf2\xa4\x1b\x5b\xb6\xf8\x23\xc4\xaf\xf3\xd6\x80\x5c\xb5\x07\xb0\x40\x7c\x2d\xc7\xf6\x53\xc7\x00\xae\xd6\xea\x9c\x16\x75\xca\xa5\x97\xd3\x47\xa5\x6e\x7a\x69\x4a\x5e\x15\x8f\xab\x3c\xe4\x84\xe1\x9c\x04\xa3\x3b\x20\xf9\x35\x85\xd0\x84\x19\x84\x54\xe0\x0c\x83\xff\xe2\x90\x06\x44\x32\x98\x61\x42\xee\xb8\xca\xb5\xf3\x64\x48\xa1\x19\x0a\xa7\xa6\xcf\xd7\x5b\x53\x91\x7b\xdc\xfa\x07\xb8\x7e\x4d\x11\x77\x3c\x08\xd8\xa0\xfc\xbb\x71\xc3\x46\x9d\xcb\x65\xc9\x84\xca\x02\x7b\xd5\x09\xc1\x2a\x3b\x0e\x3b\x9b\xec\x27\x84\x74\x1f\xfc\x50\x1f\xf9\x7c\x4e\xb8\x40\xf6\x63\x8c\xc7\xeb\x1f\x13\xec\xa3\x5b\xf7\x8b\xc7\xb7\x55\xcd\x03\x0a\x30\xf2\x5d\xc8\x23\xda\x8c\xfe\x8d\xed\xed\x6b\x62\x9a\xd9\xd5\x16\x50\xbb\x74\xf3\x07\xe2\x54\xe7\xa5\x1d\x2e\xea\x45\xad\x95\xde\x66\x77\x6e\xfe\xc0\x7a\xc1\xe2\x06\xfa\xb1\x6b\x16\xe1\xcf\x7c\x60\xd9\xc4\xda\x6c\xaa\xf1\xf6\xa0\xd9\x9f\x62\x51\x93\x6d\xbd\xaa\xc9\x86\x59\x10\xc9\xde\x0f\x9f\xdf\xe6\x66\xbc\x8a\x09\x2a\x04\x25\x25\x59\x6e\x72\x11\x92\x81\x42\x40\xa6\x8c\xe1\x33\x81\x41\xd3\x38\x7d\x4e\x9c\x93\xb7\x82\x59\xcb\xcd\x2f\x5d\x3a\xaf\xd1\xb9\xf4\x1a\xdd\xdd\x97\x5e\xb5\x1e\x52\x90\x34\x41\x96\x0b\x64\xa1\x86\xb3\x8f\x66\xdf\xc3\x29\xb3\x3c\xc5\x87\xc8\xfa\xda\x1d\x97\x64\xc4\xe2\x4b\xb7\xa9\xc3\xea\xc7\x48\xd2\xa1\x48\xf6\x26\xc4\x38\xc9\x69\x27\xc8\x97\x60\x13\x6e\x0a\x37\xde\x49\x51\xa3\x20\x96\xdf\x61\x98\xe1\x0d\xb7\x04\x74\xf2\x02\xe7\x43\x55\x19\x63\xa9\x18\x02\x37\xa0\x91\xaa\x3b\xd4\xc8\x22\x42\x6f\xa8\xa1\x11\xb2\xae\xf6\x59\x93\x81\x2e\xeb\x68\x3e\x87\x94\x0b\x01\x4a\x83\xd7\x86\xbd\x51\x44\x43\xbb\x1c\xb8\xec\x36\x4a\xa5\x5d\x3b\xc2\xa8\x20\x53\x34\xa6\xdd\x3f\xbd\xab\x20\xeb\xb7\xb5\x18\x24\xc1\x6b\xe2\x70\x67\x9d\x90\x15\xa5\xb9\x2e\x6e\x2b\x77\xa2\xab\xaf\xe8\x8b\xda\x53\xe3\x92\x71\xea\x15\x80\x4f\x36\x91\xdc\x54\x4e\x5a\x58\xcf\x39\x1a\xee\xb7\xe2\x00\x4e\xea\x5c\x06\xfc\x7a\xdf\x72\x50\x08\xd7\x6d\x46\xee\x10\x86\x04\xf3\xb2\x66\x1f\x8a\x06\xca\xf5\x07\xc1\xef\x99\xc4\x2a\x06\x11\x9a\xda\x7b\xf1\x5e\x7e\x84\x3a\xac\x2a\x94\xb1\x9d\xa0\x80\x08\xce\xa6\xa5\xb1\x6a\x37\x63\x0c\x7a\xd7\xed\x03\xc5\xc4\xea\x98\x06\x1e\x64\xe8\xe5\xca\x65\x08\x0d\x0a\x81\x50\x77\xf7\x16\x28\x9d\xfb\xdd\x15\x6f\x44\x18\xef\x09\x31\x9f\xaa\x54\x7f\x55\xd7\x3b\xaa\x12\x3e\x64\xa2\xef\xe1\x75\x30\x25\x42\x3c\xb2\x7b\x1b\x53\xdf\x6e\x1b\x65\xae\xfc\x3d\x21\x57\x55\x8a\x25\xa6\x7c\xdb\x52\xbf\x0a\xfa\xfe\xb8\x86\xf7\x81\x0c\xe4\x71\xe2\x8f\x51\x02\x6a\x98\xda\x88\x88\xe2\x5f\x1e\xef\x2b\x9d\x5e\x2e\x77\x56\xf1\xcf\x08\x63\x3c\x68\xf1\xcf\xf1\x35\xa1\xff\x5e\x8e\x6e\x7f\x69\x2c\x16\xaf\x60\x9d\x4c\x08\xe9\xcf\x13\x3e\x4b\x3e\xc4\x6d\xd9\x23\xed\x78\xc8\xcb\xb2\x06\xd9\x4e\xeb\xd6\x75\x99\x8f\x71\xa6\x9d\x96\xa7\x2f\x7d\x43\xbb\xca\xb8\x03\xf6\xaa\xe5\x29\x10\x1b\x9c\xfe\xb2\x96\xec\x47\xca\x4a\x55\x15\x0e\x24\x8d\x3c\x30\xfb\x4d\x2a\x5f\x3b\x70\x8b\x06\x8f\xd2\x3d\x9e\x21\x4a\x17\x76\x94\x74\x61\x23\x4b\x2e\x04\x38\xa8\x99\xa4\xf0\x3b\x85\x00\x42\xbd\x67\xaa\x34\x64\x28\x19\x97\x0b\xef\x85\x1a\x48\xc8\x1d\xd6\xaf\x79\x15\xbb\x69\x85\x5c\x0f\x64\xf9\x8e\xd7\xbd\xf0\xa0\xb0\xa8\x34\xd9\x87\x06\x18\x42\x0e\xdf\x3b\x81\x5e\x28\x52\x81\x50\x72\x81\x1a\x68\x42\x64\xb4\x20\x19\xb8\x1d\xb0\xf0\xcc\xeb\x51\xbc\x2e\x6e\x4e\x1f\x33\xf7\xb7\xdb\xeb\x79\x8f\x71\x87\xe9\xb6\x6d\xef\xa3\x77\x1b\xa4\xfe\x96\x4f\xcb\x53\x8f\x77\x03\xd7\xa1\x35\xb0\x7c\x95\x1a\x97\xdb\xb4\xfc\xf8\x57\x5c\xd7\xa4\x1b\x5f\x53\x7b\x61\xdb\x9e\xa3\xad\x90\xa2\xaf\x08\x4d\x6a\xa6\xcc\x9c\x6c\x93\x6f\x8e\xa4\x5c\xa2\xaf\x08\x3e\x1d\x61\x6c\xab\xe5\xbd\xa1\xbf\x70\x44\x1b\x97\xde\x85\x41\x7e\xf9\x31\x0c\xaa\x5f\xa1\xcc\x6e\x6f\x70\x74\x03\x2f\x98\x13\x62\xa6\x75\xab\xd4\xb4\xf4\xe7\xc6\xbf\x69\xc0\x15\x1f\xf5\xc6\x5d\xf8\x37\x18\xf4\x0d\x83\x39\x98\xff\x1d\xc0\xdc\xf4\x9a\x46\x7b\x5b\x9d\xc6\xee\x67\x1d\xb7\x9d\x8e\x3b\xbc\xf2\xd9\x20\xaf\xde\xbf\x8d\x73\x12\xa5\x96\xb8\xf2\x7e\x92\xee\xc7\x3e\x35\x80\xfe\x2c\xe4\x63\x3a\x35\x8d\xd2\x74\x27\xe9\x2c\x15\xa4\x4a\x63\xe1\x42\x1a\xa0\x44\xc2\x0c\x21\x25\x0c\x43\xfc\xcc\x4d\x08\x04\x7e\x93\xfe\x67\xef\x79\xce\x10\xe6\x5c\x08\xb5\x44\x06\xb3\x15\x90\xd2\x3b\x75\xcb\x37\x33\xd4\x72\xd5\x7e\xb3\x52\x37\x45\x8c\xa0\xf3\x58\xa7\xeb\xc7\xeb\xeb\xcf\x1f\x91\x30\xd4\xfb\x00\xe5\x06\xd7\x2a\x74\x3b\xb7\x10\xed\x90\x7c\xa8\x0f\x01\x4b\x4d\x32\x03\x04\x0c\x97\x0b\x81\x90\x84\xd1\x1b\x5c\x9d\xf7\xe5\xcc\x1d\xf1\x2f\x68\x13\xc5\xf6\x4b\xd5\xa6\x61\x8d\xa6\x92\xc2\x56\xd6\xd4\xed\xa5\xf9\x7b\xd6\xc9\xaa\x66\xed\xe4\x2c\xc3\x6e\xbf\x86\xca\xc2\x37\x38\x4d\x1a\x62\x69\x32\x2a\xf1\xda\xd9\x5e\x9b\x79\xe1\xfc\x75\xd6\xb5\xee\x57\x72\x4f\xa1\xa0\x8d\xf3\xae\xaa\x11\xee\xd3\x4f\xa8\xd8\x36\x25\xde\x0d\x35\xd9\x20\xf4\x03\x34\x23\x6f\xa8\x63\x16\xf7\xa6\x41\x13\xcf\xf0\xa4\x5d\x74\x8d\x59\xfc\x97\x06\xcf\x61\x33\xfc\x4b\x29\x34\xda\x51\x88\x04\x95\xdb\x85\xe2\x72\x01\x4a\x03\x97\x54\xf9\x2f\xd4\xbc\x48\x0b\x4b\xf6\x02\xb8\x2d\xee\x8c\x4d\xca\xeb\x62\x5e\x14\x12\xf7\x81\xaf\x2a\xba\x68\xc0\x0b\xa9\x0f\x03\x65\x45\xf7\x19\x04\x3d\x20\x08\x16\x6d\x4a\x15\xeb\xd5\x78\xb1\x3f\x5d\xd1\xff\x87\x2b\x36\x02\xa2\x10\x49\xa9\x12\x07\xd1\x70\xf9\xef\xff\x5c\x5e\x5d\xf7\xa1\xa1\x68\xb0\xf1\xa5\x97\x12\x12\x52\xf5\x43\xa2\x1b\x1e\x1d\x29\xe7\xae\xb6\x69\x4c\x38\xea\x87\x13\x8f\xfd\xcd\xe1\x23\x54\x8d\x1e\xbf\x8f\xf7\x81\xea\x1a\xc5\x97\x1b\xc4\x80\xcf\x12\x6c\xfa\x5e\x23\x16\xbb\x3f\xd7\x19\x1f\xb9\xd7\x23\xc8\xac\x0a\x0f\x01\x5e\x02\x53\x4b\x19\xbe\xd2\x0e\x4f\x4d\xd9\xd9\x63\x35\x5f\x2c\x7a\x9a\x38\x22\x69\x92\x23\xc9\xb2\xcc\xf1\x4c\x4f\xb1\x08\xf9\x20\xb7\xad\x3c\x31\x70\x69\x15\x40\x79\x6e\x27\xcb\xea\x67\x1f\x1a\xb9\x89\x58\x37\xdb\xfb\xaf\x88\x08\xa6\x65\x77\x68\x63\xa9\x9a\x79\x3d\xa2\xae\x9a\xe8\x1e\x53\xca\xfd\xec\x68\xed\xa9\xdd\x0f\xd4\xfe\x1c\x45\x2a\x9b\xa0\x6e\xb7\xa4\x0d\x28\xa8\xaa\x5b\xee\xf1\x9a\x84\xfa\xe3\xf3\xc1\xe3\x5b\x6c\xf9\x30\xd0\x28\xde\x95\x7d\x3a\xce\x39\x69\x77\x56\x83\x6f\x08\x61\xb5\xc5\xed\x3b\xff\xfe\xfd\x39\xa6\xfb\x27\xbd\x7d\x0f\x32\xb2\x4e\x0f\xce\x5a\x5f\x0d\x25\x92\xa2\xe8\x0c\xde\x70\x3f\x52\x0c\x0c\x46\x73\xed\xf7\xc6\x58\x56\xb4\xd1\x34\x7b\xd3\x2b\x4e\x55\xed\xe8\xba\x85\x92\x33\xf7\xff\xfd\xd9\xff\x03\x00\x00\xff\xff\x97\x40\x6f\xcc\x2c\x60\x00\x00")

func modelModelSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_modelModelSwaggerJson,
		"model/model.swagger.json",
	)
}

func modelModelSwaggerJson() (*asset, error) {
	bytes, err := modelModelSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/model.swagger.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model/model.swagger.json": modelModelSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"model": &bintree{nil, map[string]*bintree{
		"model.swagger.json": &bintree{modelModelSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

