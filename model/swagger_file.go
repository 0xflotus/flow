// Code generated by go-bindata.
// sources:
// model/model.swagger.json
// DO NOT EDIT!

package model

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelModelSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x73\xdb\x36\x12\x7f\xf7\xa7\xd8\xe1\xdd\x43\x3b\x93\xc4\xb9\xce\xcd\x3d\xe4\xcd\xbd\x38\x4d\x1e\x3a\xcd\xc5\xbe\x7b\xb9\xcb\x68\x20\x62\x25\xa2\x06\x01\x1a\x00\xa5\x7a\x32\xfe\xee\x37\x00\xf8\x5f\x20\x45\x4a\xb2\x24\x37\xee\x4c\x5b\x09\xc4\x2e\x81\xdd\x1f\x16\xfb\x4f\xfe\x76\x01\x10\xe9\x35\x59\x2e\x51\x45\xef\x20\xfa\xe9\xcd\xdb\xe8\x95\x1d\x63\x62\x21\xa3\x77\x60\x9f\x03\x44\x86\x19\x8e\xf6\x79\x2a\x29\xf2\x37\x99\x92\x46\xba\x79\x00\xd1\x0a\x95\x66\x52\xd8\xa7\xc5\x47\x10\xd2\x80\x46\x13\x5d\x00\x3c\x3a\x6e\x3a\x4e\x30\x45\x1d\xbd\x83\xff\x7a\xa2\xc4\x98\xac\x64\x60\x3f\x6b\x3b\xf7\xab\x9b\x1b\x4b\xa1\xf3\xd6\x64\x92\x65\x9c\xc5\xc4\x30\x29\x2e\x7f\xd7\x52\xd4\x73\x33\x25\x69\x1e\x8f\x9c\x4b\x4c\xa2\xeb\x2d\x5d\xae\xfe\x76\xb9\xe0\x72\x7d\x19\x2b\x24\x06\xab\x07\x76\xa6\xd4\xa6\xf1\x1d\x20\x92\x19\x2a\xc7\xf3\x13\xb5\xfb\xfc\xa7\x23\xf9\x45\x91\x2c\x29\x36\xe1\x66\x29\xd4\x99\x14\x1a\x75\x8b\x18\x20\xfa\xe9\xed\xdb\xce\x10\x40\x44\x51\xc7\x8a\x65\xa6\x90\x5d\x83\x91\x7b\xec\x44\x46\x36\xc8\x00\xa2\xbf\x2a\x5c\x58\x8a\xbf\x5c\x52\x5c\x30\xc1\x2c\x07\x7d\xe9\x34\xd3\x58\xd8\x97\x62\x31\x51\x8b\xfc\xf1\x22\xf4\xf9\xb1\xb1\x89\x8c\x28\x92\xa2\x41\x55\x0b\xd5\xff\xd3\x59\xbe\x20\xa9\x43\xc4\x5c\xd2\x87\xee\xda\x99\xe8\x7b\xa2\xf0\x3e\x67\x0a\xad\x14\x8d\xca\xf1\xe0\x7b\xbe\xcf\x51\x9b\x31\x5b\xfe\xda\xd8\xb2\x21\xcb\xee\x66\xa3\x0f\x5c\xae\x6f\x50\xad\x58\xdc\x90\xe0\xd7\x8b\x26\x9b\x42\x6a\x35\x92\xb4\x51\x48\xd2\x26\x92\x96\x38\x0c\xa4\x1b\x47\x71\xbd\x42\x61\xf4\xc1\x90\xf4\x83\x5f\x07\x13\x4b\xa8\xf8\xfc\x78\x10\x78\x39\x21\xbb\xd5\x3e\x35\xaa\x96\xf6\x4d\x6f\xdc\x7f\x67\x8c\x86\xf1\x75\x9f\xa3\x1a\x02\xd8\x82\x70\xdd\x45\x98\x79\xc8\x1c\x7f\x6d\x14\x13\xcb\xe6\x2e\x1e\x5f\x8d\x5d\xd5\x42\xc9\x74\xa6\xf1\xfe\xc9\x56\xd5\x79\xba\x90\x2a\x25\x16\x47\x51\xce\x84\xf9\xc7\xdf\xa3\xa3\x01\xfa\x5b\xa9\x80\xc7\x29\xa0\xfe\x05\x8d\x03\xca\x8d\xb1\x76\xf5\xac\xec\x63\x6b\x69\xc7\xb2\x90\xc3\x28\xb6\xd7\xd2\x34\x2b\x39\x80\xe1\x23\xa1\xe1\x32\x96\x69\xca\xcc\xb4\x3b\xd3\x93\x9c\x17\x1c\x1a\x97\xc6\x67\x25\x63\xd4\x1a\xe9\x9f\x10\x16\x23\x4c\xdb\xe9\xaf\x71\x87\x8f\x73\xb8\xc6\x1b\x38\xa7\xc8\xc9\xc3\x24\x98\x5f\x51\xfa\xde\x11\x9d\x15\xd0\xaf\x28\xbd\x31\x64\xf9\x67\x34\x79\xcf\x01\xdb\x25\x28\x0a\x1d\x9c\x0b\xba\x99\x58\xc9\xbb\x69\x91\xcf\x15\xa5\x9f\x1c\xd5\x87\x5c\xc4\x0e\xa2\x2f\x38\x7f\xc1\x79\x43\xfc\x6d\x74\x9c\x19\xe0\xb5\x5d\xce\x54\xbc\xbb\x3d\xbc\xc0\xfc\x05\xe6\x01\xf1\x9f\x15\xb0\xf5\xe5\x37\xf7\x7f\x37\x42\xd6\xa4\xed\xa0\x6f\x8b\xda\xae\x2c\x41\x89\xaa\x9c\x9f\x99\xa7\xde\x5d\xdd\xf7\x89\xfc\x52\xbd\xe7\xb1\x1a\xc3\x52\x94\xb9\x99\xa5\xfa\x7b\xca\x84\x04\xce\x5a\x2c\xd3\x8c\xe3\xd4\x1c\x72\x41\xe4\x40\x7d\xfd\x87\x41\x25\x08\xe7\x67\x16\x37\xf4\x2c\xf2\xe5\xf4\x9d\x7e\x35\x27\xbf\x05\x7b\xb1\x71\x2e\x97\xe2\x8a\xf0\x7c\xb2\xb7\xf7\x1f\x4b\xf4\xe2\xf2\x9d\xd9\xd1\x3b\x39\xd8\xaf\x28\x2d\xf1\xde\x80\xc8\x91\xb1\x5e\x95\x53\x1b\xcb\xab\x0b\x9a\xc1\xdc\x76\xb1\xcc\x4c\xa1\x46\x61\x48\x01\xc9\xea\x44\x94\x5a\x91\xf3\xdf\x31\xae\x5d\xbe\x28\x53\xf6\x64\x18\xd6\x01\x7c\x39\xbf\x75\x04\xfa\x34\xdb\x44\x9f\x36\xc4\xe4\x1b\x87\x67\x0c\x25\xc5\x0c\x05\x45\x11\x77\xd7\xd2\xa0\x27\x4a\x91\x36\x08\x22\x66\x30\xed\xce\x1f\x99\x3a\x7f\x0c\x1a\x98\x11\x28\xd8\x43\xae\xd5\x69\xdb\x41\x42\x5d\x33\x07\xe3\xec\x36\x93\xa2\x70\xf4\x83\x5c\x63\x49\x71\xc6\x65\xdc\x85\xcc\xe8\x65\xc5\x84\x73\x54\x53\xf6\x74\xd1\x61\x52\x77\x1d\x0c\xca\x1d\x7c\x01\x5f\x03\x01\x81\x6b\x70\xb7\x34\xac\x99\x49\x80\x80\xce\x30\x66\x0b\x16\x83\x17\x52\x50\xa3\x9b\x99\xb9\x13\x29\xd2\x25\x9b\x67\x1b\xb0\x1d\xf2\x89\x1b\x1e\x71\xc7\x21\x3e\x67\x5d\x6e\x48\xbc\xa1\x42\x27\x04\xaf\xc4\xb0\xba\x06\x12\x4c\x27\xd2\xdb\xa2\x58\xcb\x8e\xe4\x44\x2d\x27\x9c\xde\x8f\xb7\xb7\x9f\xbf\xe0\xfd\x7b\x62\xf2\xf4\x79\x68\xbb\x5f\x61\x40\x28\xb5\x3a\x2f\x05\x08\x4c\xac\xca\x75\x07\x75\x7f\x0e\xda\xae\x5c\xc6\x9d\x4c\xee\x6f\x15\x75\x58\xf4\x5c\xea\x5c\x4d\xb1\xe6\x3f\x73\x39\x1f\x00\x03\xc5\xec\x58\xd7\xe6\x19\x43\x30\x04\xba\xce\x5d\x51\xfa\x19\xde\xd3\x00\x23\xc1\x24\x08\x0e\x28\x83\x58\x2c\xbc\xf1\x13\x81\xb1\x0a\x49\x0f\x29\x26\xbf\x25\x50\x68\x72\x25\xb4\x93\x83\x17\xd4\xa7\xf7\x20\x17\xee\xbb\xb7\xd7\xb4\xdf\x4e\xf7\xa5\xeb\x9e\x8b\x9c\xda\xb1\x9f\xf5\x92\x0e\xe2\x60\xf5\xbb\x96\xf5\x39\xde\x43\x44\x73\x2e\xe7\x3b\xee\x32\x96\xc2\xa0\x30\xb3\x5d\x3d\x7c\x8e\x62\x69\x92\xdd\x5c\x97\x6e\x32\x6f\x00\xa5\x95\x98\x20\x91\xdc\x9d\x63\x85\x0b\x54\x28\x62\xb4\x67\x96\x80\x15\x81\x83\x28\xd1\x5a\xc6\xcc\xa1\xd4\x8d\x69\x23\x55\x08\xaa\x81\xbe\x83\x63\x82\xb4\x1f\x11\x5b\xf2\x2b\xdf\xf9\x49\x3a\xd7\xdb\x66\x58\x6b\x90\x12\x75\xa7\x81\x08\xc0\x3f\x98\x36\x4c\x2c\x0b\xd3\x4a\x34\x94\x59\xe4\xd1\xb1\xcb\xb6\xe4\xec\x33\x44\x88\xce\xe3\x18\xb5\x5e\xe4\xbc\x8f\x7a\x2e\x25\x47\x22\xfa\x4c\x49\xf9\x78\xc2\x01\x6b\x79\x65\x01\x99\x75\x6c\x57\x84\xc2\x19\xe9\x3a\x7b\x13\xe5\xe2\x4e\xc8\xb5\x98\xd5\xae\x61\xd3\xbd\x8f\x63\xcc\xcc\x35\x33\x09\xaa\xd6\x78\x96\xf1\x87\x5b\xb9\xf9\xc0\x24\x28\xae\x1c\xd1\xcf\xb2\x95\x65\xf3\x4f\x2c\x59\x77\xf0\x4b\x2e\xc2\x1c\xba\xa3\x76\xcb\x52\x63\x60\x78\xce\x44\x6b\x78\x5d\xcc\x76\x75\x8d\xc6\x78\x42\x04\xe5\xad\x11\x9d\x77\x97\xc4\x7a\x3b\x44\xe2\x56\x14\x1f\x75\x83\xdf\x96\x7c\x38\xff\x6d\xd1\x1a\x10\x0f\xed\x01\x2c\x20\x5f\xeb\xb1\xfd\xd4\x0a\x80\xc9\x8d\xaa\x8a\x41\x95\x32\xe1\xf4\xf4\x51\xca\xbb\x5e\x9a\x52\x56\xc5\xe3\x2a\x81\x17\x51\x5c\x10\x6f\xc7\x06\x34\xbf\x61\x11\x9a\x30\x03\x9f\x21\x9e\xa3\xf7\xae\x2c\xd2\x80\x08\x0a\x73\x4c\xc8\x8a\xc9\x5c\x59\x3f\x8b\x14\xa6\xa1\x70\xb9\xfa\x5c\xd1\x0d\x1b\xb9\xc7\xb1\x7f\x82\xe3\xd7\x54\x71\xc7\xbd\x81\x2d\xd6\xbf\x1b\xd6\x6c\x35\xba\x4c\x94\x42\xa8\xbc\x03\x67\x3b\xc1\x7b\x0c\x56\xc2\xd6\x5f\x70\x13\x7c\x46\x12\x7e\xa8\xb7\x7c\xb9\x20\x8c\x23\xfd\x31\x24\xe3\xcd\x9f\x18\xec\x21\xe5\x3d\xf3\x05\x87\x74\x31\x02\x3f\x17\x39\x0f\xe7\x67\x6f\x57\x18\xd3\xcc\x3c\x4c\x00\xdb\xb5\x9d\x3f\x10\x48\x5b\x1f\xf2\x70\x61\x39\x2a\x25\xd5\x94\xd5\xd9\xf9\x03\xfc\xfc\x9d\xeb\xe9\xc7\xf2\x2c\xc2\xb3\xc5\x00\xdb\xc4\x98\x6c\xa6\xf0\xfe\xa0\xf9\xa9\x82\xa9\xce\x26\x73\xd5\xd9\xb0\x08\xcc\x94\xc4\x89\x2b\x93\x8c\x37\x31\xde\x84\xa0\x88\x49\x96\xeb\x9c\xfb\x6c\x25\xe7\x90\x49\xad\xd9\x9c\xa3\xb7\x34\xd6\x9e\x13\xeb\xe5\x3d\xc0\xbc\x15\x82\x94\x3e\x9d\xb3\xe8\x4c\x38\x8b\xbe\xe0\x72\xdd\x6b\xd6\x7d\x8e\x34\x4e\x90\xe6\x1c\xa9\xff\xcd\xcd\x3e\x96\x7d\x0f\xa7\xcc\xb0\x14\x9f\x22\x2d\x6d\x76\x64\x49\x89\xc1\xd7\x76\x51\xe3\xf2\x1a\x45\x4a\x39\x21\xda\x8a\x5f\x59\x6d\xbc\x06\x93\x30\x5d\x38\xe3\x56\x15\x0a\x39\x31\x6c\x85\x7e\x86\xbb\x7d\x05\xa0\x15\x3a\x58\x47\xa8\xca\x4b\x0b\x49\x11\x98\x06\x85\xb1\x5c\xa1\x42\x1a\xd0\x5c\xc3\x92\x8c\x50\x58\xb5\xce\x9a\x0c\x54\x59\xaf\x73\x79\xaa\x9c\x73\x90\x0a\x9c\x41\xeb\x8d\x05\x1a\x06\xe2\xc0\xe5\xbd\x51\x56\xe9\xd6\x12\x06\x95\x9c\xa2\xd6\xed\xa6\xcb\x61\xdc\xf5\x2b\xb2\x7e\x5b\x4b\x40\x02\x9c\x31\xf5\x07\xcf\x2a\x59\xc6\x71\xae\x8a\x23\xc7\xac\xea\xea\x73\xf6\xaa\x76\xb7\x98\xa0\x2c\x76\xa7\xd8\xe5\xb3\x48\xae\x2b\x4f\xcb\xf3\xb3\xde\x82\xfd\x56\x6c\xc0\x6a\x9d\x09\x0f\x42\xe7\x20\x0e\x2a\xe1\xb6\x2d\xc8\x1d\x62\x09\x7f\x43\x6c\x98\xf8\xa2\xe7\x6a\xf3\x81\x77\x5e\xa2\x50\x59\x22\x40\x53\xbb\x20\xce\x55\x0f\x50\x7b\xae\x5c\x6a\xd3\xf1\xec\x09\x67\x74\x56\xde\x37\xed\x5e\x84\x41\x17\xb9\xbd\xa1\x90\x5a\xad\xd0\xc0\x81\x0c\x9d\x5e\x99\xf0\xfe\x7d\xa1\x10\x1b\xe6\xc3\x12\x85\xf5\xa1\xbb\xea\x0d\x28\xe3\x03\x21\xfa\x53\x55\x4f\xa8\xca\x87\x27\xb5\xa4\x4f\x94\x00\x39\xa4\x21\xed\xa4\x45\x0e\x94\x5b\x06\xcb\xab\x4c\xaa\x7f\x20\xe4\xa6\xca\x76\x84\x2c\x68\x5b\x75\x37\xde\x68\x9f\xf6\x0a\x7c\x1a\x09\xef\x12\x09\x4c\x92\x72\xe3\xd2\x0b\xc8\x39\xfc\x6b\xc8\x7d\x45\xdc\x2b\xaa\x0e\x17\xf7\x8c\x50\xca\xbc\x3d\xfd\x1c\xe6\x09\xfd\x27\x64\x74\xc3\x4b\x83\x59\xb8\x5e\x75\x3e\x11\x99\xdb\xd0\xe1\x8c\xd5\x09\xcb\xda\xc7\xf1\xee\x9c\xbc\xec\xdd\x5c\x65\x4f\xdd\xc5\xbd\x66\x9c\x83\x90\xc0\xa5\x58\xa2\x82\x38\x21\x22\x58\xa7\xf2\xe2\xf6\xc5\xac\x17\x61\x8f\x13\x76\x51\xfb\xeb\x93\xe6\xfe\x76\x7a\x33\xde\xdc\xb1\x8c\xb4\xcf\x11\xdd\xa0\x2d\xb7\x3d\xfe\xf2\xde\x04\xd7\x00\x7b\x97\x95\x24\xc2\xd8\x55\x4c\x7c\xc5\x6d\x99\xd0\x14\xcb\xad\xaf\xa9\xaf\xdd\xa9\xfb\x68\xdb\xa4\xe0\x2b\x7c\x03\x93\x2e\x83\xd6\x29\xa9\xbe\x40\xb4\x1b\x7c\x85\xbf\xc4\x09\xa5\x93\xd8\xbb\x4b\xe1\xca\x12\x6d\x65\xbd\x8b\x80\x1c\xfb\x31\x02\xaa\x5f\x21\xf5\x6e\x6f\xb0\x74\x03\x2f\x58\x10\xa2\x67\x75\x17\xcd\xac\xbc\xfb\xc7\xbf\x69\xc0\xf7\x1a\xf5\xc6\x5d\xe4\x37\xe8\xaa\x8f\xbe\x35\x7b\x7f\xc7\x7f\x1e\x19\xcd\xf0\x51\x7d\x9e\xd7\xcd\xee\xb9\xb6\xfe\x44\xc1\x31\xaf\xb0\x46\x09\xa8\x93\x17\x12\x12\x52\xa9\xb0\xf0\x18\x34\xc4\x44\xc0\x1c\x21\x25\x14\xbd\x63\xcd\xb4\x4f\x25\xfc\x4f\xb8\xcf\xce\xd1\x98\x23\x2c\x18\xe7\x72\x8d\x14\xe6\x0f\x40\x4a\x67\xc4\xb2\x6f\x26\x91\xc4\x43\xfb\xcd\x52\xde\x69\x48\xc8\x0a\x41\xe5\xa1\x8e\xb7\x8f\xb7\xb7\x9f\x3f\x22\xa1\xa8\xf6\xc1\xc9\x1d\x6e\xe4\xc1\x77\x6e\x2b\xde\x21\x2a\xa9\x37\x01\x6b\x45\x32\x0d\x04\x34\x13\x4b\x8e\x90\xf8\xd1\x3b\x7c\xb8\xec\x4b\x6b\x59\xe2\x5f\xd1\x24\x92\xee\x97\x4d\x49\x3d\x8f\xe6\x75\x88\xad\xc4\x86\x5d\x4b\xf3\x7b\xd6\x49\x7c\x64\xed\xfc\x09\xc5\x6e\x5d\x54\x66\xbe\x1d\xbf\x49\x43\x4c\x9c\x8c\xca\x8d\x74\x96\xd7\x16\x9e\xdf\x7f\x9d\x18\xa9\x1b\x03\xec\x53\x28\x68\xc3\xb2\xab\x32\xf1\xfb\x34\x15\x49\x3a\xa5\x90\xb2\xa5\xf2\xe1\x95\x7e\x80\x9e\xc4\x2d\xd5\x82\xe2\xdc\x34\x68\xc2\xa1\x5f\xda\x45\xd7\x18\xe6\xbf\x36\x64\x0e\xdb\xe1\x5f\x6a\xa1\x51\xf6\x25\x02\x64\x6e\x96\x92\x89\x25\x48\x05\x4c\xc4\xd2\xfd\xc1\x2e\xa7\xd2\xe2\x26\x7b\x05\xcc\x14\x67\xc6\x06\xf4\x85\xe4\x5e\x15\x1a\x77\x71\x8e\x2c\xaa\xd5\xe0\x94\xd4\x87\x81\xb2\x6e\xf2\x02\x82\x1e\x10\xf8\x62\xf0\x2c\x96\xb4\xd7\xe2\x31\x61\x70\xd9\x6a\xd4\x18\x2c\x73\x6c\x03\x44\xa1\x92\xd2\x24\x0e\xa2\xe1\xfa\x5f\xff\xbe\xbe\xb9\xed\x43\x43\x51\xc8\x76\xd9\xd1\x12\x12\x42\xf6\x43\xa2\xeb\x0b\x9f\x28\xa3\x26\xa7\x94\xff\x4e\xda\x3f\x7d\xec\x9f\x1f\x1d\x21\xb1\x7b\x4e\x0d\x73\x57\x65\x17\x36\xd1\xe0\xe2\xba\x6d\xbd\xd7\xa1\x68\xeb\x25\x9f\xbf\x4b\x61\xd4\x0b\xbe\x8a\xd8\x00\x5e\x03\x95\x6b\xe1\xff\x7c\xa4\x7f\xaa\xcb\x5a\xb6\x51\x6c\xb9\xec\xa9\x78\x06\xa2\xd3\x13\x29\xa4\x0c\xad\x67\xe7\x92\xec\x1f\x87\xfb\x72\xd9\xc0\x84\x91\x00\xe5\xe2\xad\x42\xaa\xcf\x2e\xd2\xb0\x13\xb1\x6e\x12\x75\xad\xf9\x04\xd3\xb2\xa9\xa9\xc1\xaa\x96\x40\x8f\xbe\xaa\xce\x8f\xbd\x55\x15\x68\x3b\xd9\xc1\x0e\xb4\x16\xd5\x2e\x81\xb7\x5b\xbc\x85\x34\x09\xaa\x76\x2b\xc5\x80\xad\x28\x9b\x3c\x8e\x57\x16\xef\x8d\x76\x07\x37\x5f\x90\x54\x41\x52\xe3\x47\xe4\x65\x61\xda\x85\xdd\xad\x7e\x40\x70\x15\x50\x5a\xdf\x5f\x3d\xbb\xdf\xbf\x1e\xad\xbb\x7f\xcc\xd3\x35\xce\x21\xed\xd4\x9c\x37\xea\xc8\x31\x11\x31\xf2\xce\xe0\x1d\x73\x23\xc5\xc0\x60\x68\xd4\x7e\x6f\x48\x62\x45\xd9\xb8\xd9\x50\x59\x09\xaa\xea\xa1\x54\x2d\x88\x5c\xd8\x7f\x1f\x2f\xfe\x1f\x00\x00\xff\xff\xb3\x72\x89\x98\xfd\x5a\x00\x00")

func modelModelSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_modelModelSwaggerJson,
		"model/model.swagger.json",
	)
}

func modelModelSwaggerJson() (*asset, error) {
	bytes, err := modelModelSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/model.swagger.json", size: 23293, mode: os.FileMode(420), modTime: time.Unix(1511276636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model/model.swagger.json": modelModelSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"model": &bintree{nil, map[string]*bintree{
		"model.swagger.json": &bintree{modelModelSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

