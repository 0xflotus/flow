// Code generated by go-bindata.
// sources:
// model/model.swagger.json
// DO NOT EDIT!

package model

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelModelSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6f\xdb\x38\x12\x7f\xcf\x5f\x31\xd0\xdd\xc3\x2e\xd0\x36\xbd\xde\xe1\x1e\xfa\x96\xdd\xa6\x1f\xc0\x2d\xb6\xd7\xe4\xee\xe5\xb6\x30\x68\x71\x6c\x71\x43\x91\x0a\x49\xd9\x6b\x14\xf9\xdf\x0f\x24\xf5\x6d\x4a\x96\x3f\x62\x3b\xdb\x2c\xb0\x68\x42\x71\xa8\xe1\xcc\x8f\xc3\xf9\x52\xbe\x5d\x00\x44\x7a\x49\xe6\x73\x54\xd1\x5b\x88\xde\xbc\x7a\x1d\xbd\xb0\x63\x4c\xcc\x64\xf4\x16\xec\x73\x80\xc8\x30\xc3\xd1\x3e\x4f\x25\x45\xfe\x2a\x53\xd2\x48\x37\x0f\x20\x5a\xa0\xd2\x4c\x0a\xfb\xb4\xf8\x11\x84\x34\xa0\xd1\x44\x17\x00\x0f\x6e\x35\x1d\x27\x98\xa2\x8e\xde\xc2\xff\x3c\x51\x62\x4c\x56\x2e\x60\x7f\xd6\x76\xee\x57\x37\x37\x96\x42\xe7\xad\xc9\x24\xcb\x38\x8b\x89\x61\x52\x5c\xfe\xae\xa5\xa8\xe7\x66\x4a\xd2\x3c\x1e\x39\x97\x98\x44\xd7\x5b\xba\x5c\xfc\xed\x72\xc6\xe5\xb2\x1e\xb2\x73\xa4\x36\x8d\xdf\x01\x22\x99\xa1\x72\xab\x7d\xa2\x76\x87\x3f\x2b\x24\x06\x3f\x28\x92\x25\x05\xfb\x6e\x96\x42\x9d\x49\xa1\x51\xb7\x88\x01\xa2\x37\xaf\x5f\x77\x86\x00\x22\x8a\x3a\x56\x2c\x33\x85\xd4\x1a\x0b\xb9\xc7\x4e\x58\x64\x8d\x0c\x20\xfa\xab\xc2\x99\xa5\xf8\xcb\x25\xc5\x19\x13\xcc\xae\xa0\x2f\x9d\x4e\x1a\x8c\x7d\x29\x98\x89\x5a\xe4\x0f\x17\xa1\x9f\x1f\x1a\x9b\xc8\x88\x22\x29\x1a\x54\xb5\x38\xfd\x7f\x1d\xf6\x05\x49\x1d\x16\xa6\x92\xae\xba\xbc\x33\xd1\xf7\x44\xe1\x7d\xce\x14\x5a\x29\x1a\x95\xe3\xc1\xf7\x7c\x9f\xa3\x36\x63\xb6\xfc\xb5\xb1\x65\x43\xe6\xdd\xcd\x46\xef\xb9\x5c\xde\xa0\x5a\xb0\xb8\x21\xc1\xaf\x17\xcd\x65\x0a\xa9\xd5\x18\xba\xfc\x66\xff\x99\x30\xfa\xd0\x44\xd3\x1c\x87\xc1\xf4\x01\x8d\x63\xfe\xc6\x10\x83\xe7\x05\xa7\x16\x6b\xc7\x02\x54\x21\xc3\x30\xa6\xec\xf1\xdd\x0e\x53\x66\x95\xb9\x65\xb5\x51\x4c\xcc\xa3\x13\x80\xe1\x32\x96\x69\xca\xcc\x76\x16\xc6\x93\x9c\x17\x1a\x1a\x47\xec\xb3\x92\x31\x6a\x8d\xf4\x19\x15\xbb\xa2\x82\x22\x27\xab\xad\x40\x71\x45\xe9\x3b\x47\x74\x56\xb0\xb8\xa2\xf4\xc6\x90\xf9\x9f\xd0\x3e\xbc\x78\x02\xb7\x5f\x89\x89\x42\x05\x67\x72\xff\x5d\x32\xb1\x90\x77\xb8\x2d\xba\x3f\x39\xaa\xf7\xb9\x88\x1d\x42\x9f\x61\xfe\x0c\xf3\x5a\xfa\x6d\x70\x9c\x19\xde\xb5\x65\x67\x5b\xb8\xbb\x3d\x3c\xa3\xfc\x19\xe5\xeb\xd2\x3f\x2b\x5c\xeb\xcb\x6f\xee\x5f\x37\x42\x96\xa4\xed\xcb\x6e\x8a\x6f\xae\x2c\x41\x09\xaa\x9c\x9f\x99\x53\xdb\xe5\xee\xbb\x04\x7e\xa9\xdd\xf3\xe0\xc6\xb0\x14\x65\x6e\x26\xa9\x0e\xf3\x73\x9f\xa3\x1a\x3a\x8d\x33\xc2\x75\x1f\x47\x4c\x18\x9c\xa3\xea\x52\xcf\xa4\x4a\x89\x29\x26\xfc\xfd\xcd\x49\xe2\x81\xf5\xa3\x16\xcb\x34\xe3\x68\xb6\xbb\x57\x7e\x2e\x88\x1c\xa6\xaf\xff\x30\xa8\x04\xe1\xfc\xcc\x62\x86\x1e\x26\x9f\x0f\xdf\xc9\xb9\x39\xf9\x1d\xd8\x0b\x8d\xf3\xb9\x12\x15\x92\x74\x9b\x1b\xf0\xc6\x51\x5c\x2f\x50\x18\x7d\xb0\x73\xf8\x83\xe7\x83\x89\x39\x54\xeb\xfc\x78\xb8\x3c\x8f\xe3\xf6\xbb\x3a\x87\x33\x25\xd3\x89\xc6\xfb\xc3\x5f\x3a\x05\x3f\xbd\x77\x4e\xce\x84\xf9\xe7\x3f\x4e\x72\xe9\x2c\x08\xcf\xb7\x8e\x5b\xfe\x6b\x89\x9e\x83\x97\xf3\x82\xef\xc9\x0d\xf7\x15\xa5\xa5\xed\x6e\x20\xe4\x74\x76\x7b\x57\x3b\xfd\x2f\x36\xc3\x78\x15\xf3\xc3\x81\xfb\x91\x4d\x75\xc5\xf0\x4e\x36\x7b\x57\x49\x57\x55\xdd\x06\x53\x75\x5d\x35\x58\x39\x2a\x00\x91\x29\xd4\x28\x0c\x29\xc4\x53\xa9\xa7\xc4\xbf\x9c\xfe\x8e\x71\x1d\x26\x46\x99\xb2\x7a\x32\xac\x23\xfc\x72\x7e\x4b\x1d\x7d\x67\xa8\xb9\x63\x6d\x88\xc9\xd7\x14\x39\x86\x92\x62\x86\x82\xa2\x88\xbb\xbc\x34\xe8\x89\x52\xa4\x7d\xdc\x22\x66\x30\xed\xce\x1f\x59\x83\x78\x08\xc2\x7b\xc4\x79\xdb\x43\xae\xa5\x59\xdb\x41\x40\xdd\xeb\x04\xc6\x39\x7b\x4c\x8a\x22\x37\x10\x5c\x35\x96\x14\x27\x5c\xc6\x5d\xc4\x8c\x66\x2b\x26\x9c\xa3\xda\x66\x4f\x17\x9d\x45\xea\xde\x87\x41\xb1\x43\xec\x8a\xd1\x1a\x08\x08\x5c\x82\x73\xed\x61\xc9\x4c\x02\x04\x74\x86\x31\x9b\xb1\x18\xbc\x90\x82\x0a\x5d\x4f\xe5\x9f\x46\x8f\xae\x36\x35\x59\x03\xed\x90\x47\xd3\x8e\xa1\x9b\xee\xcc\x39\xab\x72\x4d\xe0\x0d\x0d\x3a\x21\x78\x1d\x86\xb5\x35\x90\x91\x3e\x8d\xda\x66\x05\x2b\x3b\x92\x13\x35\xdf\xe2\xec\x7e\xbc\xbd\xfd\xfc\x05\xef\xdf\x11\x93\xa7\x4f\x43\xd9\xfd\xfa\x02\x42\xa9\x55\x79\x29\x40\x60\x62\x51\xf2\x1d\x54\xfd\x19\x28\xbb\x72\x5e\x76\xb2\xb7\xbf\x56\xd4\x61\xc9\x73\xa9\x73\xb5\x8d\x29\xff\x89\xcb\xe9\x00\x16\x28\x66\xc7\xba\x32\xcf\x18\x81\x21\xcc\x75\x2e\x8a\xd2\xc7\xf0\x5e\x06\x18\x09\x26\x41\x98\xbb\x5e\xb3\x21\x28\x16\x21\xcf\x69\xb0\x58\xe5\xb0\x0e\x29\x25\xbf\x23\x50\x68\x72\x25\xb4\x13\x83\x97\xd3\xa7\x77\x20\x67\xee\x77\x6f\xac\x69\xbf\x91\xee\xcb\xee\x3f\x11\x31\xb5\x23\x10\xeb\x20\x1d\xc4\xb7\xea\x77\x2a\xeb\x53\xbc\x87\x84\xa6\x5c\x4e\x77\xdc\x65\x2c\x85\x41\x61\x26\xbb\xfa\xf6\x1c\xc5\xdc\x24\x87\x71\x5b\xfa\x31\x5a\x49\x09\x12\xc9\xdd\x21\x56\x38\x43\x85\x22\x46\x7b\x60\x09\x58\x09\x38\x80\x12\xad\x65\xcc\x1c\x46\xdd\x98\x36\x52\x85\x80\xba\x21\xeb\xf9\xf4\xe0\xfa\x1d\x44\x02\xc3\x3a\x83\x94\xa8\x3b\x0d\x44\x00\xfe\xc1\xb4\xb1\xc1\xbf\xb7\x5e\x44\x43\x59\xd8\x19\x1d\x1a\x6c\xaa\x97\x3c\x3d\x7c\xe8\x3c\x8e\x51\xeb\x59\xce\xfb\xa8\xa7\x52\x72\x24\xa2\xef\xb4\x96\x8f\xc7\x58\xb5\x90\xdb\x13\x10\x59\xc7\x3c\x44\x28\x9c\x1d\xac\x53\x23\x51\x2e\xee\x84\x5c\x8a\x49\xed\x7b\x35\xdd\xe7\x38\xc6\xcc\x5c\x33\x93\xb4\x0a\x8c\xae\x19\x7d\x75\x2b\xd7\x1f\x98\x04\xc5\x95\x23\xfa\x49\xb6\x92\x85\xfe\x89\x25\xeb\x0e\x7e\xc9\x45\x78\x85\xee\xa8\xdd\xb2\xd4\x18\x18\x9e\x32\xd1\x1a\x5e\x16\xb3\x5d\xa5\xb1\x31\x9e\x10\x41\xdb\x49\x30\x9d\x77\x59\x62\xbd\x0d\x5b\x71\x2b\x46\x8e\xba\xb1\x65\x4b\x3e\x9c\xff\x3a\x6b\x0d\x88\x55\x7b\x00\x0b\xc4\xd7\x7a\x6c\x3f\xb5\x02\x60\x72\xad\xce\x69\x50\xa5\x4c\x38\x3d\x7d\x94\xf2\xae\x97\xa6\x94\x55\xf1\xb8\xca\x43\x46\x14\x67\xc4\x5f\xba\x03\x9a\x5f\x33\x08\x4d\x98\x81\x4f\x05\x4e\xd1\xfb\x2f\x16\x69\x40\x04\x85\x29\x26\x64\xc1\x64\xae\xac\x27\x43\x0a\xcb\x50\x38\x35\x7d\xbe\xde\x9a\x89\xdc\xe3\xd4\x3f\xc2\xf1\x6b\xaa\xb8\xe3\x41\xc0\x06\xe3\xdf\x8d\x1b\x36\xda\x5c\x26\x4a\x21\x54\x37\xb0\x33\x9d\xe0\x6f\x65\x2b\x61\x7b\x27\xbb\x09\x3e\xdd\x07\x3f\xd4\x5b\xbe\x9c\x11\xc6\x91\xfe\x18\x92\xf1\xfa\xc7\x04\xfb\xd8\xd6\xfd\xe2\xf1\x6d\x4d\xf3\x80\x01\x0c\x7c\x17\x72\xc4\x3b\xa3\x9f\xb1\xbd\x7d\x4d\x4c\x33\xb3\xda\x02\x6a\xd7\x76\xfe\x40\x9c\x6a\xbd\xb4\xc3\x45\xbd\xa8\x94\x54\xdb\x70\x67\xe7\x0f\xac\xe7\x6f\x5c\x4f\x3f\x76\xcd\x22\xfc\x99\x0d\x2c\x9b\x18\x93\x4d\x14\xde\x1f\x34\xfb\x53\x2c\xaa\xb3\xad\x57\xd5\xd9\xb0\x08\x02\xd9\xfb\xe1\xfd\x9b\x5c\x8f\x37\x31\xde\x84\xa0\x88\x49\x96\xeb\x9c\xfb\x64\x20\xe7\x90\x49\xad\xd9\x94\xa3\xb7\x34\xd6\x9e\x13\xeb\xe4\xad\x60\xda\x72\xf3\x4b\x97\xce\x59\x74\x26\x9c\x45\xb7\xe7\xa5\xd7\xac\xfb\x14\x64\x9c\x20\xcd\x39\x52\x5f\xc3\xd9\xc7\xb2\xef\xe1\x94\x19\x96\xe2\x63\x64\x7d\xcd\x8e\x4b\x52\x62\xf0\xa5\x65\xea\xb0\xf6\x31\x90\x74\x28\x92\xbd\x09\xd1\x56\x73\xca\x2a\xf2\x25\x98\x84\xe9\xc2\x8d\xb7\x5a\x54\xc8\x89\x61\x0b\xf4\x33\xdc\xc5\x2d\x00\xad\xbe\xc0\xfa\x50\x55\xc6\x58\x48\x8a\xc0\x34\x28\x8c\xe5\x02\x15\xd2\x80\xd2\x1b\x66\x68\x84\xae\x2b\x3e\x6b\x32\x50\x65\x1d\xcd\xe5\x90\x72\xce\x41\x2a\x70\xd6\xb0\x37\x8a\x68\x58\x97\x03\x97\xdd\x46\x99\xb4\x5b\x4b\x18\x54\x64\x8a\x5a\xb7\xfb\xa7\x77\x55\x64\xfd\xb6\x96\x80\x04\x38\x4b\xec\xcf\xac\x55\xb2\x8c\xe3\x5c\x15\xa7\x95\x59\xd5\xd5\x47\xf4\x45\xed\xa9\x31\x41\x59\xec\x0c\x80\x4b\x36\x91\x5c\x57\x4e\x9a\x5f\xcf\x3a\x1a\xf6\xb7\x62\x03\x56\xeb\x4c\x78\xfc\x3a\xdf\x72\x50\x09\xb7\x6d\x41\xee\x10\x86\xf8\xeb\x65\xed\x7e\x28\x1a\x28\xd7\x1f\x78\xbf\x27\x0a\x55\x0c\x02\x34\xb5\xf7\xe2\xbc\xfc\x00\xb5\x5f\x95\x4b\x6d\x3a\x41\x01\xe1\x8c\x4e\xca\xcb\xaa\xdd\x8c\x31\xe8\x5d\xb7\x37\x14\x52\xab\x15\x1a\x38\x90\xa1\xd3\x2b\x13\x3e\x34\x28\x14\x12\xdb\xb3\x37\x47\x61\xdd\xef\xae\x7a\x03\xca\x78\x4f\x88\xfe\x54\xa5\xfa\xab\xba\xde\x49\x8d\xf0\x21\x13\x7d\x8f\x6f\x83\x63\xc2\xf9\x91\xdd\xdb\x90\xf9\xb6\x6c\x94\xb9\xf2\xf7\x84\xdc\x54\x29\x96\x90\xf1\x6d\x6b\xfd\xc6\xdb\xfb\xd3\x5e\xbc\x8f\x74\x41\x9e\x26\xfe\x18\xa5\xa0\xc6\x55\x1b\x50\x51\xf8\xcb\xe3\x7d\xb5\xd3\x2b\xe5\xce\x2a\xee\x19\xa1\x94\x79\x2b\xfe\x39\xbc\x26\xf4\x9f\xcb\xd1\xed\x2f\x8d\xc5\xc2\x15\xac\xb3\x09\x21\xdd\x7e\xfc\x67\xc9\x87\x38\x2d\x7b\xa4\x1d\x0f\x79\x58\xd6\x20\xdb\x69\xdd\xba\x2d\xf3\x31\xf6\x6a\x8f\xcb\xdd\x97\xbe\xa1\x59\x65\xcc\x02\x7b\xd5\xf2\x14\x88\xf1\x4e\x7f\x59\x4b\x76\x23\x65\xa5\xaa\x0a\x07\x92\x46\x1e\x98\xfe\x26\xa4\xab\x1d\xd8\x45\xbd\x47\x69\x1f\x4f\x11\x85\x0d\x3b\x4a\x3a\xcf\xc8\x92\x71\x0e\x16\x6a\x3a\x29\xfc\x4e\xce\x81\xc4\xce\x33\x95\x0a\x32\x14\x94\x89\xb9\xf3\x42\x35\x24\x64\x81\xf5\x6b\x5e\x85\x4e\x5a\xa1\xd7\x03\xdd\x7c\xa7\xeb\x5e\x78\x54\x58\x54\x96\xec\x43\x03\x0c\x3e\x87\xef\x9c\x40\xa7\x14\x21\x81\x4b\x31\x47\x05\x71\x42\x44\xb0\x20\xe9\xa5\xed\xb1\xf0\x2c\xeb\x51\xb2\x2e\x4e\x4e\x9f\x30\xf7\xbf\xb7\xd7\xf3\x1e\xe3\x36\xd3\x6d\xdb\xde\xc7\xee\x36\x9d\x6a\x57\xff\x7c\x1c\x87\xc0\x59\x90\x49\x29\xd1\xf1\x2e\xe6\x3a\x6c\x07\x96\xaf\xd2\xee\x62\x9b\x76\x22\xf7\x8a\xdb\x9a\x74\xe3\x6b\x6a\x0f\x6f\xdb\x7d\xb4\x8d\x5d\xf0\x15\xbe\x01\x4e\x97\x59\x99\x6d\x72\xd9\x81\x74\x4e\x58\xcf\xce\x5f\x24\x94\x6e\xb5\xbc\x73\x22\xae\x2c\xd1\xc6\xa5\x77\x11\x90\x5b\x7e\x8c\x80\xea\x57\x48\xbd\xdb\x1b\x2c\xdd\xc0\x0b\x66\x84\xe8\x49\xdd\x86\x35\x29\x7d\xc5\xf1\x6f\x1a\x70\xf3\x47\xbd\x71\x17\xf9\x0d\x06\x94\xc3\x60\xf6\xae\xc5\x0e\x60\x6e\x7a\x64\xa3\x3d\xb9\x4e\xd3\xf8\x9f\xc8\x7e\x1e\xc5\xc6\x1d\xde\xf8\x6c\xd0\x57\xef\xdf\xdd\x39\x8b\x32\x4e\xd8\x78\x3f\x49\xd7\x66\x9f\xfa\x42\x7f\x86\xf3\x98\x0e\x53\xa3\xec\xdd\x49\x68\x0b\x09\xa9\x54\x58\xb8\xa7\x1a\x62\x22\x60\x8a\x90\x12\x8a\x3e\x36\x67\xda\x07\x19\xbf\x09\xf7\xb3\xf3\x6a\xa7\x08\x33\xc6\xb9\x5c\x22\x85\xe9\x0a\x48\xe9\xf9\xda\xe5\x9b\xd9\x6f\xb1\x6a\xbf\x59\xca\xbb\x22\xfe\x50\x79\xa8\x8b\xf6\xe3\xed\xed\xe7\x8f\x48\x28\xaa\x7d\x80\x72\x87\x6b\xd5\xbf\x9d\xdb\x93\x76\x48\x6c\xd4\x9b\x80\xa5\x22\x99\x06\x02\x9a\x89\x39\x47\x48\xfc\xe8\x1d\xae\x2e\xfb\xf2\xf1\x96\xf8\x17\x34\x89\xa4\xfb\xa5\x81\x53\xbf\x46\xd3\x48\x61\x2b\x23\x6b\x79\x69\xfe\x9e\x75\x32\xb6\x59\x3b\xf1\x4b\xb1\xdb\x0b\x22\x33\xff\x7d\x4f\x93\x86\x98\x38\x19\x95\xd4\xed\xb0\xd7\x16\x9e\xdf\x7f\x9d\xd1\xad\x7b\xa1\xec\x53\x28\x68\xc3\xb2\xab\xea\x8f\xfb\xf4\x2a\x4a\xba\x4d\xf9\x78\x43\xbd\xd7\x2b\xfd\x00\x8d\xce\x1b\x6a\xa4\xc5\xb9\x69\xd0\x84\xb3\x47\x69\x17\x5d\x63\x16\xff\xa5\x21\x73\xd8\x0c\xff\x52\x0b\x8d\x56\x17\x22\x40\xe6\x66\x2e\x99\x98\x83\x54\xc0\x44\x2c\xdd\xd7\x6f\x4e\xa5\xc5\x4d\xf6\x02\x98\x29\xce\x8c\x49\xca\xe3\xa2\x5f\x14\x1a\x77\x41\xb5\x2c\x3a\x74\xc0\x29\xa9\x0f\x03\x65\xb5\xf8\x19\x04\x3d\x20\xf0\x37\xda\x24\x96\xb4\xd7\xe2\x85\xfe\x2c\x46\xff\x1f\xc5\xd8\x08\x88\x42\x25\xa5\x49\x1c\x44\xc3\xf5\xbf\xff\x73\x7d\x73\xdb\x87\x86\xa2\x79\xc7\x95\x75\x4a\x48\x08\xd9\x0f\x89\x6e\x78\x74\xa2\x7c\xbe\xdc\xa6\xe9\xe1\xa4\x1f\x65\x1c\xfb\x7b\xc6\x23\x54\xa4\x8e\xdf\x23\xfc\x48\x35\x93\xe2\xab\x10\xa2\xc1\x65\x09\x36\x7d\x0b\x12\x8a\xdd\x9f\x6b\x98\x47\xee\x23\xf1\x3a\xab\xc2\x43\x80\x97\x40\xe5\x52\xf8\x2f\xc0\xfd\x53\x5d\x76\x0d\x19\xc5\xe6\xf3\x9e\x06\x91\x40\x9a\xe4\x44\xba\x2c\x73\x3c\x93\x73\x2c\x70\x3e\xca\x69\x2b\x77\x0c\x4c\x18\x09\x50\xee\xdb\xea\xb2\xfa\xd9\x85\x46\x76\x22\xd6\x8d\xfc\xee\x0b\x25\x82\x69\xd9\x79\xda\x58\xaa\x16\x5e\x8f\xaa\xab\x06\xbd\x63\x6a\xb9\x5f\x1c\x2d\x9e\xda\xbd\x46\xed\x4f\x5d\x84\x34\x09\xaa\x76\xbb\xdb\x80\x81\xaa\x3a\xf1\x8e\xd7\x80\xd4\x1f\x9f\x0f\x6e\xdf\x60\xcb\x87\x81\x46\x61\xb0\xec\x01\xb2\xce\x49\xbb\x6b\x1b\x5c\xb3\x09\xad\x6f\xdc\xbe\xfd\xef\xdf\xfb\xa3\xbb\x7f\x2e\xdc\xf5\x37\x23\xed\xf4\xf7\xac\xf5\xec\xc4\x44\xc4\xc8\x3b\x83\x77\xcc\x8d\x14\x03\x83\xd1\x5c\xfb\xbd\x21\x91\x15\x2d\x3a\xcd\xbe\xf7\x4a\x52\x55\xab\xbb\x6a\xa1\xe4\xc2\xfe\xff\x70\xf1\xff\x00\x00\x00\xff\xff\xae\x01\x14\xda\x88\x60\x00\x00")

func modelModelSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_modelModelSwaggerJson,
		"model/model.swagger.json",
	)
}

func modelModelSwaggerJson() (*asset, error) {
	bytes, err := modelModelSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/model.swagger.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model/model.swagger.json": modelModelSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"model": &bintree{nil, map[string]*bintree{
		"model.swagger.json": &bintree{modelModelSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

