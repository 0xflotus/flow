// Code generated by go-bindata.
// sources:
// model/model.swagger.json
// DO NOT EDIT!

package model

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelModelSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x8f\xe3\xb6\x11\x7f\xdf\x4f\x31\x50\xfb\x90\x00\x97\x6c\x9a\x16\x7d\xb8\xb7\x4d\x6e\x2f\x77\x40\x83\x5c\x6f\xb7\x7d\x69\x0f\x06\x2d\x8e\x2d\x66\x29\x52\x4b\x52\x76\x8c\xc3\x7e\xf7\x82\xa4\xfe\x9b\x92\x25\xdb\xb7\xf6\xf6\x1c\x20\xb8\x5d\x49\x43\x0d\x67\x7e\x9c\xff\xda\xcf\x57\x00\x91\x5e\x93\xe5\x12\x55\xf4\x1a\xa2\x1f\xbf\xff\x21\x7a\x65\xaf\x31\xb1\x90\xd1\x6b\xb0\xf7\x01\x22\xc3\x0c\x47\x7b\x3f\x95\x14\xf9\xf7\x99\x92\x46\xba\xe7\x00\xa2\x15\x2a\xcd\xa4\xb0\x77\x8b\x1f\x41\x48\x03\x1a\x4d\x74\x05\xf0\xe4\x56\xd3\x71\x82\x29\xea\xe8\x35\xfc\xc7\x13\x25\xc6\x64\xe5\x02\xf6\x67\x6d\x9f\xfd\xe4\x9e\x8d\xa5\xd0\x79\xeb\x61\x92\x65\x9c\xc5\xc4\x30\x29\xae\x7f\xd7\x52\xd4\xcf\x66\x4a\xd2\x3c\x1e\xf9\x2c\x31\x89\xae\xb7\x74\xbd\xfa\xcb\xf5\x82\xcb\x75\x7d\xc9\x3e\x23\xb5\x69\xfc\x0e\x10\xc9\x0c\x95\x5b\xed\x3d\xb5\x3b\xfc\x59\x21\x31\xf8\x8b\x22\x59\x52\xb0\xef\x9e\x52\xa8\x33\x29\x34\xea\x16\x31\x40\xf4\xe3\x0f\x3f\x74\x2e\x01\x44\x14\x75\xac\x58\x66\x0a\xa9\x35\x16\x72\xb7\x9d\xb0\xc8\x16\x19\x40\xf4\x67\x85\x0b\x4b\xf1\xa7\x6b\x8a\x0b\x26\x98\x5d\x41\x5f\x3b\x9d\x34\x18\xfb\x58\x30\x13\xb5\xc8\x9f\xae\x42\x3f\x3f\x35\x36\x91\x11\x45\x52\x34\xa8\x6a\x71\xfa\xff\x3a\xec\x0b\x92\x3a\x2c\xcc\x25\xdd\x74\x79\x67\xa2\xef\x8e\xc2\xc7\x9c\x29\xb4\x52\x34\x2a\xc7\xa3\xef\xf9\x31\x47\x6d\xc6\x6c\xf9\x53\x63\xcb\x86\x2c\xbb\x9b\x8d\xde\x72\xb9\xbe\x43\xb5\x62\x71\x43\x82\x9f\xae\x9a\xcb\x14\x52\xab\x31\x74\xfd\xd9\xfe\x33\x63\xf4\xa9\x89\xa6\x25\x0e\x83\xe9\x17\x34\x8e\xf9\x3b\x43\x0c\x9e\x17\x9c\x5a\xac\x3d\x17\xa0\x0a\x19\x86\x31\x65\x8f\xef\x34\x4c\x99\x4d\xe6\x96\xd5\x46\x31\xb1\x8c\x4e\x00\x86\xeb\x58\xa6\x29\x33\xd3\x2c\x8c\x27\x39\x2f\x34\x34\x8e\xd8\x07\x25\x63\xd4\x1a\xe9\x05\x15\xfb\xa2\x82\x22\x27\x9b\x49\xa0\xb8\xa1\xf4\x8d\x23\x3a\x2b\x58\xdc\x50\x7a\x67\xc8\xf2\xff\xd0\x3e\xbc\x7a\x01\xde\xaf\xc4\x44\xa1\x82\x33\xf1\x7f\xd7\x4c\xac\xe4\x03\x4e\x45\xf7\x7b\x47\xf5\x36\x17\xb1\x43\xe8\x05\xe6\x17\x98\xd7\xd2\x6f\x83\xe3\xcc\xf0\xae\x2d\x3b\x53\xe1\xee\xf6\x70\x41\xf9\x05\xe5\xdb\xd2\x3f\x2b\x5c\xeb\xeb\xcf\xee\x5f\x77\x85\xac\x49\x3b\x96\xdd\x95\xdf\xdc\x58\x82\x12\x54\x39\x3f\xb3\xa0\xb6\xcb\xdd\x57\x09\xfc\x52\xbb\xe7\xc1\x8d\x61\x29\xca\xdc\xcc\x52\x1d\xe6\xe7\x31\x47\x35\x74\x1a\x17\x84\xeb\x3e\x8e\x98\x30\xb8\x44\xd5\xa5\x5e\x48\x95\x12\x53\x3c\xf0\xd7\x1f\x4f\x92\x0f\x6c\x1f\xb5\x58\xa6\x19\x47\x33\xcd\xaf\xfc\x5c\x10\x39\x4c\xdf\xfe\x61\x50\x09\xc2\xf9\x99\xe5\x0c\x3d\x4c\x5e\x0e\xdf\xc9\xb9\x39\xb9\x0f\xec\x85\xc6\xf9\xb8\x44\x85\x24\x9d\xe2\x01\xef\x1c\xc5\xed\x0a\x85\xd1\x47\x3b\x87\xdf\x78\x3e\x98\x58\x42\xb5\xce\xb7\xc7\xab\xf3\x38\x6e\xbf\xaa\x73\xb8\x50\x32\x9d\x69\x7c\x3c\xbe\xd3\x29\xf8\xe9\xf5\x39\x39\x13\xe6\xef\x7f\x3b\x89\xd3\x59\x11\x9e\x4f\xce\x5b\xfe\x6d\x89\x2e\xc9\xcb\x79\xc1\xf7\xe4\x86\xfb\x86\xd2\xd2\x76\x37\x10\x72\x3a\xbb\xbd\xaf\x9d\xfe\x07\x5b\x60\xbc\x89\xf9\xf1\xc0\xfd\x85\x4d\x75\xc5\xf0\x5e\x36\x7b\x5f\x49\x57\x5d\xdd\x06\x53\x75\x5f\x35\xd8\x39\x2a\x00\x91\x29\xd4\x28\x0c\x29\xc4\x53\xa9\xa7\xc4\xbf\x9c\xff\x8e\x71\x9d\x26\x46\x99\xb2\x7a\x32\xac\x23\xfc\xf2\xf9\x96\x3a\xfa\xce\x50\x73\xc7\xda\x10\x93\x6f\x29\x72\x0c\x25\xc5\x0c\x05\x45\x11\x77\x79\x69\xd0\x13\xa5\x48\xfb\xb8\x45\xcc\x60\xda\x7d\x7e\x64\x0f\xe2\x29\x08\xef\x11\xe7\xed\x00\xb9\x96\x66\x6d\x0f\x01\x75\xdd\x09\x8c\x0b\xf6\x98\x14\x45\x6d\x20\xb8\x6a\x2c\x29\xce\xb8\x8c\xbb\x88\x19\xcd\x56\x4c\x38\x47\x35\x65\x4f\x57\x9d\x45\xea\xd9\x87\x41\xb1\x43\xec\x9a\xd1\x1a\x08\x08\x5c\x83\x0b\xed\x61\xcd\x4c\x02\x04\x74\x86\x31\x5b\xb0\x18\xbc\x90\x82\x0a\xdd\x2e\xe5\x9f\x46\x8f\xae\x37\x35\xdb\x02\xed\x50\x44\xd3\xce\xa1\x9b\xe1\xcc\x39\xab\x72\x4b\xe0\x0d\x0d\x3a\x21\x78\x1d\x86\xb5\x35\x50\x91\x3e\x8d\xda\x16\x05\x2b\x7b\x92\x13\xb5\x9c\x70\x76\xdf\xdd\xdf\x7f\xf8\x88\x8f\x6f\x88\xc9\xd3\x97\xa1\xec\x7e\x7d\x01\xa1\xd4\xaa\xbc\x14\x20\x30\xb1\x2a\xf9\x0e\xaa\xfe\x0c\x94\x5d\x05\x2f\x7b\xd9\xdb\xdf\x2a\xea\xb0\xe4\xb9\xd4\xb9\x9a\x62\xca\x7f\xe2\x72\x3e\x80\x05\x8a\xd9\x73\xb9\xcc\x33\x46\x60\x08\x73\x1d\x47\x51\xc6\x18\x3e\xca\x00\x23\xc1\x24\x08\x4b\x37\x6b\x36\x04\xc5\x22\xe5\x39\x0d\x16\xab\x1a\xd6\x31\xa5\xe4\x77\x04\x0a\x4d\xae\x84\x76\x62\xf0\x72\x7a\xff\x06\xe4\xc2\xfd\xee\x8d\x35\xed\x37\xd2\x7d\xd5\xfd\x17\x22\xa6\x76\x06\x62\x03\xa4\xa3\xc4\x56\xfd\x41\x65\x7d\x8a\x0f\x90\xd0\x9c\xcb\xf9\x9e\xbb\x8c\xa5\x30\x28\xcc\x6c\xdf\xd8\x9e\xa3\x58\x9a\xe4\x38\x61\x4b\x3f\x46\x2b\x29\x41\x22\xb9\x3b\xc4\x0a\x17\xa8\x50\xc4\x68\x0f\x2c\x01\x2b\x01\x07\x50\xa2\xb5\x8c\x99\xc3\xa8\xbb\xa6\x8d\x54\x21\xa0\xee\xa8\x7a\xbe\x3c\xb8\x7e\x05\x99\xc0\xb0\xce\x20\x25\xea\x41\x03\x11\x80\x7f\x30\x6d\x6c\xf2\xef\xad\x17\xd1\x50\x36\x76\x46\xa7\x06\xbb\xfa\x25\x2f\x0f\x1f\x3a\x8f\x63\xd4\x7a\x91\xf3\x3e\xea\xb9\x94\x1c\x89\xe8\x3b\xad\xe5\xed\x31\x56\x2d\x14\xf6\x04\x44\xd6\x31\x0f\x11\x0a\x67\x07\xeb\xd2\x48\x94\x8b\x07\x21\xd7\x62\x56\xc7\x5e\xcd\xf0\x39\x8e\x31\x33\xb7\xcc\x24\xad\x06\xa3\x1b\x46\xdf\xdc\xcb\xed\x1b\x26\x41\x71\xe3\x88\x7e\x92\xad\x62\xa1\xbf\x63\xc9\xba\x17\x3f\xe6\x22\xbc\x42\xf7\xaa\xdd\xb2\xd4\x18\xb8\x3c\x67\xa2\x75\x79\x5d\x3c\xed\x3a\x8d\x8d\xeb\x09\x11\xb4\x5d\x04\xd3\x79\x97\x25\xd6\x3b\xb0\x15\xb7\x72\xe4\xa8\x9b\x5b\xb6\xe4\xc3\xf9\x6f\x8b\xd6\x05\xb1\x69\x5f\xc0\x02\xf1\xb5\x1e\xdb\x77\xad\x00\x98\xdc\xea\x73\x1a\x54\x29\x13\x4e\x4f\xef\xa4\x7c\xe8\xa5\x29\x65\x55\xdc\xae\xea\x90\x11\xc5\x05\xf1\x4e\x77\x40\xf3\x5b\x06\xa1\x09\x33\xf0\xa5\xc0\x39\xfa\xf8\xc5\x22\x0d\x88\xa0\x30\xc7\x84\xac\x98\xcc\x95\x8d\x64\x48\x61\x19\x8a\xa0\xa6\x2f\xd6\xdb\x32\x91\x07\x9c\xfa\x2f\x70\xfc\x9a\x2a\xee\x44\x10\xb0\xc3\xf8\x77\xf3\x86\x9d\x36\x97\x89\x52\x08\x95\x07\x76\xa6\x13\xbc\x57\xb6\x12\xb6\x3e\xd9\x3d\xe0\xcb\x7d\xf0\x4d\xbd\xe5\xeb\x05\x61\x1c\xe9\xb7\x21\x19\x6f\x7f\x4c\x70\x88\x6d\x3d\x2c\x1f\x9f\x6a\x9a\x07\x0c\x60\xe0\xbb\x90\x67\xf4\x19\xfd\x8c\x1d\x1c\x6b\x62\x9a\x99\xcd\x04\xa8\xdd\xda\xe7\x07\xf2\x54\x1b\xa5\x1d\x2f\xeb\x45\xa5\xa4\x9a\xc2\x9d\x7d\x7e\x60\x3d\xef\x71\x3d\xfd\xd8\x35\x8b\xf4\x67\x31\xb0\x6c\x62\x4c\x36\x53\xf8\x78\xd4\xea\x4f\xb1\xa8\xce\x26\xaf\xaa\xb3\x61\x11\x98\x29\x81\xa5\xeb\x40\x8c\x37\x30\xde\x80\xa0\x88\x49\x96\xeb\x9c\xfb\x52\x20\xe7\x90\x49\xad\xd9\x9c\xa3\xb7\x33\xd6\x9a\x13\x1b\xe2\x6d\x60\xde\x0a\xf2\xcb\x80\xce\xd9\x73\x26\x9c\x3d\xb7\xa7\xa5\xd7\xa8\xfb\x02\x64\x9c\x20\xcd\x39\x52\xdf\xc1\x39\xc4\xae\x1f\x10\x92\x19\x96\xe2\x97\xa8\xf9\x9a\x3d\x97\xa4\xc4\xe0\x77\x96\xa9\x71\x75\x83\xa2\x5e\x9b\x10\x6d\xc5\xaf\xac\x36\xbe\x03\x93\x30\x5d\x44\xe2\x56\x15\x0a\x39\x31\x6c\x85\xfe\x09\xe7\x7b\x05\xa0\x15\x3a\xd8\x30\xa8\x2a\xfa\x0a\x49\x11\x98\x06\x85\xb1\x5c\xa1\x42\x1a\xd0\x5c\xc3\x92\x8c\x50\x58\xc5\x67\x4d\x06\xaa\x6c\x85\xb9\x32\x50\xce\x39\x48\x05\xce\xa0\xf5\x26\x02\x0d\x03\x71\xe4\xce\xd9\x28\xab\x74\x6f\x09\x83\x4a\x4e\x51\xeb\xf6\x08\xf4\x30\xee\xfa\x15\x59\xbf\xad\x25\x20\x01\xce\x98\xfa\x83\x67\x95\x2c\xe3\x38\x57\xc5\x91\x63\x56\x75\xf5\x39\x7b\x55\x07\x5b\x4c\x50\x16\xbb\x53\xec\xea\x45\x24\xd7\x55\x9c\xe5\xd7\xb3\xb1\x82\xfd\xad\xd8\x80\xd5\x3a\x13\x1e\x84\x2e\x3c\x1c\x54\xc2\x7d\x5b\x90\x7b\x64\x12\xde\x43\x6c\x99\xf8\x62\x06\x72\xfb\x86\x0f\x5d\xa2\x50\xd1\x3f\x40\x53\x07\x20\x2e\x50\x0f\x50\xfb\x55\xb9\xd4\xa6\x13\xd7\x13\xce\xe8\xac\xf4\x37\xed\x79\x8a\xc1\x00\xb9\xbd\xa1\x90\x5a\xad\xd0\xc0\x81\x0c\x9d\x5e\x99\xf0\xd1\x7d\xa1\x10\x9b\xe3\xc3\x12\x85\x8d\xa0\xbb\xea\x0d\x28\xe3\x2d\x21\xfa\x7d\x55\xad\xaf\x5a\x73\x27\xb5\xa4\xc7\xac\xd5\x7d\x21\x43\xda\xa9\x89\x1c\xa9\x76\x0b\x76\xad\xb2\x66\xfd\x96\x90\xbb\xaa\xd4\x11\xb2\xa0\x6d\xd5\xdd\x79\xa3\x7d\x5a\x17\xf8\x65\x24\xbc\x4f\x1e\x30\x49\xca\x0d\xa7\x17\x90\x73\xf8\x33\xde\x43\x45\xdc\x2b\xaa\xce\x2a\xee\x1e\xa1\x94\x79\x7b\xfa\x21\xbc\x26\xf4\x9f\x90\xd1\xb3\x24\x8d\xc5\xc2\xed\xa0\xb3\xc9\xc7\xdc\x7e\x8e\x67\xab\x4e\xd7\x32\x7e\x9e\xd8\xce\x89\xcb\x7a\xe6\xaa\x70\xea\xdc\xf6\x9a\x71\x0e\x42\x02\x97\x62\x89\x0a\xe2\x84\x88\x60\x17\xc8\x4b\xdb\xb7\x8a\x2e\xb2\x1e\x25\xeb\xa2\xb1\xd6\x27\xcc\xc3\x8d\xf4\x76\xb2\x39\x6e\x33\xdd\x59\xd9\x43\xce\x67\x83\xd4\x85\x8d\xb3\x72\xd7\xe3\x1d\xf7\x36\xb4\x06\x96\xaf\xea\x91\x62\xca\x9c\x85\x7b\xc5\x7d\x4d\xba\xf3\x35\xb5\xcb\x9d\xba\x8f\xb6\x41\x0a\xbe\xc2\x4f\x06\xe9\x32\x61\x9d\x52\xe4\x0b\x64\xba\xc1\x57\x78\x07\x4e\x28\x9d\xb4\xbc\x73\x08\x37\x96\x68\xe7\xd2\xfb\x08\xc8\x2d\x3f\x46\x40\xf5\x2b\xa4\xde\xef\x0d\x96\x6e\xe0\x05\x0b\x42\xf4\xac\x9e\x4f\x99\x95\x7e\x7f\xfc\x9b\x06\xe2\xae\x51\x6f\xdc\x47\x7e\x83\x61\xfa\x68\x97\xd9\x19\x75\xbd\x18\xa0\x69\x06\xe8\xf8\x96\x61\x87\xbe\x7a\xff\x5a\xc8\x59\x14\x9f\xc3\x96\xf5\x45\xc6\x06\xfb\x57\x45\xfb\x4b\x3a\xcf\x19\x6f\x34\x5a\x75\x9d\x0a\x9e\x90\x90\x4a\x85\x45\x74\xa7\x21\x26\x02\xe6\x08\x29\xa1\xe8\x53\x20\xa6\x7d\xd1\xe7\xbf\xc2\xfd\xec\x82\xc2\x39\xc2\x82\x71\x2e\xd7\x48\x61\xbe\x01\x52\x06\x8e\x76\xf9\x66\xb9\x4f\x6c\xda\x6f\x96\xf2\x41\x43\x42\x56\x08\x2a\x0f\x4d\xfe\xbd\xbb\xbf\xff\xf0\x0e\x09\x45\x75\x08\x4c\x1e\x70\xab\x63\xb1\xf7\x48\xc5\x1e\xf9\x63\xbd\x09\x58\x2b\x92\x69\x20\xa0\x99\x58\x72\x84\xc4\x5f\x7d\xc0\xcd\x75\x5f\x01\xd2\x12\xff\x8a\x26\x91\xf4\xb0\xba\x57\xea\xd7\x68\x9a\x28\x6c\x95\xa0\x2c\x2f\xcd\xdf\xb3\x4e\x89\x2a\x6b\x57\xba\x28\x76\xfb\xd7\x32\xf3\xdf\x24\x34\x69\x88\x89\x93\x51\x55\xac\x0e\x7b\x6d\xe1\xf9\xfd\xd7\x25\xac\x7a\x7e\xc3\xde\x85\x82\x36\x2c\xbb\xaa\x67\x72\xc8\x7c\x95\xa4\x53\x5a\x5e\x3b\x7a\x54\x5e\xe9\x47\x18\xce\xdc\xd1\xd7\x29\xce\x4d\x83\x26\x9c\xa4\xa7\x5d\x74\x8d\x59\xfc\xd7\x86\xcc\x61\x37\xfc\x4b\x2d\x34\xda\xf3\x44\x80\xcc\xcd\x52\x32\xb1\x04\xa9\x80\x89\x58\xba\x2f\x76\x9c\x4a\x0b\x3f\xf6\x0a\x98\x29\xce\x8c\x49\xca\xe3\xa2\x5f\x15\x1a\x77\x39\xa9\x2c\xa6\x0a\xc0\x29\xa9\x0f\x03\x65\x87\xeb\x02\x82\x1e\x10\xf8\xa6\xfd\x2c\x96\xb4\xd7\xe2\x85\x3e\xe5\xef\xff\x90\x7f\x27\x20\x0a\x95\x94\x26\x71\x10\x0d\xb7\xff\xfc\xd7\xed\xdd\x7d\x1f\x1a\x8a\x81\x03\x57\xc7\x2e\x21\x21\x64\x3f\x24\xba\x99\xcb\x89\x6a\x9f\x72\x4a\xa3\xf6\xa4\x83\xe4\xcf\xfd\x0d\xd6\x33\x94\xe0\xcf\x69\xae\xf1\xa6\x1c\x47\x27\x1a\x5c\x16\xbe\x6b\x08\x3d\x94\x1b\x5f\x3a\x2f\xfb\xb4\xb0\xbd\xe0\xab\x34\x0d\xe0\x3b\xa0\x72\x2d\xfc\xf7\xa3\xfe\xae\x2e\xa7\x0e\x8c\x62\xcb\x65\x4f\x6f\x3a\x50\x4b\x38\x91\x42\xca\x42\xc8\xec\x5c\xda\x32\xe3\x70\x5f\xb2\x0d\x4c\x18\x09\x50\x32\x6f\x15\x52\xfd\xec\x32\x0d\xfb\x20\xd6\xb3\xbc\xee\x23\x05\x82\x69\x39\x7c\xd6\x58\xaa\x96\x40\x8f\xbe\xaa\x19\x9d\xe7\x54\x55\xbf\x38\x5a\x3c\xb5\x67\x15\xda\xd3\xee\x42\x9a\x04\x55\x7b\xe6\x65\xc0\x54\x94\xd3\x38\xcf\x37\xbf\xd0\x9b\xec\x0e\x6e\xbe\x20\xa9\x72\xa4\xc6\x47\xdd\xe5\x04\x81\xcb\xba\x5b\x63\x9b\xe0\x5a\xd5\xb4\x76\x5f\x3d\xbb\x3f\x7c\x70\x40\x77\xff\x5c\xb0\x9b\x6f\x44\xda\x19\x0e\xd8\x6a\xf8\xc7\x44\xc4\xc8\x3b\x17\x1f\x98\xbb\x52\x5c\x18\xcc\x8c\xda\xef\x0d\x49\xac\xe8\xef\x37\xe7\x5e\x2b\x41\x55\xa3\xae\xaa\x05\x91\x2b\xfb\xff\xd3\xd5\xff\x02\x00\x00\xff\xff\x6a\xbd\xfe\xed\x88\x5c\x00\x00")

func modelModelSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_modelModelSwaggerJson,
		"model/model.swagger.json",
	)
}

func modelModelSwaggerJson() (*asset, error) {
	bytes, err := modelModelSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/model.swagger.json", size: 23688, mode: os.FileMode(420), modTime: time.Unix(1511535394, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model/model.swagger.json": modelModelSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"model": &bintree{nil, map[string]*bintree{
		"model.swagger.json": &bintree{modelModelSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

