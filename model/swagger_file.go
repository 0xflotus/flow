// Code generated by go-bindata.
// sources:
// model/model.swagger.json
// DO NOT EDIT!

package model

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelModelSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xe8\xee\x61\x17\x68\x9b\xde\xe2\x70\x0f\x7d\xcb\x6e\xd3\x6d\x1f\x16\xdb\x6b\x72\xf7\x72\x57\x18\xb4\x38\xb6\xb8\xa1\x48\x85\xa4\xec\x0d\x8a\x7c\xf7\x03\x49\xfd\x37\x25\x4b\xb6\x63\x3b\xd7\x2c\xb0\xa8\x4d\x71\xa8\xe1\xcc\x8f\xf3\x97\xce\xb7\x0b\x80\x48\xaf\xc9\x72\x89\x2a\x7a\x07\xd1\x4f\x6f\xde\x46\xaf\xec\x18\x13\x0b\x19\xbd\x03\xfb\x1c\x20\x32\xcc\x70\xb4\xcf\x53\x49\x91\xbf\xc9\x94\x34\xd2\xcd\x03\x88\x56\xa8\x34\x93\xc2\x3e\x2d\x3e\x82\x90\x06\x34\x9a\xe8\x02\xe0\xd1\xad\xa6\xe3\x04\x53\xd4\xd1\x3b\xf8\x8f\x27\x4a\x8c\xc9\xca\x05\xec\x67\x6d\xe7\x7e\x75\x73\x63\x29\x74\xde\x9a\x4c\xb2\x8c\xb3\x98\x18\x26\xc5\xe5\x1f\x5a\x8a\x7a\x6e\xa6\x24\xcd\xe3\x91\x73\x89\x49\x74\xbd\xa5\xcb\xd5\xdf\x2e\x17\x5c\xae\xeb\x21\x3b\x47\x6a\xd3\xf8\x0e\x10\xc9\x0c\x95\x5b\xed\x13\xb5\x3b\xfc\x45\x21\x31\xf8\xab\x22\x59\x52\xb0\xef\x66\x29\xd4\x99\x14\x1a\x75\x8b\x18\x20\xfa\xe9\xed\xdb\xce\x10\x40\x44\x51\xc7\x8a\x65\xa6\x90\x5a\x63\x21\xf7\xd8\x09\x8b\x6c\x90\x01\x44\x7f\x55\xb8\xb0\x14\x7f\xb9\xa4\xb8\x60\x82\xd9\x15\xf4\xa5\xd3\x49\x83\xb1\x2f\x05\x33\x51\x8b\xfc\xf1\x22\xf4\xf9\xb1\xb1\x89\x8c\x28\x92\xa2\x41\x55\x8b\xd3\xff\xd7\x61\x5f\x90\xd4\x61\x61\x2e\xe9\x43\x97\x77\x26\xfa\x9e\x28\xbc\xcf\x99\x42\x2b\x45\xa3\x72\x3c\xf8\x9e\xef\x73\xd4\x66\xcc\x96\xbf\x36\xb6\x6c\xc8\xb2\xbb\xd9\xe8\x03\x97\xeb\x1b\x54\x2b\x16\x37\x24\xf8\xf5\xa2\xb9\x4c\x21\xb5\x1a\x43\x97\xda\x28\x24\x69\x13\x4a\x4b\x1c\x46\xd2\x8d\xa3\xb8\x5e\xa1\x30\xfa\x60\x50\xfa\xc1\xf3\xc1\xc4\x12\xaa\x75\x7e\x3c\x08\xbe\x9c\x94\x1d\xb7\x4f\x0d\xab\xa5\x7d\xd3\x1b\x2b\xd6\x19\xa3\x61\x7c\xdd\xe7\xa8\x86\x00\xb6\x20\x5c\x77\x11\x66\x1e\x32\xb7\xbc\x36\x8a\x89\x65\x73\x13\x8f\xaf\x46\x33\xa5\x64\x3a\xd3\x78\xff\x64\x5c\x75\x9e\x2e\xa4\x4a\x89\x85\x51\x94\x33\x61\xfe\xf1\xf7\xe8\x78\x80\xfe\x56\x28\xe0\x71\x0a\xa6\x7f\x45\xe3\x70\x72\x63\x88\xc1\xf3\xb2\x8f\x2d\xd6\x8e\x65\x21\x07\x41\x6c\xfd\xd1\x34\x23\x39\x00\xe1\x23\x81\xe1\x32\x96\x69\xca\xcc\x34\x97\xe9\x49\xce\x0b\x0d\x0d\x9f\xf1\x59\xc9\x18\xb5\x46\xfa\x82\x8a\x5d\x51\x41\x91\x93\x87\x49\xa0\xb8\xa2\xf4\xbd\x23\x3a\x2b\x58\x5c\x51\x7a\x63\xc8\xf2\xff\xd0\x3e\x8c\x70\x71\x27\x0f\xe7\x4a\x4c\x14\x2a\x38\x6d\x40\x57\x83\x9b\x89\x95\xbc\xc3\xa9\xe8\xfe\xe4\xa8\x3e\xe4\x22\x76\x08\x7d\x81\xf9\x0b\xcc\x6b\xe9\xb7\xc1\x71\x66\x78\xd7\x96\x9d\xa9\x70\x77\x7b\x78\x41\xf9\x0b\xca\x37\xa5\x7f\x56\xb8\xd6\x97\xdf\xdc\xbf\x6e\x84\xac\x49\x3b\x96\xdd\x96\xdf\x5c\x59\x82\x12\x54\x39\x3f\xb3\xa0\xb6\xcb\xdd\x77\x09\xfc\x52\xbb\xe7\xc1\x8d\x61\x29\xca\xdc\xcc\x52\xfd\x3d\x95\x0c\x02\x47\x2d\x96\x69\xc6\xd1\x4c\xf3\x2b\xbf\x14\x44\x0e\xd3\xd7\x7f\x1a\x54\x82\x70\x7e\x66\x39\x43\x0f\x93\x2f\x87\xef\xe4\xdc\x9c\xdc\x07\xf6\x42\xe3\x5c\x5c\xe2\x8a\xf0\x7c\x72\xa8\xf7\x6f\x4b\xf4\x12\xef\x9d\xd7\xc9\x3b\x39\xd6\xaf\x28\x2d\xe1\xde\x40\xc8\x91\xa1\x5e\xf5\x1b\x1b\xec\xd5\x1d\xbf\x60\x09\xb8\x60\x33\x53\xa8\x51\x18\x52\x20\xb2\x3a\x10\xa5\x56\xe4\xfc\x0f\x8c\xeb\x78\x2f\xca\x94\x3d\x18\x86\x75\xf0\x5e\xce\x6f\x9d\x80\x3e\xcd\x36\xc1\xa7\x0d\x31\xf9\xc6\xd9\x19\x43\x49\x31\x43\x41\x51\xc4\x5d\x5e\x1a\xf4\x44\x29\xd2\x06\x41\xc4\x0c\xa6\xdd\xf9\x23\x8b\x89\x8f\x41\xfb\x32\x02\x05\x7b\xc8\xb5\x3c\x6c\x3b\x08\xa8\x6b\xe4\x60\x9c\xd5\x66\x52\x14\x41\x7e\x70\xd5\x58\x52\x9c\x71\x19\x77\x11\x33\x9a\xad\x98\x70\x8e\x6a\xca\x9e\x2e\x3a\x8b\xd4\x5d\xf9\x41\xb1\x43\xec\xda\xa4\x1a\x08\x08\x5c\x83\xf3\xd1\xb0\x66\x26\x01\x02\x3a\xc3\x98\x2d\x58\x0c\x5e\x48\x41\x85\x6e\xd6\xe4\x4e\xa3\x47\x57\x64\x9e\x6d\x80\x76\x28\x1e\x6e\x44\xc3\x9d\x60\xf8\x9c\x55\xb9\x21\xf0\x86\x06\x9d\x10\xbc\x0e\xc3\xda\x1a\x28\x2d\x9d\x46\x6d\x8b\x82\x95\x1d\xc9\x89\x5a\x4e\x38\xbb\x1f\x6f\x6f\x3f\x7f\xc1\xfb\xf7\xc4\xe4\xe9\xf3\x50\x76\xbf\xbe\x80\x50\x6a\x55\x5e\x0a\x10\x98\x58\x95\x7c\x07\x55\x7f\x06\xca\xae\xa2\xc5\x9d\xec\xed\xef\x15\x75\x58\xf2\x5c\xea\x5c\x4d\x31\xe5\x3f\x73\x39\x1f\xc0\x02\xc5\xec\x58\x2e\xf3\x8c\x11\x18\xc2\x5c\xc7\x51\x94\x31\x86\x8f\x32\xc0\x48\x30\x09\x82\xbb\x13\x31\x08\xc5\x22\x10\x3f\x0d\x16\xab\x64\xf4\x90\x52\xf2\x3b\x02\x85\x26\x57\x42\x3b\x31\x78\x39\x7d\x7a\x0f\x72\xe1\xbe\x7b\x63\x4d\xfb\x8d\x74\x5f\x99\xee\x99\x88\xa9\x9d\xf4\xd9\x00\xe9\x20\xb1\x55\x7f\x50\x59\x9f\xe2\x3d\x24\x34\xe7\x72\xbe\xe3\x2e\x63\x29\x0c\x0a\x33\xdb\x35\xb6\xe7\x28\x96\x26\xd9\x2d\x6c\xe9\x16\xf1\x06\x40\x5a\x89\x09\x12\xc9\xdd\x29\x56\xb8\x40\x85\x22\x46\x7b\x62\x09\x58\x11\x38\x84\x12\xad\x65\xcc\x1c\x48\xdd\x98\x36\x52\x85\x90\xba\xa5\x7e\xf1\xfc\xf0\xfa\x1d\xa4\x02\xc3\x3a\x83\x94\xa8\x3b\x0d\x44\x00\xfe\xc9\xb4\x61\x62\x59\x98\x2f\xa2\xa1\x2c\xd1\x8e\xce\x0d\xb6\x55\x3e\x9f\x1f\x3e\x74\x1e\xc7\xa8\xf5\x22\xe7\x7d\xd4\x73\x29\x39\x12\xd1\x77\x5c\xcb\xc7\x63\xcc\x5a\x28\xee\x09\x88\xac\x63\x1f\x22\x14\xce\x10\xd6\xb5\x91\x28\x17\x77\x42\xae\xc5\xac\x0e\xbe\x9a\xf1\x73\x1c\x63\x66\xae\x99\x49\x50\xb5\xc6\xb3\x8c\x3f\xdc\xca\xcd\x07\x26\x41\x71\xe5\x88\x7e\x96\xad\x1a\x96\x7f\x62\xc9\xba\x83\x5f\x72\x11\x5e\xa1\x3b\x6a\xb7\x2c\x35\x06\x86\xe7\x4c\xb4\x86\xd7\xc5\x6c\xd7\x33\x68\x8c\x27\x44\x50\xde\x1a\xd1\x79\x97\x25\xd6\x7b\xf5\x22\x6e\x25\xc9\x51\x37\xb9\x6c\xc9\x87\xf3\xdf\x17\xad\x01\xf1\xd0\x1e\xc0\x02\xf1\xb5\x1e\xdb\x4f\xad\x00\x98\xdc\xe8\x58\x18\x54\x29\x13\x4e\x4f\x1f\xa5\xbc\xeb\xa5\x29\x65\x55\x3c\xae\xca\x63\x11\xc5\x05\xf1\x5e\x77\x40\xf3\x1b\x06\xa1\x09\x33\xf0\xe5\xd7\x39\xfa\x00\xc6\x22\x0d\x88\xa0\x30\xc7\x84\xac\x98\xcc\x95\x0d\x65\x48\x61\x19\x8a\xa8\xa6\x2f\xd8\xdb\x30\x91\x7b\x9c\xfa\x27\x38\x7e\x4d\x15\x77\x42\x08\xd8\x62\xfc\xbb\x89\xc3\x56\x9b\xcb\x44\x29\x84\xca\x03\x3b\xd3\x09\xde\x2b\x5b\x09\x5b\x9f\xec\x26\xf8\x7a\x1f\xfc\x50\x6f\xf9\x72\x41\x18\x47\xfa\x63\x48\xc6\x9b\xf7\xdc\xf7\xb1\xad\xfb\x25\xe4\x53\x4d\xf3\x80\x01\x0c\xfc\x64\xe1\x88\x3e\xa3\x9f\xb1\xbd\x83\x4d\x4c\x33\xf3\x30\x01\x6a\xd7\x76\xfe\x40\xa2\x6a\xa3\xb4\xc3\xa5\xbd\xa8\x94\x54\x53\xb8\xb3\xf3\x07\xd6\xf3\x1e\xd7\xd3\x8f\x5d\xb3\xc8\x7f\x16\x03\xcb\x26\xc6\x64\x33\x85\xf7\x07\x2d\xff\x14\x8b\xea\x6c\xf2\xaa\x3a\x1b\x16\x81\x99\x12\x58\xba\x16\xc4\x78\x03\xe3\x0d\x08\x8a\x98\x64\xb9\xce\xb9\xaf\x05\x72\x0e\x99\xd4\x9a\xcd\x39\x7a\x3b\x63\xad\x39\xb1\x21\xde\x03\xcc\x5b\x41\x7e\x19\xd0\x39\x7b\xce\x84\xb3\xe7\xf6\xb4\xf4\x1a\x75\x5f\x81\x8c\x13\xa4\x39\x47\xea\x7f\xf5\xb1\x8f\x5d\xdf\x23\x24\x33\x2c\xc5\xa7\x28\xfa\x9a\x1d\x97\xa4\xc4\xe0\x6b\xcb\xd4\xb8\xc2\x41\x51\xb0\x4d\x88\xb6\xe2\x57\x56\x1b\xaf\xc1\x24\x4c\x17\x91\xb8\x55\x85\x42\x4e\x0c\x5b\xa1\x9f\xe1\x7c\xaf\x00\xb4\x42\x07\x1b\x06\x55\x55\x5f\x21\x29\x02\xd3\xa0\x30\x96\x2b\x54\x48\x03\x9a\x6b\x58\x92\x11\x0a\xab\xf8\xac\xc9\x40\x95\xbd\x30\x57\x07\xca\x39\x07\xa9\xc0\x19\xb4\xde\x44\xa0\x61\x20\x0e\xdc\x3a\x1b\x65\x95\x6e\x2d\x61\x50\xc9\x29\x6a\xdd\xbe\xcc\x38\x8c\xbb\x7e\x45\xd6\x6f\x6b\x09\x48\x80\x33\xa6\xfe\xe0\x59\x25\xcb\x38\xce\x55\x71\xe4\x98\x55\x5d\x7d\xce\x5e\xd5\xc1\x16\x13\x94\xc5\xee\x14\xbb\x82\x11\xc9\x75\x15\x67\xf9\xf5\x6c\xac\x60\xbf\x15\x1b\xb0\x5a\x67\xc2\x83\xd0\x85\x87\x83\x4a\xb8\x6d\x0b\x72\x87\x4c\xc2\x7b\x88\x0d\x13\x5f\xdc\x66\xda\x7c\xe0\x43\x97\x28\x54\xf5\x0f\xd0\xd4\x01\x88\x0b\xd4\x03\xd4\x7e\x55\x2e\xb5\xe9\xc4\xf5\x84\x33\x3a\x2b\xfd\x4d\xbb\xcd\x3f\x18\x20\xb7\x37\x14\x52\xab\x15\x1a\x38\x90\xa1\xd3\x2b\x13\x3e\xba\x2f\x14\x62\x73\x7c\x58\xa2\xb0\x11\x74\x57\xbd\x01\x65\x7c\x20\x44\x7f\xaa\xca\xf5\x55\x6f\xee\xa4\x96\xf4\x90\xc5\xba\x27\x32\xa4\x9d\x9a\xc8\x81\x8a\xb7\x60\xd7\x2a\x8b\xd6\x1f\x08\xb9\xa9\x4a\x1d\x21\x0b\xda\x56\xdd\x8d\x37\xda\xa7\x75\x81\x4f\x23\xe1\x5d\xf2\x80\x49\x52\x6e\x38\xbd\x80\x9c\xc3\x3f\xc8\xdb\x57\xc4\xbd\xa2\xea\xac\xe2\x9e\x11\x4a\x99\xb7\xa7\x9f\xc3\x6b\x42\xff\x09\x19\x7d\x99\xa4\xb1\x58\xb8\x1f\x74\x36\xf9\x98\xdb\xcf\xe1\x6c\xd5\xe9\x7a\xc6\xc7\x89\xed\x9c\xb8\xac\x67\xae\x0a\xa7\xce\x6d\xaf\x19\xe7\x20\x24\x70\x29\x96\xa8\x20\x4e\x88\x08\xb6\x81\xbc\xb4\x7d\xaf\xe8\x45\xd6\xa3\x64\x5d\x74\xd6\xfa\x84\xb9\xbf\x91\xde\x4c\x36\x77\xec\xd2\xec\x71\x3e\x1b\xa4\x2e\x6c\x9c\x95\xbb\x1e\xef\xb8\x37\xa1\x35\xb0\xbc\xab\x47\x12\x61\x2c\x17\x13\x5f\x71\x5b\x96\x32\xc5\x72\xeb\x6b\x6a\x97\x3b\x75\x1f\x6d\x83\x14\x7c\x85\xbf\x1a\xa4\xcb\x84\x75\x4a\x91\x2f\x90\xe9\x06\x5f\xe1\x1d\x38\xa1\x74\xd2\xf2\xce\x21\x5c\x59\xa2\xad\x4b\xef\x22\x20\xb7\xfc\x18\x01\xd5\xaf\x90\x7a\xb7\x37\x58\xba\x81\x17\x2c\x08\xd1\xb3\xfa\x82\xca\xac\xf4\xfb\xe3\xdf\x34\x10\x77\x8d\x7a\xe3\x2e\xf2\x1b\x0c\xd3\x47\xbb\xcc\xde\xdf\x91\x9f\x45\x31\x33\x7c\x52\x9f\xa5\xaf\xd9\xbd\xca\xd6\x5f\x22\x38\xa6\xff\x6a\xb4\x7e\x3a\x15\x21\x21\x21\x95\x0a\x8b\x68\x41\x43\x4c\x04\xcc\x11\x52\x42\xd1\x87\xd4\x4c\xfb\x22\xc2\x7f\x85\xfb\xec\x82\x8c\x39\xc2\x82\x71\x2e\xd7\x48\x61\xfe\x00\xa4\x0c\x44\xec\xf2\xcd\xf2\x91\x78\x68\xbf\x59\xca\x3b\x0d\x09\x59\x21\xa8\x3c\x74\x95\xec\xe3\xed\xed\xe7\x8f\x48\x28\xaa\x7d\x60\x72\x87\x1b\x15\xf0\x9d\x5b\xf4\x3b\xe4\x23\xf5\x26\x60\xad\x48\xa6\x81\x80\x66\x62\xc9\x11\x12\x3f\x7a\x87\x0f\x97\x7d\x05\x2d\x4b\xfc\x1b\x9a\x44\xd2\xfd\xea\x28\xa9\x5f\xa3\xe9\x0c\xb1\x55\xd2\xb0\xbc\x34\xbf\x67\x9d\x92\x47\xd6\xae\x9c\x50\xec\xf6\x43\x65\xe6\x2f\xb9\x37\x69\x88\x89\x93\x51\x55\x91\x0e\x7b\x6d\xe1\xf9\xfd\xd7\x25\x91\xfa\x3e\x80\x7d\x0a\x05\x6d\x58\x76\x55\x0d\x7e\x9f\x0b\x3b\x92\x4e\x69\xa1\x6c\xe9\x79\x78\xa5\x1f\xe0\xb6\xdf\x96\x3e\x41\x71\x6e\x1a\x34\xe1\xa4\x2f\xed\xa2\x6b\xcc\xe2\xbf\x35\x64\x0e\xdb\xe1\x5f\x6a\xa1\xd1\xee\x25\x02\x64\x6e\x96\x92\x89\x25\x48\x05\x4c\xc4\xd2\xfd\xb1\x28\xa7\xd2\xc2\x8f\xbd\x02\x66\x8a\x33\x63\x53\xf9\x42\x72\xaf\x0a\x8d\xbb\x1c\x47\x16\x5d\x6a\x70\x4a\xea\xc3\x40\xd9\x31\x79\x01\x41\x0f\x08\x7c\x13\x78\x16\x4b\xda\x6b\xf1\x98\x30\xb8\x6c\x5d\xd0\x18\x6c\x70\x6c\x03\x44\xa1\x92\xd2\x24\x0e\xa2\xe1\xfa\x9f\xff\xba\xbe\xb9\xed\x43\x43\xd1\xc0\x76\x75\xd1\x12\x12\x42\xf6\x43\xa2\x1b\x09\x9f\xa8\x96\x26\xa7\x34\xfe\x4e\x7a\x33\xf9\xd8\x3f\xea\x39\x42\x49\xf7\x9c\xee\xc9\x5d\x95\xf7\x9b\x89\x06\x97\xd5\x6d\xbb\xd5\x1c\xca\xb5\x5e\x2a\xf9\xbb\xb4\x44\xbd\xe0\xab\x7c\x0d\xe0\x35\x50\xb9\x16\xfe\x4f\x17\xfa\xa7\xba\xec\x62\x1b\xc5\x96\xcb\x9e\x5e\x67\x20\x37\x3d\x91\x42\xca\xc4\x7a\x76\x2e\x65\xfe\x71\xb8\x2f\xd9\x06\x26\x8c\x04\x28\x99\xb7\x0a\xa9\x3e\xbb\x4c\xc3\x4e\xc4\xfa\x6e\xa8\xbb\xf5\x4e\x30\x2d\x2f\x33\x35\x96\xaa\x25\xd0\xa3\xaf\xea\xce\xc7\x31\x55\xd5\x2f\x8e\x16\x4f\xed\xde\x77\xfb\xf6\xb4\x90\x26\x41\xd5\xbe\x43\x31\x60\x2a\xca\xdb\x1d\xc7\xeb\x87\xf7\x26\xbb\x83\x9b\x2f\x48\xaa\x1c\xa9\xf1\xc3\xec\xb2\x23\xed\xb2\xee\xd6\x35\x40\x70\xad\x4f\x5a\xbb\xaf\x9e\xdd\xef\xdf\x88\xd6\xdd\x3f\x24\xe9\xee\xcb\x21\xed\x34\x9b\x37\x1a\xc8\x31\x11\x31\xf2\xce\xe0\x1d\x73\x23\xc5\xc0\x60\x66\xd4\x7e\x6f\x48\x62\x45\xbf\xb8\x79\x8f\xb2\x12\x54\x75\x75\x52\xb5\x20\x72\x61\xff\x7f\xbc\xf8\x5f\x00\x00\x00\xff\xff\x7a\xdc\x7e\x57\x73\x59\x00\x00")

func modelModelSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_modelModelSwaggerJson,
		"model/model.swagger.json",
	)
}

func modelModelSwaggerJson() (*asset, error) {
	bytes, err := modelModelSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/model.swagger.json", size: 22899, mode: os.FileMode(420), modTime: time.Unix(1511443676, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model/model.swagger.json": modelModelSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"model": &bintree{nil, map[string]*bintree{
		"model.swagger.json": &bintree{modelModelSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

